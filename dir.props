<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <Platform Condition="'$(Platform)' == ''">x64</Platform>

    <!-- true if we have bootstrapped buildtools (usually on an unsupported platform -->
    <_IsBootstrapping Condition="'$(BootstrapBuildToolsDir)' != ''">true</_IsBootstrapping>

    <PortableBuild Condition="'$(OS)' == 'Windows_NT'">true</PortableBuild>
    <PortableBuild Condition="'$(PortableBuild)' == ''">false</PortableBuild>
    <UseSystemLibraries Condition="'$(UseSystemLibraries)' == '' AND '$(PortableBuild)' != 'true'">true</UseSystemLibraries>
  </PropertyGroup>

  <PropertyGroup>
    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>
    <TargetsDir>$(ProjectDir)targets/</TargetsDir>
    <KeysDir>$(ProjectDir)keys/</KeysDir>
    <DotNetCliToolDir>$(ProjectDir)Tools/dotnetcli/</DotNetCliToolDir>
    <PatchesDir>$(ProjectDir)patches/</PatchesDir>
    <PackagesDir>$(ProjectDir)packages/</PackagesDir>
    <DotNetSdkDir>$(DotNetCliToolDir)sdk/$(SDK_VERSION)/</DotNetSdkDir>
    <DotNetSdkResolversDir>$(DotNetSdkDir)SdkResolvers/</DotNetSdkResolversDir>
  </PropertyGroup>

  <PropertyGroup>
    <BuildInParallel Condition="'$(BuildInParallel)'==''">false</BuildInParallel>
  </PropertyGroup>

  <PropertyGroup>
    <ShellExtension Condition="'$(OS)' == 'Windows_NT'">.cmd</ShellExtension>
    <ShellExtension Condition="'$(OS)' != 'Windows_NT'">.sh</ShellExtension>
    <TarBallExtension Condition="'$(OS)' == 'Windows_NT'">.zip</TarBallExtension>
    <TarBallExtension Condition="'$(OS)' != 'Windows_NT'">.tar.gz</TarBallExtension>
  </PropertyGroup>

  <PropertyGroup>
    <SubmoduleDirectory Condition="'$(SubmoduleDirectory)' == ''">$(ProjectDir)src/</SubmoduleDirectory>
    <GitModulesPath>$(ProjectDir).gitmodules</GitModulesPath>
    <ProdConFeedPath>$(ProjectDir)ProdConFeed.txt</ProdConFeedPath>
  </PropertyGroup>

  <PropertyGroup>
    <BaseOutputPath>$(ProjectDir)bin/</BaseOutputPath>
    <ToolsDir>$(ProjectDir)Tools/</ToolsDir>
    <ToolPackageExtractDir>$(ToolsDir)source-built/</ToolPackageExtractDir>
    <IldasmPath>$(ToolsDir)ilasm/ildasm</IldasmPath>
    <ToolsLocalDir>$(ProjectDir)tools-local/</ToolsLocalDir>
    <TaskDirectory>$(ToolsLocalDir)tasks/</TaskDirectory>
    <TasksBinDir>$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/Debug/netstandard1.5/</TasksBinDir>
    <LeakDetectionTasksBinDir>$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.LeakDetection/</LeakDetectionTasksBinDir>
    <BaseIntermediatePath>$(BaseOutputPath)obj/</BaseIntermediatePath>
    <OutputPath>$(BaseOutputPath)$(Platform)/$(Configuration)/</OutputPath>
    <IntermediatePath>$(BaseIntermediatePath)$(Platform)/$(Configuration)/</IntermediatePath>
    <LocalBlobStorageRoot>$(IntermediatePath)blobs/</LocalBlobStorageRoot>
    <LocalBuildInfoRoot>$(IntermediatePath)build-info/</LocalBuildInfoRoot>
    <LocalNuGetPackagesRoot>$(IntermediatePath)nuget-packages/</LocalNuGetPackagesRoot>
    <SourceBuiltBlobFeedDir>$(IntermediatePath)blob-feed/</SourceBuiltBlobFeedDir>
    <SourceBuiltPackagesPath>$(SourceBuiltBlobFeedDir)packages/</SourceBuiltPackagesPath>
    <SourceBuiltAssetsDir>$(SourceBuiltBlobFeedDir)assets/</SourceBuiltAssetsDir>
    <PrebuiltPackagesPath>$(ProjectDir)prebuilt/nuget-packages/</PrebuiltPackagesPath>
    <PrebuiltSourceBuiltPackagesPath>$(ProjectDir)prebuilt/source-built/</PrebuiltSourceBuiltPackagesPath>
    <SourceBuiltTarBallPath>$(OutputPath)</SourceBuiltTarBallPath>
    <TargetInfoProps>$(IntermediatePath)TargetInfo.props</TargetInfoProps>
    <RestoreSourcePropsPath>$(IntermediatePath)RestoreSources.props</RestoreSourcePropsPath>
    <PackageVersionPropsPath>$(IntermediatePath)PackageVersions.props</PackageVersionPropsPath>
    <LoggingDir>$(BaseOutputPath)logs/</LoggingDir>
    <MSBuildDebugPathTargetDir>$(BaseOutputPath)msbuild-debug/</MSBuildDebugPathTargetDir>
    <!-- Dir where git info is generated during online builds. -->
    <GitInfoOutputDir>$(BaseOutputPath)git-info/</GitInfoOutputDir>
    <!-- Dir where git info is placed inside the tarball. -->
    <GitInfoOfflineDir>$(ProjectDir)git-info/</GitInfoOfflineDir>
    <PackageReportDir>$(BaseOutputPath)prebuilt-report/</PackageReportDir>
    <PackageReportDataFile>$(PackageReportDir)prebuilt-usage.xml</PackageReportDataFile>
    <PoisonUsageReportFile>$(PackageReportDir)poison-usage.xml</PoisonUsageReportFile>
    <PoisonReportDataFile>$(PackageReportDir)poison-catalog.xml</PoisonReportDataFile>
    <PoisonMarkerFile>.prebuilt.xml</PoisonMarkerFile>
    <SourceBuiltPoisonReportDataFile>$(PackageReportDir)poison-source-built-catalog.xml</SourceBuiltPoisonReportDataFile>
    <SourceBuiltPoisonMarkerFile>.source-built.xml</SourceBuiltPoisonMarkerFile>
    <ProjectAssetsJsonArchiveFile>$(PackageReportDir)all-project-assets-json-files.zip</ProjectAssetsJsonArchiveFile>
    <ProdConManifestFile>$(PackageReportDir)prodcon-build.xml</ProdConManifestFile>
    <PoisonedReportFile>$(PackageReportDir)poisoned.txt</PoisonedReportFile>
    <ConflictingPackageReportDir>$(BaseOutputPath)conflict-report/</ConflictingPackageReportDir>
    <ReferencePackagesBaseDir>$(IntermediatePath)reference-packages/</ReferencePackagesBaseDir>
    <!--
      Change ReferencePackagesBaseDir conditionally in offline build.
      See corresponding change in build-source-tarball.sh to copy reference-packages
      from source-build bin dir to tarball reference-packages dir.
    -->
    <ReferencePackagesBaseDir Condition="'$(OfflineBuild)' == 'true'">$(ProjectDir)reference-packages/</ReferencePackagesBaseDir>
    <ReferencePackagesStagingDir>$(ReferencePackagesBaseDir)staging/</ReferencePackagesStagingDir>
    <ReferencePackagesSourceDir>$(ReferencePackagesBaseDir)source/</ReferencePackagesSourceDir>
    <ReferencePackagesDir>$(ReferencePackagesBaseDir)packages/</ReferencePackagesDir>
    <ReferencePackagesToDeleteDir>$(ReferencePackagesBaseDir)packages-to-delete/</ReferencePackagesToDeleteDir>
  </PropertyGroup>

  <!-- Import Build tools common props file where repo-independent properties are found -->
  <Import Project="$(ToolsDir)Build.Common.props" Condition="Exists('$(ToolsDir)Build.Common.props')" />

  <PropertyGroup>
     <ArmEnvironmentVariables Condition="'$(ArmEnvironmentVariables)' == ''">ROOTFS_DIR=$(BaseIntermediatePath)crossrootfs/arm</ArmEnvironmentVariables>
     <ArmEnvironmentVariables Condition="'$(Platform)' == 'armel'">ROOTFS_DIR=$(BaseIntermediatePath)crossrootfs/armel</ArmEnvironmentVariables>
   </PropertyGroup>

  <Import Project="$(TargetInfoProps)" Condition="$(GeneratingStaticPropertiesFile) != 'true' AND Exists('$(TargetInfoProps)')" />

  <Import Project="$(ProjectDir)dependencies.props" />

  <PropertyGroup>
    <!--
        Temporarily update RootRepo to known-good
        repo project until all repos are building clean.
        When all repos build, this can be changed back
        to cli.
    <RootRepo>cli</RootRepo>
    -->
    <RootRepo>known-good</RootRepo>
    <RootRepo Condition="$(Platform.Contains('arm'))">core-setup</RootRepo>
  </PropertyGroup>

  <ItemGroup>
    <SourceBuiltPackage Include="$(SourceBuiltPackagesPath)/*.nupkg" />
  </ItemGroup>
</Project>
