parameters:
  gatherJobs: []
  gatherPortableJob: ''

  # downloadBuildConfig by default uses the current build, but can be changed to point at an
  # existing/previous build by passing properties like these, instead:
  #
  #   buildType: specific
  #   buildVersionToDownload: specific
  #   project: 'public'
  #   definition: 'source-build-CI'
  #   buildId: 741400
  #
  # By defining this in one place, it's easier to set this up if necessary. This may be useful
  # because the build takes a long time relative to prepare-artifacts, and we may want to tweak
  # prepare-artifacts in case it fails due to a bug in the future. ...It's also nice to have the
  # properties listed in this comment even if we don't use them here, because it's hard to figure
  # them out from the docs alone--it'll be a nice reference.
  downloadBuildConfig:
    buildType: current

stages:
- stage: PrepareArtifacts
  dependsOn:
  - ${{ each gather in parameters.gatherJobs }}:
    - ${{ gather.job }}
  jobs:
  - job: PrepareArtifacts
    pool:
      vmImage: 'ubuntu-18.04'
    timeoutInMinutes: 300
    workspace:
      clean: all
    variables:
      artifactStageDir: '$(Build.SourcesDirectory)/artifacts/stage'
      nonportableSourceBuiltStageDir: '$(artifactStageDir)/nonportableSourceBuilt'
      portableSourceBuiltStageDir: '$(artifactStageDir)/portableSourceBuilt'
      allSourceBuiltStageDir: '$(artifactStageDir)/allSourceBuilt'
      outputTarballFile: '$(artifactStageDir)/Private.SourceBuilt.Artifacts.$(Build.BuildId).tar.gz'
    steps:
    - ${{ each gather in parameters.gatherJobs }}:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download ${{ gather.job }} nonportable'
        inputs:
          ${{ insert }}: ${{ parameters.downloadBuildConfig }}
          downloadType: single
          artifactName: ${{ coalesce(gather.artifactName, format('Tarball {0}', gather.job)) }}
          itemPattern: '**/Private.SourceBuilt.Artifacts.*.tar.gz'
          downloadPath: $(nonportableSourceBuiltStageDir)
          allowPartiallySucceededBuilds: true

    - task: DownloadBuildArtifacts@0
      displayName: 'Download ${{ parameters.gatherPortableJob }} portable'
      inputs:
        ${{ insert }}: ${{ parameters.downloadBuildConfig }}
        downloadType: single
        artifactName: 'Tarball ${{ parameters.gatherPortableJob }}'
        itemPattern: '**/Private.SourceBuilt.Artifacts.*.tar.gz'
        downloadPath: $(portableSourceBuiltStageDir)
        allowPartiallySucceededBuilds: true

    - script: |
        find "$(artifactStageDir)" -type f -exec du -h {} \;
      displayName: Show downloaded artifacts

    - script: |
        set -xeuo pipefail
        mkdir -p "$(allSourceBuiltStageDir)"

        # Extract all source-built assets into a single place. Overlap and overwrites are expected.
        # What matters is the portable ones are copied last and ultimately win.
        find \
          "$(nonportableSourceBuiltStageDir)" \
          "$(portableSourceBuiltStageDir)" \
          -iname 'Private.SourceBuilt.Artifacts.*.tar.gz' \
          -exec tar -xf {} -C "$(allSourceBuiltStageDir)" \;

        # Intentionally don't create a top-level directory. Matches earlier versions of this artifact.
        cd "$(allSourceBuiltStageDir)"
        tar --numeric-owner -czf "$(outputTarballFile)" *
      displayName: Create source-built artifacts tar.gz

    - publish: '$(outputTarballFile)'
      artifact: Private.SourceBuilt.Artifacts

    - script: |
        tar -tf "$(outputTarballFile)" | sort
      displayName: Show tarball contents
