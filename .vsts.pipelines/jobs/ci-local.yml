parameters:
  job: null
  pool: null
  scriptPrefix: null
  scriptSuffix: null
  setupMac: false
  setupWindows: false
  skipSmokeTest: false
  failOnPrebuiltBaselineError: true
  reportPrebuiltLeaks: false
  generatePrebuiltBurndown: false
  runUnitTests: false
  cleanAptGet: false

jobs:
- job: ${{ parameters.job }}
  pool: ${{ parameters.pool }}
  timeoutInMinutes: 300
  variables:
    rootDirectory: $(Build.SourcesDirectory)/..
    tarballDirectory: $(rootDirectory)/tb
    stagingDirectory: $(rootDirectory)/staging
    dropDirectory: $(stagingDirectory)/drop
    logsDirectory: $(Build.ArtifactStagingDirectory)/logs
    tarballName: tarball_$(Build.BuildId)
    args.build: >-
      /p:Configuration=$(sb.configuration)
      /p:BuildPortableRuntime=$(sb.portable)
      /p:BuildPortableSdk=$(sb.portable)
      /p:FailOnPrebuiltBaselineError=$(failOnPrebuiltBaselineError)
      /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
      /p:AzDoPat=$(dn-bot-all-orgs-build-rw-code-rw)
      /p:ArchiveDownloadedPackages=$(sb.tarball)
      $(tarballDownloadArgs)
    args.smokeTest: >
      --run-smoke-test
      /p:Configuration=$(sb.configuration)
      /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
    # Prefix to distinguish artifacts from different legs.
    artifactName: ${{ parameters.job }}
    failOnPrebuiltBaselineError: ${{ parameters.failOnPrebuiltBaselineError }}
    reportPrebuiltLeaks: ${{ parameters.reportPrebuiltLeaks }}
    systemLibunwind: ${{ parameters.systemLibunwind }}
    tarballDownloadArgs: >-
      /p:DownloadSourceBuildReferencePackagesTimeoutSeconds=600
      /p:DownloadSourceBuiltArtifactsTimeoutSeconds=1500
    SOURCE_BUILD_SKIP_SUBMODULE_CHECK: true
    # Default type, can be overridden by matrix legs.
    type: ${{ coalesce(parameters.type, 'Production') }}

    ${{ if not(and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'))) }}:
      SetInternalPackageFeedPatBashCommand: ''
    ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      # In the internal build, we have one definition that provides dn-bot-dnceng-artifact-feeds-rw,
      # and another that doesn't (to be more like a public build). For the definition that doesn't
      # define dn-bot-dnceng-artifact-feeds-rw, this line relies on the subshell to fail when it
      # tries to find a command by that name and set internalPackageFeedPat to nothing.
      SetInternalPackageFeedPatBashCommand: 'export internalPackageFeedPat=$(dn-bot-dnceng-artifact-feeds-rw)'

  steps:
  - checkout: self
    clean: true

  - template: ../steps/cleanup-unneeded-files.yml
    parameters:
      cleanAptGet: ${{ parameters.cleanAptGet }}
  - template: ../steps/calculate-config-flags.yml

  # Make sure submodules from other branches are removed: pass extra f.
  - script: git clean -xdff
    displayName: Clean leftover submodules

  # Run 'clean -a' script to recursively clean submodules: AzDO doesn't do this, and otherwise we
  # fail to apply patches on persistent machines like dotnet-external-temp.
  - script: ${{ format('{0}clean{1} -a', parameters.scriptPrefix, parameters.scriptSuffix) }}
    displayName: Run source-build 'clean all' script

  - template: ../steps/check-space-powershell.yml

  - ${{ if eq(parameters.setupMac, true) }}:
    - template: ../steps/setup-macos-native.yml
  - ${{ if eq(parameters.setupWindows, true) }}:
    - template: ../steps/setup-windows-bash.yml
    - template: ../steps/setup-windows-python.yml

  - template: ../steps/calculate-config-flags.yml

  - template: ../steps/check-space-powershell.yml

  # Build source-build.
  # Use bash task here because it allows us to use the .bashrc, which sets up the correct
  # paths for clang and llvm on RHEL machines.
  - task: Bash@3
    inputs:
      targetType: inline
      script: |
        set -x
        $(SetInternalPackageFeedPatBashCommand)
        set -e
        ${{ format('{0}build{1} $(args.build)', parameters.scriptPrefix, parameters.scriptSuffix) }}
      noProfile: false
      noRc: false
    displayName: Build source-build
    timeoutInMinutes: 150

  - template: ../steps/check-space-powershell.yml

  # Run smoke tests.
  - ${{ if ne(parameters.skipSmokeTest, true) }}:
    - bash: |
        set -x
        $(SetInternalPackageFeedPatBashCommand)
        set -e
        ${{ format('{0}build{1} $(args.smokeTest)', parameters.scriptPrefix, parameters.scriptSuffix) }}
      displayName: Run smoke-test

  # Create tarball.
  - script: |
      set -ex
      df -h
      args="--skip-prebuilt-check --skip-build --minimize-disk-usage"
      if [ "$(reportPrebuiltLeaks)" = "true" ]; then
        args="$args --enable-leak-detection"
      fi
      ./build-source-tarball.sh \
        "$(tarballDirectory)/$(tarballName)" \
        $args
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Create tarball
    condition: and(succeeded(), eq(variables['sb.tarball'], true))

  # Copy logs from the production build
  - bash: |
      set -ex
      df -h
      mkdir -p "$(logsDirectory)"
      find . \( \
        -path './artifacts/*-report/*' -o \
        -path './artifacts/msbuild-debug/*' -o \
        -path './artifacts/roslyn-debug/*' -o \
        -path './artifacts/aspnet-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec cp {} --parents "$(logsDirectory)" \;
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Copy source-build production build logs
    condition: always()
    continueOnError: true

  # Delete key directories from local copy of repo to save space
  - bash: |
      set -ex
      df -h
      sudo rm -rf $(rootDirectory)/source-build/artifacts/src
      sudo rm -rf $(rootDirectory)/source-build/artifacts/obj
      sudo rm -rf $(rootDirectory)/source-build/.git
      sudo rm -rf $(rootDirectory)/source-build/packages
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Delete key directories from source copy of repo to save space

  # tar the tarball directory into the drop directory.
  - bash: |
      set -ex
      df -h
      mkdir -p $(dropDirectory)/tarball/
      smokeTestPackages="$(tarballDirectory)/$(tarballName)/packages/smoke-test-packages"
      # smokeTestPackages is a package cache, with redundant data and unnecessary structure. E.g.
      # $smokeTestPackages/name/version/name.version.nupkg <- We want this.
      # $smokeTestPackages/name/version/lib/net46/name.dll <- This is already in the nupkg.
      # This find moves the nupkg files into $smokeTestPackages:
      find "$smokeTestPackages" -iname "*.nupkg" -exec mv {} "$smokeTestPackages" \;
      # This find removes all non-nupkg files, which are not wanted:
      find "$smokeTestPackages" -mindepth 1 -not -iname "*.nupkg" -delete
      # Make one .tar.gz for build, another for extras necessary to smoke test:
      tar --numeric-owner "--exclude=$smokeTestPackages" -zcf "$(dropDirectory)/tarball/$(tarballName).tar.gz" -C "$(tarballDirectory)" "$(tarballDirectory)/$(tarballName)"
      tar --numeric-owner -zcf "$(dropDirectory)/tarball/$(tarballName)-smoke-test-prereqs.tar.gz" "$smokeTestPackages"
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Copy tarball to output
    condition: and(succeeded(), eq(variables['sb.tarball'], true))

  # Build tarball.
  - task: Bash@3
    inputs:
      targetType: inline
      script: |
        set -ex
        df -h
        networkArg=
        if [ "$(sb.tarballOffline)" = "true" ]; then
          networkArg="sudo unshare -n"
        fi
        poisonArg=
        if [ "$(reportPrebuiltLeaks)" = "true" ]; then
          poisonArg="/p:EnablePoison=true"
        fi
        $networkArg "$(tarballDirectory)/$(tarballName)/build.sh" -- \
          /p:Configuration=$(sb.configuration) \
          /p:PortableBuild=$(sb.portable) \
          /p:UseSystemLibunwind=$(systemLibunwind) \
          /p:FailOnPrebuiltBaselineError=true \
          $poisonArg
        du -h $(rootDirectory) | sort -h | tail -n 50
      noProfile: false
      noRc: false
    displayName: Build tarball
    timeoutInMinutes: 150
    condition: and(succeeded(), eq(variables['sb.tarball'], true))

  # /tmp/PackageVersions.props is created under sudo in the previous step but smoke-tests want to use that path as well.
  # Remove the existing copy so we can write a new one.
  - bash: |
      set -ex
      sudo rm /tmp/PackageVersions.props
    displayName: Remove root-owned temp files
    condition: always()
    continueOnError: true

  # Run smoke tests.
  - script: |
      set -ex
      df -h
      sudo chown -R "$(id -u):$(id -g)" "$(tarballDirectory)/$(tarballName)"
      "$(tarballDirectory)/$(tarballName)/build.sh" \
        --run-smoke-test \
        -- \
        /p:Configuration=$(sb.configuration) \
        /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Run smoke-test in tarball
    condition: and(succeeded(), eq(variables['sb.tarball'], true))

  - script: df -h
    displayName: Check space (df -h)
    condition: always()
    continueOnError: true

  # Copy source-built artifacts tarball to drop directory.
  - bash: |
      set -ex
      df -h
      mkdir -p "$(dropDirectory)/tarball/"
      cd "$(tarballDirectory)/$(tarballName)"
      find ./artifacts \( \
        -iname 'Private.SourceBuilt.Artifacts*.tar.gz' \) \
        -exec cp {} "$(dropDirectory)/tarball/" \;
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Copy source-built artifacts tarball
    condition: eq(variables['sb.tarball'], true)
    continueOnError: true

  # Gather artifacts. Uses git bash on Windows.
  - bash: |
      set -ex
      copyWithParents="cp {} --parents"
      if command -v rsync; then
        # On Mac, "--parents" isn't supported, but we can use rsync.
        copyWithParents="rsync -R {}"
      fi
      # Clean up previous build's staging dir, in case VSTS didn't do it.
      rm -rf "$(logsDirectory)"
      # Copy all these files to the logs dir, preserving relative path.
      mkdir -p "$(logsDirectory)"
      find . \( \
        -path './artifacts/*-report/*' -o \
        -path './artifacts/msbuild-debug/*' -o \
        -path './artifacts/roslyn-debug/*' -o \
         -path './artifacts/aspnet-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec $copyWithParents "$(logsDirectory)" \;
    displayName: Copy logs to staging directory
    condition: always()
    continueOnError: true

  # Publish artifacts.
  - publish: $(logsDirectory)
    artifact: Logs $(artifactName) Attempt $(System.JobAttempt)
    displayName: Publish Logs artifact
    condition: always()
    continueOnError: true
  - publish: $(dropDirectory)/tarball
    artifact: Tarball $(artifactName)
    displayName: Publish Tarball artifact
    condition: eq(variables['sb.tarball'], true)
    continueOnError: true

  # Most of these are directories we manually created and it's our responsibility to clean up (or the machine will fill up).
  # /tmp/PackageVersions.props is created under sudo and later builds want to write to it unelevated so we have to clean that as well.
  - bash: |
      set -ex
      sudo rm -rf "$(tarballDirectory)" "$(stagingDirectory)" "$(dropDirectory)" "$(logsDirectory)" /tmp/PackageVersions.props
    displayName: Cleanup extra directories and files
    condition: always()
    continueOnError: true

  # These can get stuck in a bad state, especially if the same machine is used for builds from the public repos and then
  # builds from the internal repos or vice-versa.  It costs us a little time to clean them up every time but it makes the
  # builds much more consistent.
  - bash: |
      set -ex
      sudo rm -rf $(rootDirectory)/source-build/.git/modules/src $(rootDirectory)/source-build/artifacts
    displayName: Cleanup submodule directories
    condition: always()
    continueOnError: true
