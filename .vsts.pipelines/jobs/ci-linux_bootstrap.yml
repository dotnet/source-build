parameters:
  job: null
  matrix:
    Production: {}
  pool:
    name: Hosted Ubuntu 1604
  imageName: null
  reportPrebuiltLeaks: false
  dependsOn: ''
  generatePrebuiltBurndown: false
  runUnitTests: false
  dockerNetwork: ''

jobs:
- job: ${{ parameters.job }}
  dependsOn: ${{ parameters.dependsOn }}
  strategy:
    matrix: ${{ parameters.matrix }}
  pool: ${{ parameters.pool }}
  timeoutInMinutes: 270
  variables:
    # Prefix to distinguish artifacts from different legs.
    artifactName: ${{ format('{0} $(type)', parameters.job) }}
    # Use ":z" to set selinux flag for sharing in build-owned root dir. https://docs.docker.com/storage/bind-mounts/#configure-the-selinux-label
    docker.agentSrc.map: -v $(Build.SourcesDirectory):/agentSrc:z
    docker.agentSrc.work: -w /agentSrc
    docker.drop.map: -v $(dropDirectory):/drop:z
    docker.logs.map: -v $(dropDirectory)/logs:/logs:z
    docker.root.map: -v $(rootDirectory):/root:z
    docker.run: docker run --rm
    docker.src.map: -v $(rootDirectory)/sb/source-build:/src:z
    docker.src.work: -w /src
    docker.tb.map: -v $(rootDirectory)/sb/tarball:/tb:z
    docker.tb.work: -w /tb
    dropDirectory: $(stagingDirectory)/drop
    imageName: ${{ parameters.imageName }}
    reportPrebuiltLeaks: ${{ parameters.reportPrebuiltLeaks }}
    generatePrebuiltBurndown: ${{ parameters.generatePrebuiltBurndown }}
    rootDirectory: $(Build.SourcesDirectory)/..
    stagingDirectory: $(rootDirectory)/sb/staging
    tarballName: tarball_$(Build.BuildId)
    SOURCE_BUILD_SKIP_SUBMODULE_CHECK: true
    # Default type, can be overridden by matrix legs.
    type: Production

  steps:
  # - template: ../steps/cleanup-unneeded-files.yml
  - template: ../steps/docker-cleanup-linux.yml
  - template: ../steps/calculate-config-flags.yml

  # Create working directory and copy source into it.
  - script: |
      set -ex
      df -h
      $(docker.run) $(docker.root.map) $(docker.agentSrc.map) $(docker.agentSrc.work) $(imageName) bash -c '
        rm -rf /root/sb/
        mkdir -p /root/sb/tarball'
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Clean sb directory

  - task: DownloadBuildArtifacts@0
    displayName: Download CentOS artifacts
    timeoutInMinutes: 2
    inputs:
      buildType: 'specific'
      project: 'internal'
      pipeline: 'source-build-rolling-CI'
      buildVersionToDownload: 'specific'
      buildId: '441879'
      artifactName: 'Tarball centos71 Offline'
      itemPattern: $(tarballName).tar.gz
      downloadPath: '/root/sb/tarball_artifact'

  - script: |
      set -ex
      df -h
      $(docker.run) $(docker.tb.map) $(docker.tb.work) $(imageName) bash -c '
      pushd /root
      git clone https://github.com/dotnet/source-build-reference-packages
      popd'
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: clone source-build-reference-packages
    condition: always()
    continueOnError: true
  
  - script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.tb.map) $(docker.tb.work) $(imageName) bash -c '
      mkdir -p /root/sb/tarball
      mkdir -p /root/bootstrap_dir
      tar -xvf /root/sb/tarball_artifact/$(tarballName).tar.gz -C /root/sb/tarball --no-same-owner --strip-components=1
      ./root/sb/tarball/support/tarball/tool-bootstrapping/bootstrap.sh /root/bootstrap_dir /root/sb/tarball /root/source-build-reference-packages'
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Unpack the tarball and Run Bootstrapping
    condition: always()
    continueOnError: false

  # Clean up (very large) working directory. root owner makes it difficult for others to remove.
  - script: $(docker.run) $(docker.root.map) $(imageName) bash -c 'rm -rf /root/sb'
    displayName: Clean sb directory
    condition: always()
    continueOnError: true

  - template: ../steps/docker-cleanup-linux.yml

  - script: df -h
    displayName: Check space (df -h)
    condition: always()
    continueOnError: true
