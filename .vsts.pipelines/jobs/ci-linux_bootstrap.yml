parameters:
  job: null
  matrix:
    Production: {}
  pool:
    name: Hosted Ubuntu 1604
  imageName: null
  reportPrebuiltLeaks: false
  dependsOn: ''
  generatePrebuiltBurndown: false
  runUnitTests: false

jobs:
- job: ${{ parameters.job }}
  dependsOn: ${{ parameters.dependsOn }}
  strategy:
    matrix: ${{ parameters.matrix }}
  pool: ${{ parameters.pool }}
  timeoutInMinutes: 270
  variables:
    # Prefix to distinguish artifacts from different legs.
    artifactName: ${{ format('{0} $(type)', parameters.job) }}
    # Use ":z" to set selinux flag for sharing in build-owned root dir. https://docs.docker.com/storage/bind-mounts/#configure-the-selinux-label
    docker.agentSrc.map: -v $(Build.SourcesDirectory):/agentSrc:z
    docker.agentSrc.work: -w /agentSrc
    docker.drop.map: -v $(dropDirectory):/drop:z
    docker.logs.map: -v $(dropDirectory)/logs:/logs:z
    docker.root.map: -v $(rootDirectory):/root:z
    docker.run: docker run --rm
    docker.src.map: -v $(rootDirectory)/sb/source-build:/src:z
    docker.src.work: -w /src
    docker.tb.map: -v $(rootDirectory)/sb/tarball:/tb:z
    docker.tb.work: -w /tb
    dropDirectory: $(stagingDirectory)/drop
    imageName: ${{ parameters.imageName }}
    reportPrebuiltLeaks: ${{ parameters.reportPrebuiltLeaks }}
    generatePrebuiltBurndown: ${{ parameters.generatePrebuiltBurndown }}
    rootDirectory: $(Build.SourcesDirectory)/..
    stagingDirectory: $(rootDirectory)/sb/staging
    tarballName: tarball_$(Build.BuildId)
    SOURCE_BUILD_SKIP_SUBMODULE_CHECK: true
    # Default type, can be overridden by matrix legs.
    type: Production

  steps:
  # - template: ../steps/cleanup-unneeded-files.yml
  - template: ../steps/docker-cleanup-linux.yml
  - template: ../steps/calculate-config-flags.yml

  # Create working directory and copy source into it.
  - script: |
      set -ex
      df -h
      $(docker.run) $(docker.root.map) $(docker.agentSrc.map) $(docker.agentSrc.work) $(imageName) bash -c '
        rm -rf /root/sb/
        mkdir -p /root/sb/tarball
        cp -r . /root/sb/source-build'
      du -h $(rootDirectory) | sort -h | tail -n 50
    displayName: Clean sb directory and copy source from cloned directory

  - template: ../steps/init-submodules.yml
    parameters:
      commandPrefix: $(docker.run) $(docker.src.map) $(docker.src.work) $(imageName)

  # - task: DownloadBuildArtifacts@0
  #   displayName: Download CentOS artifacts
  #   continueOnError: true
  #   inputs:
      #buildType: 'current' # Options: current, specific
      #project: # Required when buildType == Specific
      #pipeline: # Required when buildType == Specific
      #specificBuildWithTriggering: false # Optional
      #buildVersionToDownload: 'latest' # Required when buildType == Specific. Options: latest, latestFromBranch, specific
      #allowPartiallySucceededBuilds: false # Optional
      #branchName: 'refs/heads/master' # Required when buildType == Specific && BuildVersionToDownload == LatestFromBranch
      #buildId: # Required when buildType == Specific && BuildVersionToDownload == Specific
      #tags: # Optional
      #downloadType: 'single' # Choose whether to download a single artifact or all artifacts of a specific build. Options: single, specific
      #artifactName: # Required when downloadType == Single
      #itemPattern: '**' # Optional
      #downloadPath: '$(System.ArtifactsDirectory)' 
      #parallelizationLimit: '8' # Optional

  - task: DownloadBuildArtifacts@0
    displayName: Download CentOS artifacts
    timeoutInMinutes: 1
    inputs:
      buildType: specific
      project: public
      pipeline: source-build-CI
      buildVersionToDownload: specific
      buildId: 441625
      artifactName: Tarball centos71 Offline
      downloadPath: '/root/tb'

  # Clean up (very large) working directory. root owner makes it difficult for others to remove.
  - script: $(docker.run) $(docker.root.map) $(imageName) bash -c 'rm -rf /root/sb'
    displayName: Clean sb directory
    condition: always()
    continueOnError: true

  - template: ../steps/docker-cleanup-linux.yml

  - script: df -h
    displayName: Check space (df -h)
    condition: always()
    continueOnError: true
