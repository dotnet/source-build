parameters:
  job: osx
  matrix:
    Production: {}
  pool:
    name: Hosted macOS

jobs:
- job: ${{ parameters.job }}
  strategy:
    matrix: ${{ parameters.matrix }}
  pool: ${{ parameters.pool }}
  timeoutInMinutes: 240
  variables:
    # Prefix to distinguish artifacts from different legs.
    artifactName: ${{ format('$(type) {0}', parameters.job) }}
    logsDirectory: $(Build.ArtifactStagingDirectory)/logs
    SOURCE_BUILD_SKIP_SUBMODULE_CHECK: true
    # Default type, can be overridden by matrix legs.
    type: Production

  steps:
  - checkout: self
    clean: true

  - script: |
      ./clean.sh -a
      # Make sure submodules from other branches are removed: pass extra f.
      git clean -xdff
    displayName: Clean

  - template: ../steps/calculate-config-flags-linux.yml

  - script: |
      ( set -o posix; set )
    displayName: Print all variables in environment

  # Install native dependencies not present in hosted pool.
  - script: |
      setvariable() {
        (
          set +x
          echo "Setting '$1' to '$2'"
          echo "##vso[task.setvariable variable=$1;]$2"
        )
      }
      set -x
      # Based on https://github.com/sbomer/coreclr/blob/dc2fa1b96415f87d694e5b6e751e38ca6fbd09a1/unix-pipeline.yml#L36-L39
      brew install icu4c openssl
      brew link --force icu4c
      # Follow https://github.com/dotnet/corefx/blob/master/Documentation/building/unix-instructions.md#user-content-macos
      brew install cmake pkgconfig openssl
      brew_openssl_paths=$(brew info openssl | cut -d ' ' -f 1 | grep '^/.*/openssl/')
      # Use 'for' to get last/latest openssl install dir.
      for openssl_path in $brew_openssl_paths; do :; done
      setvariable OPENSSL_ROOT_DIR "$openssl_path"
    displayName: Install native dependencies

  - template: ../steps/init-submodules-sh.yml

  # Build source-build.
  - script: |
      set -x
      ./build.sh \
        /p:Configuration=$(sb.configuration) \
        /p:PortableBuild=$(sb.portable) \
        /p:FailOnPrebuiltBaselineError=true \
        /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
    displayName: Build source-build
    timeoutInMinutes: 150

  # Run smoke tests.
  - script: |
      set -x
      ./build.sh \
        /t:RunSmokeTest \
        /p:Configuration=$(sb.configuration) \
        /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
    displayName: Run smoke-test

  - script: |
      set -x
      # Clean up previous build's staging dir, in case VSTS didn't do it.
      rm -rf "$(logsDirectory)"
      # Copy all these files to the logs dir, preserving relative path.
      mkdir -p "$(logsDirectory)"
      find . \( \
        -path './bin/*-report/*' -o \
        -path './bin/msbuild-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec rsync -R {} "$(logsDirectory)" \;
    displayName: Copy logs to staging directory
    condition: always()
    continueOnError: true

  # Publish artifacts.
  - task: PublishBuildArtifacts@1
    displayName: Publish Logs artifact
    condition: always()
    continueOnError: true
    inputs:
      PathtoPublish: $(logsDirectory)
      ArtifactName: Logs $(artifactName)
      ArtifactType: Container
