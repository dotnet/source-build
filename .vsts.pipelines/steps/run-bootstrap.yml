# Delete some files from the default image since we're tight on disk space.
# List is from https://github.com/microsoft/azure-pipelines-image-generation/pull/1231#issuecomment-537174621

steps:
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      mkdir -p /bst/sb/tarball
      tar -xvf "/bst/Tarball centos71 Offline/$(tarballName).tar.gz" -C /bst/sb/tarball --no-same-owner --strip-components=1
      rm -rf "/bst/Tarball centos71 Offline"'
  displayName: Unpack Tarball
  condition: always()
  continueOnError: true

- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      /bst/sb/tarball/tool-bootstrapping/bootstrap.sh /bst/bootstrap_dir /bst/sb/tarball /bst/source-build-reference-packages 1'
  displayName: Build stage1
  condition: always()
  continueOnError: true

- script: |
    set -ex
    df -h
    $(docker.run) $(docker.logs.map) $(docker.bst.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /logs/stage1-sdk/logs
      pushd /bst/bootstrap_dir/stage1-sdk
      find . \( \
        -path './bin/*-report/*' -o \
        -path './bin/msbuild-debug/*' -o \
        -path './bin/roslyn-debug/*' -o \
        -path './bin/aspnet-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec cp {} --parents /logs/stage1-sdk/logs \;
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy stage-1 sdk build logs
  condition: always()
  continueOnError: true

- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      pushd /bst/bootstrap_dir/stage1-sdk
      echo "Removing everything in stage-1sdk except Tools and bin directory"
      shopt -s extglob
      rm -rvf !("Tools"|"bin")
      shopt -u extglob
      popd'
  displayName: Clean all except tarball in stage1
  condition: always()
  continueOnError: true

- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      /bst/sb/tarball/tool-bootstrapping/bootstrap.sh /bst/bootstrap_dir /bst/sb/tarball /bst/source-build-reference-packages 2'
  displayName: Build stage1 source-build-reference-packages
  condition: always()
  continueOnError: true

- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      rm -rf /bst/source-build-reference-packages/* 
      pushd /bst/bootstrap_dir/reference-packages
      echo "Removing everything in reference-packages except artifacts"
      find . -type f -not -name '*SourceBuild.ReferencePackages.bootstrap.tar.gz' -delete
      popd'
  displayName: Clean all except tarball in source-build-reference-packages
  condition: always()
  continueOnError: true

- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      /bst/sb/tarball/tool-bootstrapping/bootstrap.sh /bst/bootstrap_dir /bst/sb/tarball /bst/source-build-reference-packages 3'
  displayName: Build final SDK
  condition: always()
  continueOnError: true

- script: |
    set -ex
    df -h
    $(docker.run) $(docker.logs.map) $(docker.bst.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /logs/final-sdk/logs
      pushd /bst/bootstrap_dir/final-sdk
      find . \( \
        -path './bin/*-report/*' -o \
        -path './bin/msbuild-debug/*' -o \
        -path './bin/roslyn-debug/*' -o \
        -path './bin/aspnet-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec cp {} --parents /logs/final-sdk/logs \;
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy final sdk build logs
  condition: always()
  continueOnError: true

# Copy artifacts to staging - Copy to VSTS owned folder is done outside of docker so copied files
# have correct ownership so VSTS can clean them up later.
- task: CopyFiles@2
  condition: always()
  continueOnError: true
  inputs:
    sourceFolder: $(stagingDirectory)
    targetFolder: $(Build.ArtifactStagingDirectory)


# Publish artifacts.
- task: PublishBuildArtifacts@1
  displayName: Publish Logs artifact
  condition: always()
  continueOnError: true
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/drop/logs
    ArtifactName: Logs $(artifactName)
    ArtifactType: Container