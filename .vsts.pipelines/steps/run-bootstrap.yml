# Extract the tarball fetched from the previous Offline stage 
steps:
- script: |
      set -ex 
      mount
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      mkdir -p /bst/sb/tarball
      tar -xf "/bst/Tarball centos71 Offline/$(tarballName).tar.gz" -C /bst/sb/tarball --no-same-owner --strip-components=1
      rm -rf "/bst/Tarball centos71 Offline/$(tarballName).tar.gz"'
      df -h
  displayName: Unpack Tarball
  condition: always()

# Build the stage1 of bootstrapping
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      /bst/sb/tarball/tool-bootstrapping/bootstrap.sh /bst/bootstrap_dir /bst/sb/tarball /bst/source-build-reference-packages 1'
      df -h
  displayName: Build stage1
  condition: succeeded()

# Copy all logs from stage-1 before removing any files. The removal needs to take place as we are contrained on space atm
- script: |
    set -ex
    df -h
    $(docker.run) $(docker.logs.map) $(docker.bst.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /logs/stage1-sdk/logs
      pushd /bst/bootstrap_dir/stage1-sdk
      find . \( \
        -path './bin/*-report/*' -o \
        -path './bin/msbuild-debug/*' -o \
        -path './bin/roslyn-debug/*' -o \
        -path './bin/aspnet-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec cp {} --parents /logs/stage1-sdk/logs \;
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy stage-1 sdk build logs
  condition: always()
  continueOnError: true

# Remove stage-1 produce other than what's needed in the subsequent stages
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      pushd /bst/bootstrap_dir/stage1-sdk
      echo "Removing everything in stage-1sdk except Tools and bin directory"
      shopt -s extglob
      rm -rvf !("Tools"|"bin")
      shopt -u extglob
      popd'
  displayName: Clean all except tarball in stage1
  condition: always()
  continueOnError: true

# Copy stage-1 source-built artifacts and sdk tarball to drop directory.
- script: |
    set -ex
    df -h
    $(docker.run) $(docker.bst.map) $(docker.drop.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /drop/tarball/stage1
      pushd /bst/bootstrap_dir/stage1-sdk
      find . \( \
        -iname 'dotnet-sdk*.tar.gz' -o \
        -iname 'Private.SourceBuilt.Artifacts*.tar.gz' \) \
        -exec cp {} /drop/tarball/stage1 \;
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy stage-1 artifacts tarball
  condition: always()
  continueOnError: true

# Run step-2 of bootstrapping a.k.a. build reference-packages
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      /bst/sb/tarball/tool-bootstrapping/bootstrap.sh /bst/bootstrap_dir /bst/sb/tarball /bst/source-build-reference-packages 2'
  displayName: Build stage1 source-build-reference-packages
  condition: succeeded()

# Create and copy ref-packages tarball to drop directory.
- script: |
    set -ex
    df -h
    $(docker.run) $(docker.bst.map) $(docker.drop.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /drop/tarball/reference-packages
      pushd /bst/bootstrap_dir/reference-packages
      tar --numeric-owner -czf Private.SourceBuild.ReferencePackages.bootstrap.tar.gz *.nupkg
      find . \( \
        -iname 'Private.SourceBuild.ReferencePackages.bootstrap.tar.gz' \) \
        -exec cp {} /drop/tarball/reference-packages \;
      rm -rf Private.SourceBuild.ReferencePackages.bootstrap.tar.gz
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy ref-packages tarball 
  condition: always()
  continueOnError: true

# Clean reference-packages produce other than what's needed for the last step
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      rm -rf /bst/source-build-reference-packages/*
      rm -rf /bst/source-build-reference-packages/.git
      pushd /bst/bootstrap_dir/reference-packages
      echo "Removing everything in reference-packages except nupkg artifacts"
      find . -type f -not -name '*.nupkg' -delete
      popd'
  displayName: Clean all except tarball in source-build-reference-packages
  condition: always()
  continueOnError: true

# Run last step(3) of bootstapping
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      /bst/sb/tarball/tool-bootstrapping/bootstrap.sh /bst/bootstrap_dir /bst/sb/tarball /bst/source-build-reference-packages 3'
  displayName: Build final SDK
  condition: succeeded()

# Copy logs of final stage
- script: |
    set -ex
    df -h
    $(docker.run) $(docker.logs.map) $(docker.bst.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /logs/final-sdk/logs
      pushd /bst/bootstrap_dir/final-sdk
      find . \( \
        -path './bin/*-report/*' -o \
        -path './bin/msbuild-debug/*' -o \
        -path './bin/roslyn-debug/*' -o \
        -path './bin/aspnet-debug/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec cp {} --parents /logs/final-sdk/logs \;
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy final sdk build logs
  condition: always()
  continueOnError: true

# Copy log for the overall bootstrap status
- script: |
    set -ex
    df -h
    $(docker.run) $(docker.logs.map) $(docker.bst.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /logs/bootstrap
      pushd /bst/bootstrap_dir
      find . \( \    
        -iname 'status.log' \) \
        -exec cp {} --parents /logs/bootstrap \;
      popd"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy bootstrap status log
  condition: always()
  continueOnError: true

# Copy final-stage tarball artifactss and sdk tarball to drop directory.
- script: |
    set -ex
    df -h
    $(docker.run) $(docker.bst.map) $(docker.drop.map) $(docker.bst.work) $(imageName) /bin/bash -c "
      mkdir -p /drop/tarball/final
      pushd /bst/bootstrap_dir/final-sdk
      find ./bin \( \
        -iname 'dotnet-sdk*.tar.gz' -o \
        -iname 'Private.SourceBuilt.Artifacts*.tar.gz' \) \
        -exec cp {} /drop/tarball/final \;"
    du -h $(rootDirectory) | sort -h | tail -n 50
  displayName: Copy final-stage tarball artifacts
  condition: always()
  continueOnError: true

- script: |
      set -ex
      mount
      df -h
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      tar -xf "/bst/Tarball centos71 Offline/$(tarballName)-smoke-test-prereqs.tar.gz" -C /bst/bootstrap_dir/final-sdk --no-same-owner --strip-components=1
      rm -rf "/bst/Tarball centos71 Offline/$(tarballName)-smoke-test-prereqs.tar.gz"'
      df -h
  displayName: Unpack smoke test prereqs
  condition: always()

- script: |
      set -ex 
      df -h 
      $(docker.run) $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c "
      pushd /bst/bootstrap_dir/final-sdk
      ./smoke-test.sh --prodConBlobFeedUrl ''"
  displayName: Smoke-test final SDK
  condition: always()

# Remove bootstrap_dir
- script: |
      set -ex 
      df -h 
      $(docker.run) --network=none $(docker.bst.map) $(docker.bst.work) $(imageName) bash -c '
      pushd /bst
      echo "Removing bootstrap_dir"
      rm -rf bootstrap_dir
      popd'
  displayName: Remove bootstrap_dir
  condition: always()
  continueOnError: true

# Copy artifacts to staging - Copy to VSTS owned folder is done outside of docker so copied files
# have correct ownership so VSTS can clean them up later.
- task: CopyFiles@2
  condition: always()
  continueOnError: true
  inputs:
    sourceFolder: $(stagingDirectory)
    targetFolder: $(Build.ArtifactStagingDirectory)


# Publish log artifacts
- task: PublishBuildArtifacts@1
  displayName: Publish Logs artifact
  condition: always()
  continueOnError: true
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/drop/logs
    ArtifactName: Logs $(artifactName)
    ArtifactType: Container

# Publish tarball artifacts
- task: PublishBuildArtifacts@1
  displayName: Publish Tarball artifact
  condition: always()
  continueOnError: true
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/drop/tarball
    ArtifactName: Tarball Artifacts $(artifactName)
    ArtifactType: Container
