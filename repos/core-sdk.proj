<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <OSNameOverride>$(TargetRid.Substring(0, $(TargetRid.IndexOf("-"))))</OSNameOverride>
    <BuildCommandArgs/>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'Linux'">$(BuildCommandArgs) /p:Rid=$(TargetRid)</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'Linux'">$(BuildCommandArgs) /p:AspNetCoreSharedFxInstallerRid=linux-$(Platform)</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'Linux'">$(BuildCommandArgs) /p:OSName=$(OSNameOverride)</BuildCommandArgs>
    <!-- core-sdk always wants to build portable on OSX and FreeBSD -->
    <BuildCommandArgs Condition="'$(TargetOS)' == 'FreeBSD'">$(BuildCommandArgs) /p:CoreSetupRid=freebsd-x64 /p:PortableBuild=true</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'OSX'">$(BuildCommandArgs) /p:CoreSetupRid=osx-x64</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'Linux'">$(BuildCommandArgs) /p:CoreSetupRid=$(TargetRid)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -c $(Configuration)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(FlagParameterPrefix)nodereuse $(ArcadeFalseBoolBuildArg)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DOTNET_INSTALL_DIR=$(DotNetCliToolDir)</BuildCommandArgs>

    <!-- Consume the source-built Core-Setup. This line must be removed to source-build core-sdk without source-building Core-Setup first. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:CoreSetupBlobRootUrl=file:%2F%2F$(LocalBlobStorageRoot)</BuildCommandArgs>
    <!-- location to pick up the toolset binaries from.  This must be removed to source-build core-sdk without building toolset first -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:DotnetToolsetBlobRootUrl=file:%2F%2F$(LocalBlobStorageRoot)</BuildCommandArgs>

    <!-- Pass in package version props using the Product Construction (ProdCon) API. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:PB_PackageVersionPropsUrl=file:%2F%2F$(PackageVersionPropsPath)</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /p:SkipBuildingInstallers=true</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeNuGetPackageArchive=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeAdditionalSharedFrameworks=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:UsePortableLinuxSharedFramework=$(PortableBuild)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeSharedFrameworksForBackwardsCompatibilityTests=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:PB_PackageVersionPropsUrl=file:%2F%2F$(PackageVersionPropsPath)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:VersionSuffix="$(PreReleaseVersionLabel)"</BuildCommandArgs>

    <LogVerbosityOptOut>true</LogVerbosityOptOut>
    <BuildCommandArgs>$(BuildCommandArgs) -v $(LogVerbosity)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -bl</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -ci</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)/build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <PackageOutputRid Condition="'$(TargetOS)' == 'Windows_NT'">win-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(TargetOS)' == 'OSX'">osx-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(TargetOS)' == 'FreeBSD'">freebsd-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(PackageOutputRid)' == ''">$(TargetRid)</PackageOutputRid>
    <PackagesOutput>$(ProjectDirectory)artifacts/packages/$(Configuration)/Shipping/</PackagesOutput>
    <TarBallOutput>$(PackagesOutput)</TarBallOutput>
    <RepoApiImplemented>false</RepoApiImplemented>
    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>
    <DependencyVersionInputRepoApiImplemented>true</DependencyVersionInputRepoApiImplemented>

    <EnvironmentExternalRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentExternalRestoreSources>
    <EnvironmentExternalRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentExternalRestoreSources)%3B$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</EnvironmentExternalRestoreSources>

    <!-- This project builds zips, not NuGet packages. -->
    <SkipEnsurePackagesCreated>true</SkipEnsurePackagesCreated>
    <NuGetConfigFile>$(ProjectDirectory)/NuGet.config</NuGetConfigFile>
  </PropertyGroup>

  <ItemGroup>
    <UseSourceBuiltSdkOverride Include="@(ArcadeSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="aspnetcore" />
    <RepositoryReference Include="newtonsoft-json" />
    <RepositoryReference Include="newtonsoft-json901" />
    <RepositoryReference Include="toolset" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="CLIBUILD_SKIP_TESTS=true" />

    <!-- Pass multiple restore sources as environment: avoid the shell seeing ';' in an Exec. -->
    <EnvironmentVariables Include="ExternalRestoreSources=$(EnvironmentExternalRestoreSources)" />

    <!-- Disable bundled tools until we can figure out:
      Unable to find package dotnet-dev-certs.
      Unable to find package dotnet-ef.
      Unable to find package dotnet-sql-cache.
      Unable to find package dotnet-user-secrets.
      Unable to find package dotnet-watch.  -->
    <EnvironmentVariables Include="CLIBUILD_SKIP_BUNDLEDDOTNETTOOLS=true" />
  </ItemGroup>

  <Target Name="CopyTarBall" AfterTargets="CopyPackage">
    <ItemGroup>
      <CliTarBalls Include="$(TarBallOutput)*$(TarBallExtension)" />
    </ItemGroup>

    <Copy SourceFiles="@(CliTarBalls)"
          DestinationFolder="$(SourceBuiltTarBallPath)"
          Condition="'@(CliTarBalls)'!=''" />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
