<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" InitialTargets="SetNuGetPackagesEnvironment" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Condition="'$(OfflineBuild)' == 'true'">
    <EnvironmentVariables Include="LatestCommit=$(GitCommitHash)" />
    <EnvironmentVariables Include="OfficialBuildId=$(OfficialBuildId)" />
    <EnvironmentVariables Include="VersionSeedDate=$(OfficialBuildId)" />
  </ItemGroup>

  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="AddSourceToNuGetConfig" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="GetSourceBuiltNupkgCacheConflicts" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="ReadNuGetPackageInfos" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="RemoveInternetSourcesFromNuGetConfig" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="UpdateJson" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="ValidateUsageAgainstBaseline" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteBuildOutputProps" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WritePackageUsageData" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteRestoreSourceProps" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteUsageReports" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteVersionsFile" />
  <UsingTask AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" TaskName="ZipFileExtractToDirectory" />

  <!--
    Central property to define that a repo doesn't implement any of the Repo API. If a repo adds an
    implementation of a specific part of the Repo API, replace RepoApiImplemented in the repo's
    props file with the properties below. When more API surface area is added, remove the
    corresponding lines from the repo's props file. Once the entire API is implemented, the props
    file is clean.
  -->
  <PropertyGroup>
    <RepoApiImplemented Condition="'$(RepoApiImplemented)' == ''">true</RepoApiImplemented>
  </PropertyGroup>

  <PropertyGroup>
    <DependencyVersionInputRepoApiImplemented Condition="'$(DependencyVersionInputRepoApiImplemented)' == ''">$(RepoApiImplemented)</DependencyVersionInputRepoApiImplemented>
    <SourceOverrideRepoApiImplemented Condition="'$(SourceOverrideRepoApiImplemented)' == ''">$(RepoApiImplemented)</SourceOverrideRepoApiImplemented>
    <OutputPlacementRepoApiImplemented Condition="'$(OutputPlacementRepoApiImplemented)' == ''">$(RepoApiImplemented)</OutputPlacementRepoApiImplemented>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SourceOverrideRepoApiImplemented)' != 'true'">
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)NuGet.config')">$(ProjectDirectory)NuGet.config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)NuGet.Config')">$(ProjectDirectory)NuGet.Config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)src\NuGet.config')">$(ProjectDirectory)src\NuGet.config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)src\NuGet.Config')">$(ProjectDirectory)src\NuGet.Config</NuGetConfigFile>
  </PropertyGroup>

  <!-- Dependency version input arguments -->
  <PropertyGroup Condition="'$(DependencyVersionInputRepoApiImplemented)' == 'true'">
    <RepoApiArgs>$(RepoApiArgs) /p:DotNetPackageVersionPropsPath=$(PackageVersionPropsPath)</RepoApiArgs>
  </PropertyGroup>
  <!-- Source override arguments -->
  <PropertyGroup Condition="'$(SourceOverrideRepoApiImplemented)' == 'true'">
    <RepoApiArgs>$(RepoApiArgs) /p:DotNetRestoreSourcePropsPath=$(RestoreSourcePropsPath)</RepoApiArgs>
    <RepoApiArgs Condition="'$(OfflineBuild)' == 'true'">$(RepoApiArgs) /p:DotNetBuildOffline=true</RepoApiArgs>
  </PropertyGroup>
  <!-- Output placement arguments -->
  <PropertyGroup Condition="'$(OutputPlacementRepoApiImplemented)' == 'true'">
    <RepoApiArgs>$(RepoApiArgs) /p:DotNetOutputBlobFeedDir=$(SourceBuiltBlobFeedDir)</RepoApiArgs>
  </PropertyGroup>

  <Import Project="$(ProjectDirectory)dependencies.props"
          Condition="'$(DependencyVersionInputRepoApiImplemented)' != 'true' AND
                     Exists('$(ProjectDirectory)dependencies.props')" />

  <Target Name="BuildRepoReferences" Condition="'@(RepositoryReference)' != '' and '$(SkipRepoReferences)' != 'true'">
    <Message Importance="High" Text="Building dependencies [@(RepositoryReference)] needed by '$(RepositoryName)'." />
    <ItemGroup>
      <_DependentProject Include="@(RepositoryReference -> '%(Identity).proj')" />
    </ItemGroup>

    <MSBuild Projects="@(_DependentProject)" Targets="Build" BuildInParallel="$(BuildInParallel)" StopOnFirstFailure="true" />
  </Target>

  <Target Name="ApplyPatches" Condition="Exists('$(PatchesDir)$(RepositoryName)') and '$(SkipPatches)' != 'true'">
    <ItemGroup>
      <PatchesToApply Include="$(PatchesDir)$(RepositoryName)/*.patch" />
    </ItemGroup>

    <PropertyGroup>
      <PatchCommand>git apply --ignore-whitespace --whitespace=nowarn</PatchCommand>
    </PropertyGroup>

    <Exec Command="$(PatchCommand) %(PatchesToApply.Identity)"
          WorkingDirectory="$(ProjectDirectory)"
          Condition="'@(PatchesToApply)' != ''" />
  </Target>

  <Target Name="CreateGitInfoProps"
          Condition="'$(OfflineBuild)' != 'true' AND Exists('$(ProjectDirectory).git')">
    <Exec Command="git rev-parse HEAD" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitHash" />
    </Exec>
    <Exec Command="git rev-list --count HEAD" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitCount" />
    </Exec>

    <PropertyGroup>
      <GitLogFormatArg>--format=</GitLogFormatArg>
      <!-- Escape the % with another % on Windows. -->
      <GitLogFormatArg Condition="'$(OS)' == 'Windows_NT'">$(GitLogFormatArg)%25</GitLogFormatArg>
      <GitLogFormatArg>$(GitLogFormatArg)%25cd</GitLogFormatArg>
    </PropertyGroup>

    <Exec Command="git log -1 $(GitLogFormatArg) --date=short" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitDate" />
    </Exec>

    <PropertyGroup>
      <GitInfoFileContents>
        <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- $(RepositoryName) submodule information. -->
    <GitCommitHash>$(GitCommitHash)</GitCommitHash>
    <GitCommitCount>$(GitCommitCount)</GitCommitCount>
    <GitCommitDate>$(GitCommitDate)</GitCommitDate>
  </PropertyGroup>
</Project>
]]>
      </GitInfoFileContents>
    </PropertyGroup>

    <WriteLinesToFile File="$(OutputGitInfoPropsFile)"
                      Lines="$(GitInfoFileContents)"
                      Overwrite="true" />
  </Target>

  <Target Name="UpdateNuGetConfig"
          BeforeTargets="Build"
          Condition="'$(NuGetConfigFile)' != '' OR '@(NuGetConfigFiles)' != ''">
    <!-- Update the detected or manually specified NuGetConfigFile, but also allow multiple. -->
    <ItemGroup>
      <NuGetConfigFiles Include="$(NuGetConfigFile)" />
    </ItemGroup>

    <RemoveInternetSourcesFromNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                                          Condition="'$(OfflineBuild)' != ''" />

    <AddSourceToNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                            SourceName="prebuilt"
                            SourcePath="$(PrebuiltPackagesPath)"
                            Condition="'$(OfflineBuild)' == 'true'" />

    <AddSourceToNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                            SourceName="previously-source-built"
                            SourcePath="$(PrebuiltSourceBuiltPackagesPath)"
                            Condition="'$(OfflineBuild)' == 'true'" />

    <AddSourceToNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                            SourceName="reference-packages"
                            SourcePath="$(ReferencePackagesDir)"
                            Condition="'$(OfflineBuild)' == 'true'" />

    <AddSourceToNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                            SourceName="source-built"
                            SourcePath="$(SourceBuiltPackagesPath)" />
  </Target>

  <Target Name="UpdateGlobalJsonVersions"
          BeforeTargets="Build"
          Condition="'$(GlobalJsonFile)' != ''">
    <ItemGroup>
      <_PossibleCliVersionJsonPath Include="sdk.version" />
      <_PossibleCliVersionJsonPath Include="tools.dotnet" />
    </ItemGroup>

    <UpdateJson JsonFilePath="$(GlobalJsonFile)"
                PathToAttribute="%(_PossibleCliVersionJsonPath.Identity)"
                NewAttributeValue="$(SDK_VERSION)"
                SkipUpdateIfMissingKey="true" />
  </Target>

  <Target Name="CreateBuildOutputProps"
          BeforeTargets="Build">
    <PropertyGroup>
      <_PackageVersionPropsBackupPath>$(PackageVersionPropsPath).pre.$(RepositoryName).xml</_PackageVersionPropsBackupPath>
    </PropertyGroup>

    <ItemGroup>
      <PreviouslySourceBuiltPackages Include="$(SourceBuiltPackagesPath)*.nupkg"
                                      Exclude="$(SourceBuiltPackagesPath)*.symbols.nupkg" />
      <_AdditionalAssetDirs Include="$(SourceBuiltToolsetDir)" Condition="Exists('$(SourceBuiltToolsetDir)')" />
    </ItemGroup>

    <WriteBuildOutputProps NuGetPackages="@(PreviouslySourceBuiltPackages)"
                           ExtraProperties="@(ExtraPackageVersionPropsPackageInfo)"
                           AdditionalAssetDirs="@(_AdditionalAssetDirs)"
                           OutputPath="$(PackageVersionPropsPath)" />

    <WriteBuildOutputProps NuGetPackages="@(PreviouslySourceBuiltPackages)"
                           IncludeCreationTimeProperty="true"
                           OutputPath="$(_PackageVersionPropsBackupPath)" />

    <Message Importance="High" Text="$(RepositoryName) using package version properties saved at $(_PackageVersionPropsBackupPath) " />

    <ReadNuGetPackageInfos PackagePaths="@(PreviouslySourceBuiltPackages)">
      <Output TaskParameter="PackageInfoItems" ItemName="_PreviouslySourceBuiltPackageInfos" />
    </ReadNuGetPackageInfos>

    <ItemGroup>
      <_KnownOriginPackagePaths Include="$(PrebuiltSourceBuiltPackagesPath)*.nupkg" />
      <_KnownOriginPackagePaths Include="$(PrebuiltPackagesPath)*.nupkg" />
      <_KnownOriginPackagePaths Include="$(ReferencePackagesDir)*.nupkg" />
    </ItemGroup>

    <GetSourceBuiltNupkgCacheConflicts SourceBuiltPackageInfos="@(_PreviouslySourceBuiltPackageInfos)"
                                       PackageCacheDir="$(PackagesDir)"
                                       KnownOriginPackagePaths="@(_KnownOriginPackagePaths)">
      <Output TaskParameter="ConflictingPackageInfos" ItemName="ConflictingPackageInfos" />
    </GetSourceBuiltNupkgCacheConflicts>
  </Target>

  <Target Name="CheckSourceBuiltNupkgConflictUsages"
          DependsOnTargets="GetAllProjectDirectories"
          AfterTargets="CreateBuildOutputProps"
          Condition="'@(ConflictingPackageInfos)' != ''">
    <PropertyGroup>
      <_ReportDir>$(ConflictingPackageReportDir)before-$(RepositoryName)/</_ReportDir>
      <_ReportDataFile>$(_ReportDir)usage.xml</_ReportDataFile>
      <_ProjectAssetsJsonArchiveFile>$(_ReportDir)all-project-assets-json-files.zip</_ProjectAssetsJsonArchiveFile>
    </PropertyGroup>

    <WritePackageUsageData NuGetPackageInfos="@(ConflictingPackageInfos)"
                           RootDir="$(ProjectDir)"
                           DataFile="$(_ReportDataFile)"
                           ProjectAssetsJsonArchiveFile="$(_ProjectAssetsJsonArchiveFile)" />

    <WriteUsageReports DataFile="$(_ReportDataFile)"
                       OutputDirectory="$(_ReportDir)" />

    <Warning Text="Detected packages in the cache that should be source-built, but contents don't match. See $(_ReportDir) for usage details:" />
    <Warning Text="%(ConflictingPackageInfos.PackageId)/%(ConflictingPackageInfos.PackageVersion) : %(ConflictingPackageInfos.WarningMessage)" />
  </Target>

  <Target Name="CreateRestoreSourceProps"
          BeforeTargets="Build">
    <ItemGroup>
      <_DotNetRestoreSources Include="$(SourceBuiltPackagesPath)" />
      <_DotNetRestoreSources Include="$(ReferencePackagesDir)" Condition="'$(OfflineBuild)' == 'true'"/>
      <_DotNetRestoreSources Include="$(PrebuiltPackagesPath)" Condition="'$(OfflineBuild)' == 'true'"/>
      <_DotNetRestoreSources Include="$(PrebuiltSourceBuiltPackagesPath)" Condition="'$(OfflineBuild)' == 'true'"/>
    </ItemGroup>
    <WriteRestoreSourceProps RestoreSources="@(_DotNetRestoreSources)"
                             OutputPath="$(RestoreSourcePropsPath)" />
  </Target>

  <Target Name="Build" DependsOnTargets="BuildRepoReferences">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building $(ProjectBuildReason)" />
    <Message Importance="High" Text="Running command:" />
    <Message Importance="High" Text="  $(BuildCommand) $(RepoApiArgs)" Condition="'$(BuildCommand)' != ''" />
    <Message Importance="High" Text="  Using custom build target" Condition="'$(BuildCommand)' == ''" />
    <Message Importance="High" Text="  Log: $(RepoConsoleLogFile)" />
    <Message Importance="High" Text="  With Environment Variables:" />
    <Message Importance="High" Text="    %(EnvironmentVariables.Identity)" />
    <CallTarget Targets="RepoBuild" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building $(ProjectBuildReason)...done" />
    <OnError ExecuteTargets="ReportRepoError" />
  </Target>

  <Target Name="RepoBuild">
    <ItemGroup>
      <EnvironmentVariables Condition="'$(NUGET_PACKAGES)'!=''" Include="NUGET_PACKAGES=$(NUGET_PACKAGES)" />
    </ItemGroup>
    <Exec Command="$(BuildCommand) $(RepoApiArgs) $(RedirectRepoOutputToLog)"
          WorkingDirectory="$(ProjectDirectory)"
          EnvironmentVariables="@(EnvironmentVariables)"
          IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="ReportRepoError">
    <Message Importance="High" Text="$([System.IO.File]::ReadAllText('$(RepoConsoleLogFile)'))" Condition="Exists('$(RepoConsoleLogFile)')" />
    <Message Importance="High" Text="'$(RepositoryName)' failed during build." />
    <Message Importance="High" Text="See '$(RepoConsoleLogFile)' for more information." Condition="Exists('$(RepoConsoleLogFile)')" />
  </Target>

  <Target Name="Package" AfterTargets="Build" Condition="'$(BuildPackagesCommand)' != ''">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Packaging $(ProjectBuildReason)" />
    <Message Importance="High" Text="Running command:" />
    <Message Importance="High" Text="  $(BuildPackagesCommand)" />
    <Message Importance="High" Text="  Log: $(RepoConsoleLogFile)" />
    <Message Importance="High" Text="  With Environment Variables:" />
    <Message Importance="High" Text="    %(EnvironmentVariables.Identity)" />
    <Exec Command="$(BuildPackagesCommand) $(RedirectRepoOutputToLog)"
          WorkingDirectory="$(ProjectDirectory)"
          EnvironmentVariables="@(EnvironmentVariables)"
          IgnoreStandardErrorWarningFormat="true" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Packaging $(ProjectBuildReason)...done" />
    <OnError ExecuteTargets="ReportRepoError" />
  </Target>

  <Target Name="GatherBuiltPackages">
    <ItemGroup>
      <!-- Filter out packages for WriteVersions -->
      <_BuiltPackages Include="$(PackagesOutput)/*.nupkg" Exclude="$(PackagesOutput)/*.symbols.nupkg"/>
    </ItemGroup>
  </Target>

  <Target Name="CopyPackage"
          AfterTargets="Package"
          Condition="'$(OutputPlacementRepoApiImplemented)' != 'true' AND '$(PackagesOutput)' != ''"
          DependsOnTargets="GatherBuiltPackages">
    <Copy SourceFiles="@(_BuiltPackages)"
          DestinationFolder="$(SourceBuiltPackagesPath)"
          Condition="'@(_BuiltPackages)'!=''" />
  </Target>

  <Target Name="WriteVersions"
          AfterTargets="CopyPackage"
          DependsOnTargets="GatherBuiltPackages">
    <WriteVersionsFile NugetPackages="@(_BuiltPackages)"
                       OutputPath="$(VersionFileLocation)"
                       Condition="'@(_BuiltPackages)'!=''" />
  </Target>

  <Target Name="ExtractToolPackage"
          DependsOnTargets="GatherBuiltPackages"
          AfterTargets="Build"
          Condition="'@(BuiltSdkPackageOverride)' != ''">
    <ItemGroup>
      <_ToolPackage
        Include="$(SourceBuiltPackagesPath)%(BuiltSdkPackageOverride.Identity)*.nupkg"
        Id="%(BuiltSdkPackageOverride.Identity)" />
    </ItemGroup>

    <ZipFileExtractToDirectory SourceArchive="@(_ToolPackage)"
                               DestinationDirectory="$(ToolPackageExtractDir)%(_ToolPackage.Id)\"
                               OverwriteDestination="true" />
  </Target>

  <Target Name="EnsurePackagesCreated"
          AfterTargets="CopyPackage"
          Condition="'$(SkipEnsurePackagesCreated)' != 'true'">
    <ItemGroup>
      <JustSourceBuiltPackages
        Include="$(SourceBuiltPackagesPath)*.nupkg"
        Exclude="
          $(SourceBuiltPackagesPath)*.symbols.nupkg;
          @(PreviouslySourceBuiltPackages)" />
    </ItemGroup>

    <ItemGroup>
      <_PackagesNotCreatedReason Include="^ There may have been a silent failure in the submodule build. To confirm, check the build log file for undetected errors that may have prevented package creation: $(RepoConsoleLogFile)" />
      <_PackagesNotCreatedReason Include="^ This error might be a false positive if $(RepositoryName) intentionally builds no nuget packages. If so, set the SkipEnsurePackagesCreated property to true in $(MSBuildProjectFullPath)" />
      <_PackagesNotCreatedReason Include="^ The 'bin' directory might be dirty from a previous build and the package files already existed. If so, perform a clean build, or check which packages were already in 'bin' by opening $(_PackageVersionPropsBackupPath)" />
    </ItemGroup>

    <Error Condition="'@(JustSourceBuiltPackages)' == ''"
           Text="$(RepositoryName) produced no new source-built package identities. Known possible causes:%0A@(_PackagesNotCreatedReason, '%0A')" />

    <ReadNuGetPackageInfos PackagePaths="@(JustSourceBuiltPackages)">
      <Output TaskParameter="PackageInfoItems" ItemName="_JustSourceBuiltPackageInfos" />
    </ReadNuGetPackageInfos>

    <Message Importance="High" Text="New NuGet package(s) after building $(RepositoryName):" />
    <Message Importance="High" Text="  -> %(_JustSourceBuiltPackageInfos.PackageId) %(_JustSourceBuiltPackageInfos.PackageVersion)" />
  </Target>

  <Target Name="Clean" Condition="'$(CleanCommand)' != ''" >
    <Exec Command="$(CleanCommand) $(RedirectRepoOutputToLog)"
          WorkingDirectory="$(ProjectDirectory)"
          EnvironmentVariables="@(EnvironmentVariables)"
          IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <Target Name="SetNuGetPackagesEnvironment" Condition="'$(ArchiveDownloadedPackages)' == 'true'">
    <PropertyGroup>
      <LocalNuGetPackagesRootForRepository>$(LocalNuGetPackagesRoot)$(RepositoryName)/</LocalNuGetPackagesRootForRepository>
    </PropertyGroup>

    <MakeDir Directories="$(LocalNuGetPackagesRootForRepository)" />

    <ItemGroup>
      <EnvironmentVariables Include="NUGET_PACKAGES=$(LocalNuGetPackagesRootForRepository)" />
    </ItemGroup>
  </Target>

  <Target Name="BootstrapBuildTools" BeforeTargets="Build"
         Condition="'$(SkipBootstrapBuildTools)' != 'true' and '$(_IsBootstrapping)' == 'true'">
   <PropertyGroup>
     <ProjectToolsDir>$(ProjectDirectory)Tools/</ProjectToolsDir>
   </PropertyGroup>
   <RemoveDir Directories="$(ProjectToolsDir)" />
   <MakeDir Directories="$(ProjectToolsDir)" />
   <ItemGroup>
     <BuildToolsFile Include="$(BootstrapBuildToolsDir)/**" />
     <BuildToolsFile Include="$(ProjectDirectory)Tools-Override/**" />
   </ItemGroup>

   <Copy SourceFiles="@(BuildToolsFile)"
         DestinationFiles="@(BuildToolsFile->'$(ProjectToolsDir)%(RecursiveDir)%(Filename)%(Extension)')" />

   <Copy SourceFiles="$(BootstrapBuildToolsDir)/BuildToolsVersion.txt"
         DestinationFolder="$(ProjectDirectory)" />
  </Target>

  <Target Name="SetSourceBuiltSdkOverrides"
          BeforeTargets="Build"
          Condition="'@(UseSourceBuiltSdkOverride)' != ''">
    <ItemGroup>
      <EnvironmentVariables Include="SOURCE_BUILT_SDK_ID_%(UseSourceBuiltSdkOverride.Group)=%(UseSourceBuiltSdkOverride.Identity)" />
      <EnvironmentVariables Include="SOURCE_BUILT_SDK_VERSION_%(UseSourceBuiltSdkOverride.Group)=%(UseSourceBuiltSdkOverride.Version)" />
      <EnvironmentVariables Include="SOURCE_BUILT_SDK_DIR_%(UseSourceBuiltSdkOverride.Group)=$(ToolPackageExtractDir)%(UseSourceBuiltSdkOverride.Identity)/" />
    </ItemGroup>
  </Target>

  <Target Name="WritePrebuiltUsageData"
          DependsOnTargets="GetAllProjectDirectories">
    <!-- Save the PVP snapshot of each build step to be evaluated while building the report. -->
    <ItemGroup>
      <PackageVersionPropsSnapshotFiles Include="$(IntermediatePath)PackageVersions.props.pre.*.xml" />
    </ItemGroup>
    <Copy SourceFiles="@(PackageVersionPropsSnapshotFiles)" DestinationFolder="$(PackageReportDir)snapshots/" />

    <ItemGroup>
      <AllRestoredPackageFiles Include="$(LocalNuGetPackagesRoot)**/*.nupkg" />
      <AllRestoredPackageFiles Include="$(PackagesDir)**/*.nupkg" />

      <!-- Only contains packages when building a tarball. -->
      <TarballPrebuiltPackageFiles Include="$(PrebuiltPackagesPath)*.nupkg" />

      <SourceBuiltPackageFiles Include="$(SourceBuiltBlobFeedDir)**/*.nupkg" />
      <ReferencePackageFiles Condition="'$(OfflineBuild)' == 'true'" Include="$(ReferencePackagesDir)**/*.nupkg" />

      <!-- Check all RIDs from all restored Microsoft.NETCore.Platforms packages. -->
      <PlatformsRuntimeJsonFiles Include="$(LocalNuGetPackagesRoot)*/microsoft.netcore.platforms/*/runtime.json" />
      <PlatformsRuntimeJsonFiles Include="$(PackagesDir)microsoft.netcore.platforms/*/runtime.json" />

      <!-- Add some other potential top-level project directories for a more specific report. -->
      <ProjectDirectories Include="$(ToolsDir);$(TaskDirectory);$(BaseIntermediatePath)" />
      <!-- Finally, scan entire source-build, in case project.assets.json ends up in an unexpected place. -->
      <ProjectDirectories Include="$(ProjectDir)" />
    </ItemGroup>

    <ItemGroup>
      <!-- This file is a resource tracked by Git, not generated by restore. Ignore false positive. -->
      <IgnoredProjectAssetsJsonFiles Include="$(SubmoduleDirectory)nuget-client/test/NuGet.Core.Tests/NuGet.Build.Tasks.Pack.Test/compiler/resources/project.assets.json" />
    </ItemGroup>

    <WritePackageUsageData
      RestoredPackageFiles="@(AllRestoredPackageFiles)"
      TarballPrebuiltPackageFiles="@(TarballPrebuiltPackageFiles)"
      SourceBuiltPackageFiles="@(SourceBuiltPackageFiles)"
      ReferencePackageFiles="@(ReferencePackageFiles)"
      PlatformsRuntimeJsonFiles="@(PlatformsRuntimeJsonFiles)"
      TargetRid="$(TargetRid)"
      ProjectDirectories="@(ProjectDirectories)"
      RootDir="$(ProjectDir)"
      IgnoredProjectAssetsJsonFiles="@(IgnoredProjectAssetsJsonFiles)"
      DataFile="$(PackageReportDataFile)"
      ProjectAssetsJsonArchiveFile="$(ProjectAssetsJsonArchiveFile)" />
  </Target>

  <Target Name="GetAllProjectDirectories">
    <ItemGroup>
      <AllRepoProjects Include="$(ProjectDir)repos\*.proj" />
    </ItemGroup>

    <Message Importance="High" Text="Finding project directories..." />

    <MSBuild Projects="@(AllRepoProjects)"
             Targets="GetProjectDirectory">
      <Output TaskParameter="TargetOutputs" ItemName="ProjectDirectories" />
    </MSBuild>
  </Target>

  <Target Name="ReportPrebuiltUsage">
    <PropertyGroup>
      <FailOnPrebuiltBaselineError Condition="'$(FailOnPrebuiltBaselineError)' == ''">false</FailOnPrebuiltBaselineError>
    </PropertyGroup>

    <ItemGroup>
      <PackageVersionPropsSavedSnapshotFiles Include="$(PackageReportDir)snapshots/PackageVersions.props.pre.*.xml" />
    </ItemGroup>

    <WriteUsageReports DataFile="$(PackageReportDataFile)"
                       PackageVersionPropsSnapshots="@(PackageVersionPropsSavedSnapshotFiles)"
                       ProdConBuildManifestFile="$(ProdConManifestFile)"
                       PoisonedReportFile="$(PoisonedReportFile)"
                       OutputDirectory="$(PackageReportDir)" />

    <PropertyGroup Condition="'$(ContinueOnPrebuiltBaselineError)' == ''">
      <ContinueOnPrebuiltBaselineError>false</ContinueOnPrebuiltBaselineError>
      <ContinueOnPrebuiltBaselineError Condition="'$(FailOnPrebuiltBaselineError)' != 'true'">true</ContinueOnPrebuiltBaselineError>
    </PropertyGroup>

    <ValidateUsageAgainstBaseline
      DataFile="$(PackageReportDataFile)"
      BaselineDataFile="$(BaselineDataFile)"
      OutputBaselineFile="$(PackageReportDir)generated-new-baseline.xml"
      OutputReportFile="$(PackageReportDir)baseline-comparison.xml"
      AllowTestProjectUsage="$(AllowTestProjectUsage)"
      ContinueOnError="$(ContinueOnPrebuiltBaselineError)" />
  </Target>

  <Target Name="GetProjectDirectory" Outputs="$(ProjectDirectory)" />
  <Target Name="GetOrchestratedManifestBuildName" Outputs="$(OrchestratedManifestBuildName)" />
  <Target Name="GetOfficialBuildId" Outputs="$(OfficialBuildId)" />

  <Import Project="$(ToolsDir)VersionTools.targets" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory).., dir.targets))/dir.targets" />
</Project>
