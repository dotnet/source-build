<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" InitialTargets="SetNuGetPackagesEnvironment" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Condition="'$(OfflineBuild)' == 'true'">
    <EnvironmentVariables Include="LatestCommit=$(GitCommitHash)" />
    <EnvironmentVariables Include="OfficialBuildId=$(OfficialBuildId)" />
    <EnvironmentVariables Include="VersionSeedDate=$(OfficialBuildId)" />
  </ItemGroup>

  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="AddSourceToNuGetConfig" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="GetSourceBuiltNupkgCacheConflicts" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="ReadNuGetPackageInfos" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="RemoveInternetSourcesFromNuGetConfig" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="UpdateJson" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="ValidateUsageAgainstBaseline" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteBuildOutputProps" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WritePackageUsageData" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteRestoreSourceProps" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteUsageReports" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteVersionsFile" />
  <UsingTask AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" TaskName="ZipFileExtractToDirectory" />

  <!--
    Central property to define that a repo doesn't implement any of the Repo API. If a repo adds an
    implementation of a specific part of the Repo API, replace RepoApiImplemented in the repo's
    props file with the properties below. When more API surface area is added, remove the
    corresponding lines from the repo's props file. Once the entire API is implemented, the props
    file is clean.
  -->
  <PropertyGroup>
    <RepoApiImplemented Condition="'$(RepoApiImplemented)' == ''">true</RepoApiImplemented>
  </PropertyGroup>

  <PropertyGroup>
    <DependencyVersionInputRepoApiImplemented Condition="'$(DependencyVersionInputRepoApiImplemented)' == ''">$(RepoApiImplemented)</DependencyVersionInputRepoApiImplemented>
    <SourceOverrideRepoApiImplemented Condition="'$(SourceOverrideRepoApiImplemented)' == ''">$(RepoApiImplemented)</SourceOverrideRepoApiImplemented>
    <OutputPlacementRepoApiImplemented Condition="'$(OutputPlacementRepoApiImplemented)' == ''">$(RepoApiImplemented)</OutputPlacementRepoApiImplemented>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SourceOverrideRepoApiImplemented)' != 'true'">
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)NuGet.config')">$(ProjectDirectory)NuGet.config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)NuGet.Config')">$(ProjectDirectory)NuGet.Config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)src\NuGet.config')">$(ProjectDirectory)src\NuGet.config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)src\NuGet.Config')">$(ProjectDirectory)src\NuGet.Config</NuGetConfigFile>
  </PropertyGroup>

  <!-- Dependency version input arguments -->
  <PropertyGroup Condition="'$(DependencyVersionInputRepoApiImplemented)' == 'true'">
    <RepoApiArgs>$(RepoApiArgs) /p:DotNetPackageVersionPropsPath=$(PackageVersionPropsPath)</RepoApiArgs>
  </PropertyGroup>
  <!-- Source override arguments -->
  <PropertyGroup Condition="'$(SourceOverrideRepoApiImplemented)' == 'true'">
    <RepoApiArgs>$(RepoApiArgs) /p:DotNetRestoreSourcePropsPath=$(RestoreSourcePropsPath)</RepoApiArgs>
    <RepoApiArgs Condition="'$(OfflineBuild)' == 'true'">$(RepoApiArgs) /p:DotNetBuildOffline=true</RepoApiArgs>
  </PropertyGroup>
  <!-- Output placement arguments -->
  <PropertyGroup Condition="'$(OutputPlacementRepoApiImplemented)' == 'true'">
    <RepoApiArgs>$(RepoApiArgs) /p:DotNetOutputBlobFeedDir=$(SourceBuiltBlobFeedDir)</RepoApiArgs>
  </PropertyGroup>

  <Import Project="$(ProjectDirectory)dependencies.props"
          Condition="'$(DependencyVersionInputRepoApiImplemented)' != 'true' AND
                     Exists('$(ProjectDirectory)dependencies.props')" />

  <Target Name="BuildRepoReferences" Condition="'@(RepositoryReference)' != '' and '$(SkipRepoReferences)' != 'true'">
    <Message Importance="High" Text="Building dependencies [@(RepositoryReference)] needed by '$(RepositoryName)'." />
    <ItemGroup>
      <_DependentProject Include="@(RepositoryReference -> '%(Identity).proj')" />
    </ItemGroup>

    <MSBuild Projects="@(_DependentProject)" Targets="Build" BuildInParallel="$(BuildInParallel)" StopOnFirstFailure="true" />
  </Target>

  <Target Name="ApplyPatches" Condition="Exists('$(PatchesDir)$(RepositoryName)') and '$(SkipPatches)' != 'true'">
    <ItemGroup>
      <PatchesToApply Include="$(PatchesDir)$(RepositoryName)/*.patch" />
    </ItemGroup>

    <PropertyGroup>
      <PatchCommand>git apply --ignore-whitespace --whitespace=nowarn</PatchCommand>
    </PropertyGroup>

    <Exec Command="$(PatchCommand) %(PatchesToApply.Identity)"
          WorkingDirectory="$(ProjectDirectory)"
          Condition="'@(PatchesToApply)' != ''" />
  </Target>

  <Target Name="CreateGitInfoProps"
          Condition="'$(OfflineBuild)' != 'true' AND Exists('$(ProjectDirectory).git')">
    <Exec Command="git rev-parse HEAD" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitHash" />
    </Exec>
    <Exec Command="git rev-list --count HEAD" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitCount" />
    </Exec>

    <PropertyGroup>
      <GitLogFormatArg>--format=</GitLogFormatArg>
      <!-- Escape the % with another % on Windows. -->
      <GitLogFormatArg Condition="'$(OS)' == 'Windows_NT'">$(GitLogFormatArg)%25</GitLogFormatArg>
      <GitLogFormatArg>$(GitLogFormatArg)%25cd</GitLogFormatArg>
    </PropertyGroup>

    <Exec Command="git log -1 $(GitLogFormatArg) --date=short" WorkingDirectory="$(ProjectDirectory)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCommitDate" />
    </Exec>

    <PropertyGroup>
      <GitInfoFileContents>
        <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- $(RepositoryName) submodule information. -->
    <GitCommitHash>$(GitCommitHash)</GitCommitHash>
    <GitCommitCount>$(GitCommitCount)</GitCommitCount>
    <GitCommitDate>$(GitCommitDate)</GitCommitDate>
  </PropertyGroup>
</Project>
]]>
      </GitInfoFileContents>
    </PropertyGroup>

    <WriteLinesToFile File="$(OutputGitInfoPropsFile)"
                      Lines="$(GitInfoFileContents)"
                      Overwrite="true" />
  </Target>

  <Target Name="UpdateNuGetConfig"
          BeforeTargets="Build"
          Condition="'$(NuGetConfigFile)' != '' OR '@(NuGetConfigFiles)' != ''">
    <!-- Update the detected or manually specified NuGetConfigFile, but also allow multiple. -->
    <ItemGroup>
      <NuGetConfigFiles Include="$(NuGetConfigFile)" />
    </ItemGroup>

    <RemoveInternetSourcesFromNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                                          Condition="'$(OfflineBuild)' != ''" />

    <AddSourceToNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                            SourceName="prebuilt"
                            SourcePath="$(PrebuiltPackagesPath)"
                            Condition="'$(OfflineBuild)' == 'true'" />

    <AddSourceToNuGetConfig NuGetConfigFile="%(NuGetConfigFiles.Identity)"
                            SourceName="source-built"
                            SourcePath="$(SourceBuiltPackagesPath)" />
  </Target>

  <Target Name="UpdateCLIVersionInGlobalJson"
          BeforeTargets="Build"
          Condition="'$(GlobalJsonFile)' != ''">

    <UpdateJson JsonFilePath="$(GlobalJsonFile)"
                PathToAttribute="sdk.version"
                NewAttributeValue="$(SDK_VERSION)" />
  </Target>

  <Target Name="CreateBuildOutputProps"
          BeforeTargets="Build">
    <ItemGroup>
      <_PreviouslySourceBuiltPackages Include="$(SourceBuiltPackagesPath)*.nupkg"
                                      Exclude="$(SourceBuiltPackagesPath)*.symbols.nupkg" />
    </ItemGroup>
    <WriteBuildOutputProps NuGetPackages="@(_PreviouslySourceBuiltPackages)"
                           ExtraPackageInfo="@(ExtraPackageVersionPropsPackageInfo)"
                           OutputPath="$(PackageVersionPropsPath)" />

    <WriteBuildOutputProps NuGetPackages="@(_PreviouslySourceBuiltPackages)"
                           IncludeCreationTimeProperty="true"
                           OutputPath="$(PackageVersionPropsPath).pre.$(RepositoryName).xml" />

    <ReadLinesFromFile File="$(PackageVersionPropsPath)">
      <Output TaskParameter="Lines" ItemName="VersionProperties" />
    </ReadLinesFromFile>

    <Message Importance="High" Text="$(RepositoryName) is using versions $(PackageVersionPropsPath)" />
    <Message Importance="High" Text="%(VersionProperties.Identity)" />

    <ReadNuGetPackageInfos PackagePaths="@(_PreviouslySourceBuiltPackages)">
      <Output TaskParameter="PackageInfoItems" ItemName="_PreviouslySourceBuiltPackageInfos" />
    </ReadNuGetPackageInfos>

    <GetSourceBuiltNupkgCacheConflicts SourceBuiltPackageInfos="@(_PreviouslySourceBuiltPackageInfos)"
                                       PackageCacheDir="$(PackagesDir)">
      <Output TaskParameter="ConflictingPackageInfos" ItemName="ConflictingPackageInfos" />
    </GetSourceBuiltNupkgCacheConflicts>
  </Target>

  <Target Name="CheckSourceBuiltNupkgConflictUsages"
          DependsOnTargets="GetAllProjectDirectories"
          AfterTargets="CreateBuildOutputProps"
          Condition="'@(ConflictingPackageInfos)' != ''">
    <PropertyGroup>
      <_ReportDir>$(ConflictingPackageReportDir)before-$(RepositoryName)/</_ReportDir>
      <_ReportDataFile>$(_ReportDir)usage.xml</_ReportDataFile>
    </PropertyGroup>

    <WritePackageUsageData NuGetPackageInfos="@(ConflictingPackageInfos)"
                           RootDir="$(ProjectDir)"
                           DataFile="$(_ReportDataFile)" />

    <WriteUsageReports DataFile="$(_ReportDataFile)"
                       OutputDirectory="$(_ReportDir)" />

    <Warning Text="Detected package id/version(s) in the cache that were source-built, but contents don't match. They were probably downloaded. See $(_ReportDir) for usage details. @(ConflictingPackageInfos->'%(PackageId) %(PackageVersion)', ', ')" />
  </Target>

  <Target Name="CreateRestoreSourceProps"
          BeforeTargets="Build">
    <ItemGroup>
      <_DotNetRestoreSources Include="$(SourceBuiltPackagesPath)" />
      <_DotNetRestoreSources Include="$(PrebuiltPackagesPath)" Condition="'$(OfflineBuild)' == 'true'"/>
    </ItemGroup>
    <WriteRestoreSourceProps RestoreSources="@(_DotNetRestoreSources)"
                             OutputPath="$(RestoreSourcePropsPath)" />
  </Target>

  <Target Name="Build" DependsOnTargets="BuildRepoReferences">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building '$(RepositoryName)'" />
    <Message Importance="High" Text="Running command:" />
    <Message Importance="High" Text="  $(BuildCommand) $(RepoApiArgs)" Condition="'$(BuildCommand)' != ''" />
    <Message Importance="High" Text="  Using custom build target" Condition="'$(BuildCommand)' == ''" />
    <Message Importance="High" Text="  Log: $(RepoConsoleLogFile)" />
    <Message Importance="High" Text="  With Enivornment Varibles:" />
    <Message Importance="High" Text="    %(EnvironmentVariables.Identity)" />
    <CallTarget Targets="RepoBuild" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building '$(RepositoryName)'...done" />
    <OnError ExecuteTargets="ReportRepoError" />
  </Target>

  <Target Name="RepoBuild">
    <ItemGroup>
      <EnvironmentVariables Condition="'$(NUGET_PACKAGES)'!=''" Include="NUGET_PACKAGES=$(NUGET_PACKAGES)" />
    </ItemGroup>
    <Exec Command="$(BuildCommand) $(RepoApiArgs) $(RedirectRepoOutputToLog)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="ReportRepoError">
    <Message Importance="High" Text="$([System.IO.File]::ReadAllText('$(RepoConsoleLogFile)'))" Condition="Exists('$(RepoConsoleLogFile)')" />
    <Message Importance="High" Text="'$(RepositoryName)' failed during build." />
    <Message Importance="High" Text="See '$(RepoConsoleLogFile)' for more information." Condition="Exists('$(RepoConsoleLogFile)')" />
  </Target>

  <Target Name="Package" AfterTargets="Build" Condition="'$(BuildPackagesCommand)' != ''">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Packaging '$(RepositoryName)'" />
    <Message Importance="High" Text="Running command:" />
    <Message Importance="High" Text="  $(BuildPackagesCommand)" />
    <Message Importance="High" Text="  Log: $(RepoConsoleLogFile)" />
    <Message Importance="High" Text="  With Enivornment Varibles:" />
    <Message Importance="High" Text="    %(EnvironmentVariables.Identity)" />
    <Exec Command="$(BuildPackagesCommand) $(RedirectRepoOutputToLog)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Packaging '$(RepositoryName)'...done" />
    <OnError ExecuteTargets="ReportRepoError" />
  </Target>

  <Target Name="GatherBuiltPackages">
    <ItemGroup>
      <!-- Filter out packages for WriteVersions -->
      <_BuiltPackages Include="$(PackagesOutput)/*.nupkg" Exclude="$(PackagesOutput)/*.symbols.nupkg"/>
    </ItemGroup>
  </Target>

  <Target Name="CopyPackage"
          AfterTargets="Package"
          Condition="'$(OutputPlacementRepoApiImplemented)' != 'true' AND '$(PackagesOutput)' != ''"
          DependsOnTargets="GatherBuiltPackages">
    <Copy SourceFiles="@(_BuiltPackages)"
          DestinationFolder="$(SourceBuiltPackagesPath)"
          Condition="'@(_BuiltPackages)'!=''" />
  </Target>

  <Target Name="WriteVersions"
          AfterTargets="CopyPackage"
          DependsOnTargets="GatherBuiltPackages">
    <WriteVersionsFile NugetPackages="@(_BuiltPackages)"
                       OutputPath="$(VersionFileLocation)"
                       Condition="'@(_BuiltPackages)'!=''" />
  </Target>

  <Target Name="ExtractToolPackage"
          DependsOnTargets="GatherBuiltPackages"
          AfterTargets="Build"
          Condition="'$(BuiltToolPackageId)' != ''">
    <ItemGroup>
      <_AllSourceBuiltPackages Include="$(SourceBuiltPackagesPath)*.nupkg" />
      <_ToolPackage Include="@(_AllSourceBuiltPackages)"
                    Condition="$([System.String]::new('%(Filename)').StartsWith('$(BuiltToolPackageId)'))" />
    </ItemGroup>

    <Error Text="Expected single package matching '$(BuiltToolPackageId)', found: @(_ToolPackage)"
           Condition="'@(_ToolPackage->Count())' != '1'" />

    <ZipFileExtractToDirectory SourceArchive="@(_ToolPackage)"
                               DestinationDirectory="$(ToolPackageExtractDir)$(BuiltToolPackageId)\"
                               OverwriteDestination="true" />
  </Target>

  <Target Name="Clean" Condition="'$(CleanCommand)' != ''" >
    <Exec Command="$(CleanCommand) $(RedirectRepoOutputToLog)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="Update"
          BeforeTargets="Build"
          Condition="'$(DependencyVersionInputRepoApiImplemented)' != 'true' AND '$(UpdateCommand)' != ''">
    <Exec Command="$(UpdateCommand) $(RedirectRepoOutputToLog)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="SetNuGetPackagesEnvironment" Condition="'$(ArchiveDownloadedPackages)' == 'true'">
    <PropertyGroup>
      <LocalNuGetPackagesRootForRepository>$(LocalNuGetPackagesRoot)$(RepositoryName)/</LocalNuGetPackagesRootForRepository>
    </PropertyGroup>

    <MakeDir Directories="$(LocalNuGetPackagesRootForRepository)" />

    <ItemGroup>
      <EnvironmentVariables Include="NUGET_PACKAGES=$(LocalNuGetPackagesRootForRepository)" />
    </ItemGroup>
  </Target>

  <Target Name="BootstrapBuildTools" BeforeTargets="Build"
         Condition="'$(SkipBootstrapBuildTools)' != 'true' and '$(_IsBootstrapping)' == 'true'">
   <PropertyGroup>
     <ProjectToolsDir>$(ProjectDirectory)Tools/</ProjectToolsDir>
   </PropertyGroup>
   <RemoveDir Directories="$(ProjectToolsDir)" />
   <MakeDir Directories="$(ProjectToolsDir)" />
   <ItemGroup>
     <BuildToolsFile Include="$(BootstrapBuildToolsDir)/**" />
     <BuildToolsFile Include="$(ProjectDirectory)Tools-Override/**" />
   </ItemGroup>

   <Copy SourceFiles="@(BuildToolsFile)"
         DestinationFiles="@(BuildToolsFile->'$(ProjectToolsDir)%(RecursiveDir)%(Filename)%(Extension)')" />

   <Copy SourceFiles="$(BootstrapBuildToolsDir)/BuildToolsVersion.txt"
         DestinationFolder="$(ProjectDirectory)" />
  </Target>

  <!--
    Repo toolset users must use the source-built toolset, but the repo toolset build itself can only
    consume itself source-built in a tarball (offline) build.
  -->
  <Target Name="BootstrapRoslynToolsRepoToolset"
          BeforeTargets="Build"
          Condition="'$(UsesRepoToolset)' == 'true' AND
                     ('$(BuiltToolPackageId)' != '$(RepoToolsetPackageId)' OR '$(OfflineBuild)' == 'true')">
    <ItemGroup>
      <EnvironmentVariables Include="RESOLVE_REPO_TOOLSET_PACKAGE_DIR=$(ToolPackageExtractDir)$(RepoToolsetPackageId)\" />
      <EnvironmentVariables Include="RESOLVE_REPO_TOOLSET_SDK_DIR=$(ToolPackageExtractDir)$(RepoToolsetPackageId)\sdk\" />
      <EnvironmentVariables Include="RESOLVE_REPO_TOOLSET_SDK_VERSION=1.0.0-source-built" />
    </ItemGroup>
  </Target>

  <Target Name="WritePrebuiltUsageData"
          DependsOnTargets="GetAllProjectDirectories">
    <!-- Save the PVP snapshot of each build step to be evaluated while building the report. -->
    <ItemGroup>
      <PackageVersionPropsSnapshotFiles Include="$(IntermediatePath)PackageVersions.props.pre.*.xml" />
    </ItemGroup>
    <Copy SourceFiles="@(PackageVersionPropsSnapshotFiles)" DestinationFolder="$(PackageReportDir)snapshots/" />

    <ItemGroup>
      <AllRestoredPackageFiles Include="$(LocalNuGetPackagesRoot)**/*.nupkg" />
      <AllRestoredPackageFiles Include="$(PackagesDir)**/*.nupkg" />

      <!-- Only contains packages when building a tarball. -->
      <TarballPrebuiltPackageFiles Include="$(PrebuiltPackagesPath)*.nupkg" />

      <SourceBuiltPackageFiles Include="$(SourceBuiltBlobFeedDir)**/*.nupkg" />

      <!-- Check all RIDs from all restored Microsoft.NETCore.Platforms packages. -->
      <PlatformsRuntimeJsonFiles Include="$(LocalNuGetPackagesRoot)*/microsoft.netcore.platforms/*/runtime.json" />
      <PlatformsRuntimeJsonFiles Include="$(PackagesDir)microsoft.netcore.platforms/*/runtime.json" />

      <!-- Add some other potential top-level project directories for a more specific report. -->
      <ProjectDirectories Include="$(ToolsDir);$(TaskDirectory);$(BaseIntermediatePath)" />
      <!-- Finally, scan entire source-build, in case project.assets.json ends up in an unexpected place. -->
      <ProjectDirectories Include="$(ProjectDir)" />
    </ItemGroup>

    <WritePackageUsageData
      RestoredPackageFiles="@(AllRestoredPackageFiles)"
      TarballPrebuiltPackageFiles="@(TarballPrebuiltPackageFiles)"
      SourceBuiltPackageFiles="@(SourceBuiltPackageFiles)"
      PlatformsRuntimeJsonFiles="@(PlatformsRuntimeJsonFiles)"
      TargetRid="$(TargetRid)"
      ProjectDirectories="@(ProjectDirectories)"
      RootDir="$(ProjectDir)"
      DataFile="$(PackageReportDataFile)" />
  </Target>

  <Target Name="GetAllProjectDirectories">
    <ItemGroup>
      <AllRepoProjects Include="$(ProjectDir)repos\*.proj" />
    </ItemGroup>

    <Message Importance="High" Text="Finding project directories..." />

    <MSBuild Projects="@(AllRepoProjects)"
             Targets="GetProjectDirectory">
      <Output TaskParameter="TargetOutputs" ItemName="ProjectDirectories" />
    </MSBuild>
  </Target>

  <Target Name="ReportPrebuiltUsage">
    <PropertyGroup>
      <BaselineDataFile>$(ToolsLocalDir)prebuilt-baseline-</BaselineDataFile>
      <BaselineDataFile Condition="'$(OfflineBuild)' == 'true'">$(BaselineDataFile)offline.xml</BaselineDataFile>
      <BaselineDataFile Condition="'$(OfflineBuild)' != 'true'">$(BaselineDataFile)online.xml</BaselineDataFile>

      <ContinueOnPrebuiltBaselineError Condition="'$(ContinueOnPrebuiltBaselineError)' == ''">false</ContinueOnPrebuiltBaselineError>
    </PropertyGroup>

    <ValidateUsageAgainstBaseline
      DataFile="$(PackageReportDataFile)"
      BaselineDataFile="$(BaselineDataFile)"
      OutputBaselineFile="$(PackageReportDir)generated-new-baseline.xml"
      OutputReportFile="$(PackageReportDir)baseline-comparison.xml"
      ContinueOnError="$(ContinueOnPrebuiltBaselineError)" />

    <ItemGroup>
      <PackageVersionPropsSavedSnapshotFiles Include="$(PackageReportDir)snapshots/PackageVersions.props.pre.*.xml" />
    </ItemGroup>

    <WriteUsageReports DataFile="$(PackageReportDataFile)"
                       PackageVersionPropsSnapshots="@(PackageVersionPropsSavedSnapshotFiles)"
                       ProdConBuildManifestFile="$(ProdConManifestFile)"
                       PoisonedReportFile="$(PoisonedReportFile)"
                       OutputDirectory="$(PackageReportDir)" />
  </Target>

  <Target Name="GetProjectDirectory" Outputs="$(ProjectDirectory)" />
  <Target Name="GetOrchestratedManifestBuildName" Outputs="$(OrchestratedManifestBuildName)" />
  <Target Name="GetOfficialBuildId" Outputs="$(OfficialBuildId)" />

  <Import Project="$(ToolsDir)VersionTools.targets" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory).., dir.targets))/dir.targets" />
</Project>
