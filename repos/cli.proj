<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <PropertyGroup>
    <OverrideTargetRid>$(TargetRid)</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'OSX'">osx-x64</OverrideTargetRid>
    <OSNameOverride>$(TargetRid.Substring(0, $(TargetRid.IndexOf("-"))))</OSNameOverride>

    <RuntimeArg>--runtime-id $(OverrideTargetRid)</RuntimeArg>
    <RuntimeArg Condition="'$(TargetOS)' == 'Linux'">--runtime-id $(TargetRid)</RuntimeArg>

    <BuildCommandArgs>--restore --build --pack</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) --configuration $(Configuration)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(RuntimeArg)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(FlagParameterPrefix)nodereuse $(ArcadeFalseBoolBuildArg)</BuildCommandArgs>

    <!--
      Setting NETCoreAppMaximumVersion to a high version so that the sdk doesn't complain if we're restoring/publishing for a higher version than the sdk.
      See https://github.com/dotnet/sdk/issues/1512#issuecomment-377082883
    -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:NETCoreAppMaximumVersion=99.9</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeMSBuildSdkResolver=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DefaultTargetLatestAspNetCoreRuntimePatch=true</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:PB_PackageVersionPropsUrl=file:%2F%2F$(PackageVersionPropsPath)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:OSName=$(OSNameOverride)</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) -bl</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -ci</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -v $(LogVerbosity)</BuildCommandArgs>
    <LogVerbosityOptOut>true</LogVerbosityOptOut>

    <BuildCommand>$(ProjectDirectory)build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <PackagesOutput>$(ProjectDirectory)artifacts/packages/$(Configuration)/NonShipping/</PackagesOutput>
    <RepoApiImplemented>false</RepoApiImplemented>
    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>
    <DependencyVersionInputRepoApiImplemented>true</DependencyVersionInputRepoApiImplemented>

    <GlobalJsonFile>$(ProjectDirectory)global.json</GlobalJsonFile>
    <NuGetConfigFile>$(ProjectDirectory)/NuGet.config</NuGetConfigFile>

    <EnvironmentRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentRestoreSources)%3B$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://api.nuget.org/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-core/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json</EnvironmentRestoreSources>
  </PropertyGroup>

  <ItemGroup>
    <UseSourceBuiltSdkOverride Include="@(ArcadeSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="RestoreSources=$(EnvironmentRestoreSources)" />
  </ItemGroup>

  <ItemGroup>
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAllPackageVersion" Version="$(MicrosoftAspNetCoreAllPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppPackageVersion" Version="$(MicrosoftAspNetCoreAppPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETSdkRazorPackageVersion" Version="$(MicrosoftNETSdkRazorPackageVersion)" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="application-insights" />
    <RepositoryReference Include="clicommandlineparser" />
    <RepositoryReference Include="runtime" />
    <RepositoryReference Include="msbuild" />
    <RepositoryReference Include="nuget-client" />
    <RepositoryReference Include="newtonsoft-json" />
    <RepositoryReference Include="newtonsoft-json901" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="sdk" />
    <RepositoryReference Include="templating" />
    <RepositoryReference Include="websdk" />
    <RepositoryReference Include="xliff-tasks" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="ReleaseSuffix=$(CliInternalReleaseTag)" />
    <EnvironmentVariables Include="BuildNumber=$(CliInternalBuildVersion)" />
    <EnvironmentVariables Include="RestoreSources=$(EnvironmentRestoreSources)" />
  </ItemGroup>

  <!--
    Forces CLI projects to use the source-built Microsoft.NETCore.App package. This lets CLI build
    netcoreapp3.0 projects even though 3.0.0 doesn't exist yet: we can use e.g. 3.0.0-preview.

    The CLI repo normally downloads a 3.0 toolset, which ships with a 3.0 NETCore.App and a built-in
    workaround to use that to build netcoreapp3.0. Source-build forces a 2.1 toolset (N-1) which
    doesn't know about our source-built 3.0 NETCore.App, so we need to work around this ourselves.

    RuntimeFrameworkVersion sets the version of NETCore.App used by *any* target framework. When
    using this workaround we might not be able to build any netcoreapp2.1 etc. projects within the
    same command.
  -->
  <Target Name="UseCoreSetupNETCoreAppPackage"
          BeforeTargets="Build">
    <ItemGroup>
      <SourceBuiltNETCoreAppFile
        Include="$(SourceBuiltPackagesPath)Microsoft.NETCore.App.*.nupkg"
        Exclude="$(SourceBuiltPackagesPath)*.symbols.nupkg" />
    </ItemGroup>

    <ReadNuGetPackageInfos PackagePaths="@(SourceBuiltNETCoreAppFile)">
      <Output TaskParameter="PackageInfoItems" ItemName="_SourceBuiltNETCoreAppFilePackageInfo" />
    </ReadNuGetPackageInfos>

    <ItemGroup>
      <EnvironmentVariables Include="RuntimeFrameworkVersion=%(_SourceBuiltNETCoreAppFilePackageInfo.PackageVersion)" />
    </ItemGroup>
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
