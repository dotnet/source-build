<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />
  <PropertyGroup>
    <RuntimeArg Condition="'$(TargetOS)' == 'Linux'">--runtime-id $(TargetRid)</RuntimeArg>
    <BuildCommandArgs>--stage0 $(DotNetCliToolDir) $(RuntimeArg)</BuildCommandArgs>

    <!--
      Setting NETCoreAppMaximumVersion to a high version so that the sdk doesn't complain if we're restoring/publishing for a higher version than the sdk.
      See https://github.com/dotnet/sdk/issues/1512#issuecomment-377082883
    -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:NETCoreAppMaximumVersion=99.9</BuildCommandArgs>

    <!-- Consume the source-built Core-Setup. This line must be removed to source-build CLI without source-building Core-Setup first. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:CoreSetupBlobRootUrl=file:%2F%2F$(LocalBlobStorageRoot)</BuildCommandArgs>

    <!-- Pass in package version props using the Product Construction (ProdCon) API. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:PB_PackageVersionPropsUrl=file:%2F%2F$(PackageVersionPropsPath)</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeMSBuildSdkResolver=false</BuildCommandArgs>

    <BuildCommandArgs Condition="'$(OS)' == 'Windows_NT'">$(BuildCommandArgs) '/p:CLITargets=\&quot;\&quot;\&quot;Prepare;Compile;Package\&quot;\&quot;\&quot;'</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(OS)' != 'Windows_NT'">$(BuildCommandArgs) '/p:CLITargets=&quot;Prepare;Compile;Package&quot;'</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /v:detailed</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <PackagesOutput>$(ProjectDirectory)bin/2/packages/</PackagesOutput>
    <TarBallOutput>$(PackagesOutput)</TarBallOutput>
    <RepoApiImplemented>false</RepoApiImplemented>
    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>

    <EnvironmentExternalRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentExternalRestoreSources>
    <EnvironmentExternalRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentExternalRestoreSources)%3B$(PrebuiltPackagesPath)</EnvironmentExternalRestoreSources>
  </PropertyGroup>

  <ItemGroup>
    <ExtraPackageVersionPropsPackageInfo
      Include="
        Microsoft.AspNetCore.All;
        Microsoft.AspNetCore.App;
        Microsoft.NET.Sdk.Razor"
      Version="2.1.0" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="cli-migrate" />
    <RepositoryReference Include="clicommandlineparser" />
    <RepositoryReference Include="core-setup" />
    <RepositoryReference Include="corefx" />
    <RepositoryReference Include="msbuild" />
    <RepositoryReference Include="nuget-client" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="sdk" />
    <RepositoryReference Include="standard" />
    <RepositoryReference Include="templating" />
    <RepositoryReference Include="xliff-tasks" />
  </ItemGroup>

  <ItemGroup>
    <!-- Pass multiple restore sources as environment: avoid the shell seeing ';' in an Exec. -->
    <EnvironmentVariables Include="ExternalRestoreSources=$(EnvironmentExternalRestoreSources)" />

    <!--
      Exclude AspNetCore Runtime as an environment variable to ensure the entire build knows. As a
      parameter, it is lost during the restore call.
    -->
    <EnvironmentVariables Include="IncludeAspNetCoreRuntime=false" />

    <!-- Produce stable versions for RTM only.  When https://github.com/dotnet/source-build/issues/550
         is fixed we will be able to determine this automatically.  -->
    <EnvironmentVariables Include="DropSuffix=true"
                          Condition="'$(UseStableVersions)' == 'true'" />
  </ItemGroup>

  <!-- Inject the ProdConFeed into NuGet.config to pick up AspNetCore packages.
       See https://github.com/dotnet/source-build/issues/561
  -->
  <Target Name="AddProdConFeed" BeforeTargets="Build">
    <PropertyGroup>
      <ProdConBlobFeedUrl>$([System.IO.File]::ReadAllText('$(ProdConFeedPath)').Trim())</ProdConBlobFeedUrl>

      <NugetConfigTargetsFile>$(ProjectDirectory)build\NugetConfigFile.targets</NugetConfigTargetsFile>
      <ReplacementEndMark>&lt;/ItemGroup&gt;</ReplacementEndMark>
      <InsertItemLine>&lt;NugetConfigPrivateFeeds Include="$(ProdConBlobFeedUrl)" /&gt;$(ReplacementEndMark)</InsertItemLine>

      <NugetConfigTargetsContents>$([System.IO.File]::ReadAllText('$(NugetConfigTargetsFile)'))</NugetConfigTargetsContents>
    </PropertyGroup>

    <WriteLinesToFile File="$(NugetConfigTargetsFile)"
                      Lines="$(NugetConfigTargetsContents.Replace('$(ReplacementEndMark)', '$(InsertItemLine)'))"
                      Condition="! $(NugetConfigTargetsContents.Contains('$(InsertItemLine)'))"
                      Overwrite="true" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
