<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />
  <PropertyGroup>
    <BuildCommandArgs>--stage0 $(DotNetCliToolDir)</BuildCommandArgs>

    <!--
      Setting NETCoreAppMaximumVersion to a high version so that the sdk doesn't complain if we're restoring/publishing for a higher version than the sdk.
      See https://github.com/dotnet/sdk/issues/1512#issuecomment-377082883
    -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:NETCoreAppMaximumVersion=99.9</BuildCommandArgs>

    <!-- Consume the source-built Core-Setup. This line must be removed to source-build CLI without source-building Core-Setup first. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:CoreSetupBlobRootUrl=file:%2F%2F$(LocalBlobStorageRoot)</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /p:SkipBuildingInstallers=true</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeNuGetPackageArchive=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeAdditionalSharedFrameworks=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:UsePortableLinuxSharedFramework=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeSharedFrameworksForBackwardsCompatibilityTests=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeAspNetCoreRuntime=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeMSBuildSdkResolver=false</BuildCommandArgs>

    <BuildCommandArgs Condition="'$(OS)' == 'Windows_NT'">$(BuildCommandArgs) '/p:CLITargets=\&quot;\&quot;\&quot;Prepare;Compile;Package\&quot;\&quot;\&quot;'</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(OS)' != 'Windows_NT'">$(BuildCommandArgs) '/p:CLITargets=&quot;Prepare;Compile;Package&quot;'</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /v:detailed</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <PackagesOutput>$(ProjectDirectory)bin/2/linux-x64/packages/</PackagesOutput>
    <TarBallOutput>$(PackagesOutput)</TarBallOutput>

    <RepoApiImplemented>false</RepoApiImplemented>
    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>
    <DependencyVersionInputRepoApiImplemented>true</DependencyVersionInputRepoApiImplemented>
  </PropertyGroup>

  <ItemGroup>
    <RepositoryReference Include="application-insights" />
    <!--RepositoryReference Include="cli-migrate" /-->
    <RepositoryReference Include="clicommandlineparser" />
    <RepositoryReference Include="core-setup" />
    <RepositoryReference Include="fsharp" />
    <RepositoryReference Include="javascriptservices" />
    <!--RepositoryReference Include="msbuild" /-->
    <RepositoryReference Include="netcorecli-fsc" />
    <!--RepositoryReference Include="newtonsoft-json" /-->
    <RepositoryReference Include="nuget-client" />
    <RepositoryReference Include="roslyn" />
    <!--RepositoryReference Include="sdk" /-->
    <!--RepositoryReference Include="templating" /-->
    <RepositoryReference Include="vstest" />
    <RepositoryReference Include="websdk" />
    <RepositoryReference Include="xliff-tasks" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="GitInfoCommitCount=$(GitCommitCount)" />
    <EnvironmentVariables Include="GitInfoCommitHash=$(GitCommitHash)" />

    <!--
      Disable bundled tools until we can figure out:

      Unable to find package dotnet-dev-certs.
      Unable to find package dotnet-ef.
      Unable to find package dotnet-sql-cache.
      Unable to find package dotnet-user-secrets.
      Unable to find package dotnet-watch.
    -->
    <EnvironmentVariables Include="CLIBUILD_SKIP_BUNDLEDDOTNETTOOLS=true" />
  </ItemGroup>

  <Target Name="CopyTarBall" AfterTargets="CopyPackage">
    <ItemGroup>
      <CliTarBalls Include="$(TarBallOutput)*$(TarBallExtension)" />
    </ItemGroup>

    <Copy SourceFiles="@(CliTarBalls)"
          DestinationFolder="$(SourceBuiltTarBallPath)"
          Condition="'@(CliTarBalls)'!=''" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
