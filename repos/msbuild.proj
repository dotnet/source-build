<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredHash>d31fdbf016616835b237d2846f3f1535560bb2d5</PreferredHash>
  </PropertyGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <PropertyGroup>
    <OfficialBuildId>20190629.1</OfficialBuildId>

    <PackagesOutput>$(ProjectDirectory)/artifacts/packages/$(Configuration)/Shipping</PackagesOutput>

    <OutputVersionArgs>$(OutputVersionArgs) /p:DisableNerdbankVersioning=true</OutputVersionArgs>

    <BuildCommandArgs>--build --publish --pack</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DotNetBuildFromSource=true</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DotNetCoreSdkDir=$(DotNetCliToolDir)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) --configuration $(Configuration)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) --projects $(ProjectDirectory)MSBuild.SourceBuild.sln</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(FlagParameterPrefix)nodereuse $(ArcadeFalseBoolBuildArg)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(OutputVersionArgs)</BuildCommandArgs>

    <!-- all repos that build with arcade currently have a warning about including RestoreSources twice -->
    <BuildCommandArgs>$(BuildCommandArgs) --warnAsError false</BuildCommandArgs>

    <LogVerbosityOptOut>true</LogVerbosityOptOut>
    <BuildCommandArgs>$(BuildCommandArgs) -v $(LogVerbosity)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -bl</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <!-- NuGet SDK resolver only checks nuget.config files. https://github.com/Microsoft/msbuild/issues/2914 -->
    <NuGetConfigFile>$(ProjectDirectory)/NuGet.config</NuGetConfigFile>

    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>
    <RepoApiImplemented>false</RepoApiImplemented>
    <!--
      MSBuild is part of ProdCon, but that branch doesn't build from source yet.
    <OrchestratedManifestBuildName>Microsoft/msbuild</OrchestratedManifestBuildName>
    -->
    <OrchestratedManifestBuildName>N/A</OrchestratedManifestBuildName>

    <GlobalJsonFile>$(ProjectDirectory)global.json</GlobalJsonFile>
  </PropertyGroup>

  <ItemGroup>
    <UseSourceBuiltSdkOverride Include="@(ArcadeSdkOverride)" />
    <UseSourceBuiltSdkOverride Include="@(CentralVersionsSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="roslyn" />
  </ItemGroup>

  <!--
    Begin workaround: https://github.com/dotnet/source-build/issues/933

    The CentralPackageVersions SDK isn't actually source-built. We get it as a text-only prebuilt,
    but the NuGet resolver seems flaky so we're using our resolver instead. We only have access to
    the nupkg ahead of time when building a tarball, so only enable this workaround then.
  -->
  <ItemGroup Condition="'$(OfflineBuild)' == 'true'">
    <CentralPackageVersionsSdkOverride Include="Microsoft.Build.CentralPackageVersions" Group="CENTRAL_PACKAGE_VERSIONS" />
    <UseSourceBuiltSdkOverride Include="@(CentralPackageVersionsSdkOverride)" />
  </ItemGroup>

  <Target Name="ExtractCentralPackageVersionsSdkPackage"
          BeforeTargets="SetSourceBuiltSdkOverrides"
          Condition="'$(OfflineBuild)' == 'true'">
    <ItemGroup>
      <_CentralVersionsToolPackage
        Include="$(ReferencePackagesDir)%(CentralPackageVersionsSdkOverride.Identity)*.nupkg"
        Id="%(CentralPackageVersionsSdkOverride.Identity)" />
    </ItemGroup>

    <PropertyGroup>
      <CentralVersionsSdkDir>$(ToolPackageExtractDir)%(_CentralVersionsToolPackage.Id)/</CentralVersionsSdkDir>
    </PropertyGroup>

    <Message Importance="High" Text="Setting up SDK package for UseSourceBuiltSdkOverride: %(_CentralVersionsToolPackage.Filename)" />

    <ZipFileExtractToDirectory
      SourceArchive="@(_CentralVersionsToolPackage)"
      DestinationDirectory="$(CentralVersionsSdkDir)"
      OverwriteDestination="true" />
  </Target>
  <!--
    End workaround: https://github.com/dotnet/source-build/issues/933
  -->

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
