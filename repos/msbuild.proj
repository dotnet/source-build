<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <ShippingPackagesOutput>$(ProjectDirectory)/artifacts/packages/$(Configuration)/Shipping</ShippingPackagesOutput>
    <NonShippingPackagesOutput>$(ProjectDirectory)/artifacts/packages/$(Configuration)/NonShipping</NonShippingPackagesOutput>

    <OutputVersionArgs>$(OutputVersionArgs) /p:DisableNerdbankVersioning=true</OutputVersionArgs>

    <BuildCommandArgs>--build --publish --pack</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DotNetBuildFromSource=true</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DotNetCoreSdkDir=$(DotNetCliToolDir)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) --configuration $(Configuration)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) --projects $(ProjectDirectory)MSBuild.SourceBuild.sln</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(FlagParameterPrefix)nodereuse $(ArcadeFalseBoolBuildArg)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) $(OutputVersionArgs)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DotNetPackageVersionPropsPath=$(PackageVersionPropsPath)</BuildCommandArgs>

    <!-- all repos that build with arcade currently have a warning about including RestoreSources twice -->
    <BuildCommandArgs>$(BuildCommandArgs) --warnAsError false</BuildCommandArgs>

    <LogVerbosityOptOut>true</LogVerbosityOptOut>
    <BuildCommandArgs>$(BuildCommandArgs) -v $(LogVerbosity)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -bl</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -ci</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <!-- NuGet SDK resolver only checks nuget.config files. https://github.com/Microsoft/msbuild/issues/2914 -->
    <NuGetConfigFile>$(ProjectDirectory)/NuGet.config</NuGetConfigFile>

    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>
    <RepoApiImplemented>false</RepoApiImplemented>

    <GlobalJsonFile>$(ProjectDirectory)global.json</GlobalJsonFile>

    <EnvironmentRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentRestoreSources)%3B$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://api.nuget.org/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-core/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/nuget-build/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/roslyn/api/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnet.myget.org/F/roslyn-tools/api/v3/index.json</EnvironmentRestoreSources>
  </PropertyGroup>

  <ItemGroup>
    <UseSourceBuiltSdkOverride Include="@(ArcadeSdkOverride)" />
    <UseSourceBuiltSdkOverride Include="@(CentralVersionsSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="corefx" />
    <RepositoryReference Include="roslyn" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="RestoreSources=$(EnvironmentRestoreSources)" />
  </ItemGroup>

  <Target Name="SetOutputList" AfterTargets="Package" BeforeTargets="GatherBuiltPackages">
    <ItemGroup>
      <PackagesOutputList Include="$(ShippingPackagesOutput)" />
      <PackagesOutputList Include="$(NonShippingPackagesOutput)" />
    </ItemGroup>
  </Target>

  <!--
    Begin workaround: https://github.com/dotnet/source-build/issues/933

    The CentralPackageVersions SDK isn't actually source-built. We get it as a text-only prebuilt,
    but the NuGet resolver seems flaky so we're using our resolver instead. We only have access to
    the nupkg ahead of time when building a tarball, so only enable this workaround then.
  -->
  <ItemGroup Condition="'$(OfflineBuild)' == 'true'">
    <CentralPackageVersionsSdkOverride Include="Microsoft.Build.CentralPackageVersions" Group="CENTRAL_PACKAGE_VERSIONS" />
    <UseSourceBuiltSdkOverride Include="@(CentralPackageVersionsSdkOverride)" />
  </ItemGroup>

  <Target Name="ExtractCentralPackageVersionsSdkPackage"
          BeforeTargets="SetSourceBuiltSdkOverrides"
          Condition="'$(OfflineBuild)' == 'true'">
    <ItemGroup>
      <_CentralVersionsToolPackage
        Include="$(ReferencePackagesDir)%(CentralPackageVersionsSdkOverride.Identity)*.nupkg"
        Id="%(CentralPackageVersionsSdkOverride.Identity)" />
    </ItemGroup>

    <PropertyGroup>
      <CentralVersionsSdkDir>$(ToolPackageExtractDir)%(_CentralVersionsToolPackage.Id)/</CentralVersionsSdkDir>
    </PropertyGroup>

    <Message Importance="High" Text="Setting up SDK package for UseSourceBuiltSdkOverride: %(_CentralVersionsToolPackage.Filename)" />

    <ZipFileExtractToDirectory
      SourceArchive="@(_CentralVersionsToolPackage)"
      DestinationDirectory="$(CentralVersionsSdkDir)"
      OverwriteDestination="true" />
  </Target>
  <!--
    End workaround: https://github.com/dotnet/source-build/issues/933
  -->

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
