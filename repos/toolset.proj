<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredHash>bb3ce585b563e3c6e647923b30e07308dca0fd19</PreferredHash>
  </PropertyGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <PropertyGroup>
    <OfficialBuildId>20190607.4</OfficialBuildId>
    <GitCommitCount>10920</GitCommitCount>

    <BuildCommandArgs>--pack --ci</BuildCommandArgs>
    <BuildCommandArgs Condition="'$(TargetOS)' == 'Linux'">$(BuildCommandArgs) /p:Rid=$(TargetRid)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) -c $(Configuration)</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:DOTNET_INSTALL_DIR=$(DotNet3CliToolDir)</BuildCommandArgs>

    <!-- Consume the source-built Core-Setup. This line must be removed to source-build CLI without source-building Core-Setup first. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:CoreSetupBlobRootUrl=file:%2F%2F$(LocalBlobStorageRoot)</BuildCommandArgs>

    <!-- Pass in package version props using the Product Construction (ProdCon) API. -->
    <BuildCommandArgs>$(BuildCommandArgs) /p:PB_PackageVersionPropsUrl=file:%2F%2F$(PackageVersionPropsPath)</BuildCommandArgs>

    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeNuGetPackageArchive=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:UsePortableLinuxSharedFramework=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeSharedFrameworksForBackwardsCompatibilityTests=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:EnableSourceLink=false</BuildCommandArgs>
    <BuildCommandArgs>$(BuildCommandArgs) /p:IncludeMSBuildSdkResolver=false</BuildCommandArgs>

    <LogVerbosityOptOut>true</LogVerbosityOptOut>
    <BuildCommandArgs>$(BuildCommandArgs) -v $(LogVerbosity)</BuildCommandArgs>

    <BuildCommand>$(ProjectDirectory)/build$(ShellExtension) $(BuildCommandArgs)</BuildCommand>

    <PackageOutputRid Condition="'$(TargetOS)' == 'Windows_NT'">win-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(TargetOS)' == 'OSX'">osx-x64</PackageOutputRid>
    <PackageOutputRid Condition="'$(PackageOutputRid)' == ''">$(TargetRid)</PackageOutputRid>
    <ToolsetZipOutputDir>$(ProjectDirectory)artifacts/packages/Release/NonShipping/</ToolsetZipOutputDir>

    <RepoApiImplemented>false</RepoApiImplemented>
    <SourceOverrideRepoApiImplemented>true</SourceOverrideRepoApiImplemented>
    <DependencyVersionInputRepoApiImplemented>true</DependencyVersionInputRepoApiImplemented>

    <EnvironmentExternalRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentExternalRestoreSources>
    <EnvironmentExternalRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentExternalRestoreSources)%3B$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</EnvironmentExternalRestoreSources>

    <OrchestratedManifestBuildName>N/A</OrchestratedManifestBuildName>
    <!-- This project builds zips, not NuGet packages. -->
    <SkipEnsurePackagesCreated>true</SkipEnsurePackagesCreated>
    <NuGetConfigFile>$(ProjectDirectory)/NuGet.config</NuGetConfigFile>
    <GlobalJsonFile>$(ProjectDirectory)global.json</GlobalJsonFile>
  </PropertyGroup>

  <ItemGroup>
    <UseSourceBuiltSdkOverride Include="@(ArcadeSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="GitCommitCount=$(GitCommitCount)" />
    <EnvironmentVariables Include="GitInfoCommitHash=$(PreferredHash)" />

    <!-- Pass multiple restore sources as environment: avoid the shell seeing ';' in an Exec. -->
    <EnvironmentVariables Include="ExternalRestoreSources=$(EnvironmentExternalRestoreSources)" />

    <!-- Produce stable versions for RTM only.  When https://github.com/dotnet/source-build/issues/550
                  is fixed we will be able to determine this automatically.  -->
    <EnvironmentVariables Include="DropSuffix=true"
                          Condition="'$(UseStableVersions)' == 'true'" />

    <EnvironmentVariables Include="CLIBUILD_SKIP_TESTS=true" />

    <!-- reset SDK location variables to use 3.0 SDK override -->
    <EnvironmentVariables Remove="DOTNET_TOOL_DIR=$(DotNetCliToolDir)" />
    <EnvironmentVariables Remove="DotNetCoreSdkDir=$(DotNetCliToolDir)" />
    <EnvironmentVariables Remove="DotNetRoot=$(DotNetCliToolDir)" />
    <EnvironmentVariables Remove="_InitializeDotNetCli=$(DotNetCliToolDir)" />

    <EnvironmentVariables Include="DOTNET_TOOL_DIR=$(DotNet3CliToolDir)" />
    <EnvironmentVariables Include="DotNetCoreSdkDir=$(DotNet3CliToolDir)" />
    <EnvironmentVariables Include="DotNetRoot=$(DotNet3CliToolDir)" />
    <EnvironmentVariables Include="_InitializeDotNetCli=$(DotNet3CliToolDir)" />
  </ItemGroup>

  <ItemGroup>
    <!-- placeholder - the real dependency here is on AspNetCore-Tooling but we don't build that yet -->
    <RepositoryReference Include="aspnet-extensions" />
    <RepositoryReference Include="cli" />
    <RepositoryReference Include="fsharp" />
    <RepositoryReference Include="netcorecli-fsc" />
    <RepositoryReference Include="newtonsoft-json" />
    <RepositoryReference Include="newtonsoft-json901" />
    <RepositoryReference Include="vstest" />
    <RepositoryReference Include="websdk" />
  </ItemGroup>

  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="PublishToolsetBinaries" />

  <!-- Need to "publish" the tarballs for cli, until cli respects the assets blob -->
  <Target Name="PublishBinaries" AfterTargets="Build">
    <ItemGroup>
      <ToolsetZips Include="$(ToolsetZipOutputDir)dotnet-*.zip" />
    </ItemGroup>
    <Message Importance="High" Text="Publishing @(ToolsetZips) from $(ToolsetZipOutputDir) to $(LocalBlobStorageRoot)Toolset/{version}/" />
    <PublishToolsetBinaries Binaries="@(ToolsetZips)"
                            DestinationFolderTemplate="$(SourceBuiltToolsetDir){version}/">
      <Output TaskParameter="PublishedVersion" PropertyName="PublishedVersion" />
    </PublishToolsetBinaries>
    <Message Text="Published toolset binaries version $(PublishedVersion)" Importance="High" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
