<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="AddRidToRuntimeJson" />
  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="PublishCoreSetupBinaries" />

<!--- Portable / TargetRid Overrides-->
<PropertyGroup>
    <!-- OSX core-setup build always uses the portable RID, so override it -->
    <OverridePortableBuild>$(PortableBuild)</OverridePortableBuild>
    <OverridePortableBuild Condition="'$(TargetOS)' == 'OSX' OR '$(TargetOS)' == 'Windows_NT' OR '$(TargetOS)' == 'FreeBSD'">true</OverridePortableBuild>

    <OverrideTargetRid>$(TargetRid)</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'OSX'">osx-x64</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'FreeBSD'">freebsd-x64</OverrideTargetRid>
    <OverrideTargetRid Condition="'$(TargetOS)' == 'Windows_NT'">win-x64</OverrideTargetRid>
</PropertyGroup>

<!-- Build arguments -->
<PropertyGroup>
    <!-- common arguments -->
    <GlobalJsonFile>$(ProjectDirectory)global.json</GlobalJsonFile>
    <LogVerbosityOptOut>true</LogVerbosityOptOut>

    <!-- coreclr -->
    <CoreClrBuildArguments>$(Platform) -$(Configuration) skiptests</CoreClrBuildArguments>
    <CoreClrBuildArguments Condition="'$(OS)' != 'Windows_NT'">$(CoreClrBuildArguments) -ignoreWarnings</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) -skipmanagedtools</CoreClrBuildArguments>
    <CoreClrBuildArguments Condition="'$(OS)' != 'Windows_NT'">$(CoreClrBuildArguments) -skiprestore</CoreClrBuildArguments>
    <CoreClrBuildArguments Condition="'$(SkipDisablePgo)' != 'true'">$(CoreClrBuildArguments) -nopgooptimize</CoreClrBuildArguments>
    <CoreClrBuildArguments Condition="'$(OS)' != 'Windows_NT'">$(CoreClrBuildArguments) msbuildonunsupportedplatform</CoreClrBuildArguments>
    <!-- coreclr build fails when passing this flag after this PR https://github.com/dotnet/coreclr/pull/26082 -->
    <!-- <CoreClrBuildArguments Condition="'$(UseSystemLibraries)' == 'true' AND '$(OS)' != 'Windows_NT'">$(CoreClrBuildArguments) cmakeargs -DCLR_CMAKE_USE_SYSTEM_LIBUNWIND=TRUE</CoreClrBuildArguments> -->
    <CoreClrBuildArguments Condition="$(Platform.Contains('arm')) AND '$(BuildArchitecture)' != 'arm64' ">$(CoreClrBuildArguments) skipnuget cross -skiprestore cmakeargs -DFEATURE_GDBJIT=TRUE</CoreClrBuildArguments>
    <CoreClrBuildArguments Condition="'$(TargetOS)' == 'FreeBSD'">$(CoreClrBuildArguments) -clang6.0 /p:PortableBuild=true</CoreClrBuildArguments>

    <!-- Portable builds only apply to Linux - Mac and Windows are both always portable.
         Additionally, Linux builds are portable by default and only have a switch to turn it off -->
    <CoreClrBuildArguments Condition="'$(TargetOS)' == 'Linux' and '$(PortableBuild)' == 'false'">$(CoreClrBuildArguments) -PortableBuild=false</CoreClrBuildArguments>

    <CoreClrBuildArguments>$(CoreClrBuildArguments) /bl</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:Configuration=$(Configuration)</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:RuntimeConfiguration=$(Configuration)</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:CoreCLRConfiguration=$(Configuration)</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:ILLinkTrimAssembly=false</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:CheckCDefines=false</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:PackagesDir=$(PackagesDir)</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:ContinuousIntegrationBuild=true</CoreClrBuildArguments>
    <CoreClrBuildArguments>$(CoreClrBuildArguments) /p:VersionSuffix="$(PreReleaseVersionLabel)"</CoreClrBuildArguments>
    <CoreClrBuildArguments Condition="'$(OS)' != 'Windows_NT'">$(CoreClrBuildArguments) -warnAsError:0</CoreClrBuildArguments>

    <!-- libraries -->

    <LibrariesBuildArguments>$(FlagParameterPrefix)configuration $(Configuration)</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(RunTests)' != 'true' AND '$(PrepForTests)' != 'true'">$(LibrariesBuildArguments) $(FlagParameterPrefix)restore $(FlagParameterPrefix)build $(FlagParameterPrefix)pack /p:SkipTests=true</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(PrepForTests)' == 'true'">$(LibrariesBuildArguments) $(FlagParameterPrefix)restore $(FlagParameterPrefix)build /p:IncludeTestUtils=true</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(RunTests)' == 'true'">$(LibrariesBuildArguments)  $(FlagParameterPrefix)restore $(FlagParameterPrefix)buildtests $(FlagParameterPrefix)test /p:IncludeTestUtils=true</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(RunTests)' == 'true' AND '$(DotNetRunningInDocker)' == '1' AND '$(TargetOS)' == 'Linux'">$(LibrariesBuildArguments) /p:TestRspFile=$(TestExclusionsDir)corefx/linux.docker.rsp</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:ArchGroup=$(Platform)</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:ConfigurationGroup=$(Configuration)</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:PackageRid=$(OverrideTargetRid)</LibrariesBuildArguments>
    <!-- CoreFX parses this argument for a OS "family", i.e. rhel.7 to rhel.  OSX doesn't have the extra identifier so we need to include the
         "-x64" so CoreFX can find a character to break on (digits, hyphen, period).  -->
    <LibrariesBuildArguments Condition="'$(TargetOS)' != 'OSX'">$(LibrariesBuildArguments) /p:RuntimeOS=$(OverrideTargetRid.Substring(0, $(OverrideTargetRid.IndexOf("-"))))</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(TargetOS)' == 'OSX'">$(LibrariesBuildArguments) /p:RuntimeOS=$(OverrideTargetRid)</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:PortableBuild=$(OverridePortableBuild)</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:ILAsmToolPath=$(ToolPackageExtractDir)coreclr-tools/</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:ILLinkTrimAssembly=false</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:BuildAllPackages=true</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:VersionSuffix="$(PreReleaseVersionLabel)"</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) /p:BuiltSdkPackageOverride=""</LibrariesBuildArguments> <!-- Clear PackageOverride for Libraries - it only applies to coreclr -->
    <LibrariesBuildArguments Condition="'$(OfflineBuild)' != 'true'">$(LibrariesBuildArguments) /p:DotNetSourceBuildIntermediatePath=$(GeneratedSourcePathOnline)</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(OfflineBuild)' == 'true'">$(LibrariesBuildArguments) /p:DotNetSourceBuildIntermediatePath=$(GeneratedSourcePathOffline)</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(OfflineBuild)' == 'true'">$(LibrariesBuildArguments) /p:MicrosoftNETCoreDotNetHostPackageVersion=$(DOTNET_HOST_BOOTSTRAP_VERSION)</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(OfflineBuild)' == 'true'">$(LibrariesBuildArguments) /p:MicrosoftNETCoreDotNetHostPolicyPackageVersion=$(DOTNET_HOST_BOOTSTRAP_VERSION)</LibrariesBuildArguments>

    <LibrariesBuildArguments>$(LibrariesBuildArguments) $(FlagParameterPrefix)verbosity $(LogVerbosity)</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) $(FlagParameterPrefix)binaryLog</LibrariesBuildArguments>
    <LibrariesBuildArguments>$(LibrariesBuildArguments) $(FlagParameterPrefix)ci</LibrariesBuildArguments>
    <LibrariesBuildArguments Condition="'$(OS)' != 'Windows_NT'">$(LibrariesBuildArguments) -warnAsError:0</LibrariesBuildArguments>

    <!--
      Disable node reuse (in the new/Arcade way) to avoid errors like this:

      error MSB4062: The "Microsoft.CodeAnalysis.BuildTasks.Csc" task could not be loaded from the
      assembly .../build/../tools/Microsoft.Build.Tasks.CodeAnalysis.dll. Assembly with same name
      is already loaded
    -->
    <LibrariesBuildArguments>$(LibrariesBuildArguments) $(FlagParameterPrefix)nodereuse $(ArcadeFalseBoolBuildArg) $(FlagParameterPrefix)ci</LibrariesBuildArguments>

    <!-- installer -->

    <InstallerBuildArguments>$(FlagParameterPrefix)restore $(FlagParameterPrefix)build</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) $(FlagParameterPrefix)configuration $(Configuration)</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) $(FlagParameterPrefix)ci</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:PortableBuild=$(OverridePortableBuild)</InstallerBuildArguments>
    <InstallerBuildArguments Condition="$(Platform.Contains('arm')) AND '$(BuildArchitecture)' != 'arm64'">$(InstallerBuildArguments) /p:TargetArchitecture=$(Platform) /p:DisableCrossgen=true /p:CrossBuild=true</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:BuildDebPackage=false</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:BuildAllPackages=true</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:RestoreAllBuildRids=false</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:OutputRid=$(OverrideTargetRid)</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:DotNetOutputBlobFeedDir=$(SourceBuiltBlobFeedDir)</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) /p:BuiltSdkPackageOverride=""</InstallerBuildArguments> <!-- Clear PackageOverride for Installer - it only applies to coreclr -->
    <InstallerBuildArguments>$(InstallerBuildArguments) /m:1</InstallerBuildArguments>

    <InstallerBuildArguments>$(InstallerBuildArguments) $(FlagParameterPrefix)verbosity $(LogVerbosity)</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) $(FlagParameterPrefix)binaryLog</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) $(FlagParameterPrefix)warnAsError $(ArcadeFalseBoolBuildArg)</InstallerBuildArguments>
    <InstallerBuildArguments>$(InstallerBuildArguments) $(FlagParameterPrefix)nodereuse $(ArcadeFalseBoolBuildArg)</InstallerBuildArguments>

    <BuildArguments>--configuration $(Configuration)</BuildArguments>
    <BuildArguments>$(BuildArguments) --binaryLog</BuildArguments>

    <BuildCommand>$(ProjectDirectory)build-source-build$(ShellExtension) $(BuildArguments) --coreclr-args $(CoreClrBuildArguments) --libraries-args $(LibrariesBuildArguments) --installer-args $(InstallerBuildArguments)</BuildCommand>
    <BuildCommand Condition="$(Platform.Contains('arm')) AND '$(BuildArchitecture)' != 'arm64'">$(ArmEnvironmentVariables) $(BuildCommand)</BuildCommand>
    <CleanCommand>$(ProjectDirectory)/clean$(ShellExtension)</CleanCommand>
</PropertyGroup>

<!-- Output / source-build flags -->
<PropertyGroup>
    <OutputPlacementRepoApiImplemented>false</OutputPlacementRepoApiImplemented>
    <PackagesOutput>$(ProjectDirectory)bin/Product/$(TargetOS).$(Platform).$(Configuration)/.nuget/pkg</PackagesOutput>
    <ShippingPackagesOutput>$(ProjectDirectory)artifacts/packages/$(Configuration)/Shipping/</ShippingPackagesOutput>
    <NonShippingPackagesOutput>$(ProjectDirectory)artifacts/packages/$(Configuration)/NonShipping/</NonShippingPackagesOutput>
    <NuGetConfigFile>$(ProjectDirectory)/NuGet.config</NuGetConfigFile>
    <DependencyVersionInputRepoApiImplemented>true</DependencyVersionInputRepoApiImplemented>
    
    <!-- core-setup does not destabilize for intermediate servicing builds -->
    <IsStable>true</IsStable>
</PropertyGroup>

<!-- Environment Restore Sources -->
<PropertyGroup>
    <EnvironmentRestoreSources>$(SourceBuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources>$(EnvironmentRestoreSources)%3B$(ShippingPackagesOutput)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources>$(EnvironmentRestoreSources)%3B$(NonShippingPackagesOutput)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' == 'true'">$(EnvironmentRestoreSources)%3B$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://api.nuget.org/v3/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-core/index.json</EnvironmentRestoreSources>
    <EnvironmentRestoreSources Condition="'$(OfflineBuild)' != 'true'">$(EnvironmentRestoreSources)%3Bhttps://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json</EnvironmentRestoreSources>

</PropertyGroup>

<!-- Repository References -->
<ItemGroup>
    <RepositoryReference Include="linker" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="standard" />
    <RepositoryReference Include="newtonsoft-json" />
    <RepositoryReference Include="newtonsoft-json901" />
</ItemGroup>

<!-- SDK Overrides -->
<ItemGroup>
    <UseSourceBuiltSdkOverride Include="@(ArcadeSdkOverride)" />
    <UseSourceBuiltSdkOverride Include="@(ArcadeConfigurationOverride)" />
    <UseSourceBuiltSdkOverride Include="@(ArcadeCoreFxTestingOverride)" />
    <UseSourceBuiltSdkOverride Include="@(ArcadePackagingOverride)" />
    <!--UseSourceBuiltSdkOverride Include="@(ILSdkOverride)" />
    <BuiltSdkPackageOverride Include="@(ILSdkOverride)" /-->
</ItemGroup>

<!-- Environment Variables -->
<ItemGroup>
    <EnvironmentVariables Include="RestoreSources=$(EnvironmentRestoreSources)" />
    <EnvironmentVariables Include="BuildInParallel=false" />
</ItemGroup>

<!-- Additional Targets -->

  <Target Name="CopyTools"
          AfterTargets="Package">
    <PropertyGroup>
      <CoreClrDestinationDir>$(ToolPackageExtractDir)coreclr-tools</CoreClrDestinationDir>
      <AssemblyExtension Condition="'$(TargetOS)' == 'Linux'">so</AssemblyExtension>
      <AssemblyExtension Condition="'$(TargetOS)' == 'FreeBSD'">so</AssemblyExtension>
      <AssemblyExtension Condition="'$(TargetOS)' == 'OSX'">dylib</AssemblyExtension>
      <AssemblyExtension Condition="'$(AssemblyExtension)' == ''">please define AssemblyExtension for $(TargetOS)</AssemblyExtension>
    </PropertyGroup>

    <ItemGroup>
      <CoreClrTools Include="$(ProjectDirectory)artifacts/bin/coreclr/$(TargetOS).$(Platform).$(Configuration)/ilasm" />
      <CoreClrTools Include="$(ProjectDirectory)artifacts/bin/coreclr/$(TargetOS).$(Platform).$(Configuration)/ildasm" />
      <CoreClrTools Include="$(ProjectDirectory)artifacts/bin/coreclr/$(TargetOS).$(Platform).$(Configuration)/libcoreclr.$(AssemblyExtension)" />
      <CoreClrTools Include="$(ProjectDirectory)artifacts/bin/coreclr/$(TargetOS).$(Platform).$(Configuration)/System.Private.CoreLib.dll" />
    </ItemGroup>

    <Message Importance="High" Text="Copying source-built ILAsm and ILDasm '@(CoreClrTools)' to '$(CoreClrDestinationDir)'" />

    <Copy SourceFiles="@(CoreClrTools)" DestinationFolder="$(CoreClrDestinationDir)" />
  </Target>

  <Target Name="SetOutputList" AfterTargets="Package" BeforeTargets="GatherBuiltPackages">
    <ItemGroup>
      <PackagesOutputList Include="$(ShippingPackagesOutput)" />
      <PackagesOutputList Include="$(NonShippingPackagesOutput)" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateRuntimeGraph"
          BeforeTargets="Build"
          Condition="'$(_IsBootstrapping)' == 'true'">
    <PropertyGroup>
      <RuntimeJsonFile>$(ProjectDirectory)pkg/Microsoft.NETCore.Platforms/runtime.json</RuntimeJsonFile>
    </PropertyGroup>

    <Message Importance="High" Text="Adding rid, $(TargetRid), to $(RuntimeJsonFile)" />
    <AddRidToRuntimeJson RuntimeJson="$(RuntimeJsonFile)"
                         Rid="$(TargetRid)-$(Platform)" />
  </Target>

  <!-- Need to "publish" the tarballs for cli, until cli respects the assets blob -->
  <Target Name="PublishBinaries" AfterTargets="Package">
    <ItemGroup>
      <CoreSetupTarballs Include="$(SourceBuiltAssetsDir)dotnet-runtime-*$(TarBallExtension)" />
      <CoreSetupTarballs Include="$(SourceBuiltAssetsDir)dotnet-hostfxr-*$(TarBallExtension)" />
    </ItemGroup>
    <PublishCoreSetupBinaries Binaries="@(CoreSetupTarballs)"
                              DestinationFolderTemplate="$(SourceBuiltRuntimeDir){version}/" >
      <Output TaskParameter="PublishedVersion" PropertyName="PublishedVersion" />
    </PublishCoreSetupBinaries>
    <Message Text="Published core-setup binaries version $(PublishedVersion)" Importance="High" />
  </Target>

  <Target Name="CopyBinariesToBinFolder" AfterTargets="PublishBinaries">
    <ItemGroup>
      <_builtRuntimePackages Include="$(SourceBuiltAssetsDir)*.symbols.nupkg" />
      <_builtRuntimePackages>
        <TransformedFileName>$([System.String]::Copy('%(FileName)').Replace('symbols', 'nupkg'))</TransformedFileName>
      </_builtRuntimePackages>
      <BinariesToCopy Include="$(SourceBuiltAssetsDir)*.*" Exclude="$(SourceBuiltAssetsDir)*.nupkg;$(SourceBuiltAssetsDir)*.requires_nupkg_signing" />
      <BinariesToCopy Include="@(_builtRuntimePackages->'$(SourceBuiltPackagesPath)%(TransformedFileName)')" />
    </ItemGroup>

    <Copy SourceFiles="@(BinariesToCopy)"
          DestinationFolder="$(OutputPath)runtime"
          Condition="'@(BinariesToCopy)'!=''" />
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
