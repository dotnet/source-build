<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <!-- Don't try to import the target info file when building this project -->
    <GeneratingStaticPropertiesFile>true</GeneratingStaticPropertiesFile>
  </PropertyGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <Import Project="$(OfflineAllRepoPropsFile)" Condition="Exists('$(OfflineAllRepoPropsFile)')" />

  <UsingTask AssemblyFile="$(SourceBuildTasksAssembly)" TaskName="GetHostInformation" />
  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="WriteSourceRepoProperties" />
  <UsingTask AssemblyFile="$(LeakDetectionTasksAssembly)" TaskName="MarkAndCatalogPackages" />
  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="NuGetPack" />
  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="ZipFileExtractToDirectory" />

  <ItemGroup>
    <BuildTasksTarget Include="Restore;Build;InstallResolver" />
  </ItemGroup>

  <PropertyGroup Condition="'$(OfflineBuild)' == 'true'">
    <BuildTasksOfflineSources>$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)</BuildTasksOfflineSources>
  </PropertyGroup>

  <Target Name="Build">
    <CallTarget Targets="UnpackTarballs;BuildXPlatTasks;AcquireDarc;FetchSources;WriteSourceLinkMetadata;BuildTasks;ExtractToolPackage;WriteDynamicPropsToStaticPropsFiles;GenerateRootFs;ApplyPatches;PoisonPrebuiltPackages" />
  </Target>

  <Target Name="PrepareOfflineLocalTools"
          DependsOnTargets="
            ExtractToolPackage;
            BuildXPlatTasks" />

  <Target Name="Clean">
    <Delete Files="$(CompletedSemaphorePath)*.*" />
  </Target>

  <Target Name="UnpackTarballs" 
          Condition="'$(OfflineBuild)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)" 
          Outputs="$(CompletedSemaphorePath)UnpackTarballs.complete" >
    <MakeDir Directories="$(ReferencePackagesDir)"  Condition="'$(CustomReferencePackagesPath)' == ''" />
    <Exec Command="tar -xzf $(ExternalTarballsDir)$(ReferencePackagesTarballName).*.tar.gz"
          WorkingDirectory="$(ReferencePackagesDir)"
          Condition="'$(CustomReferencePackagesPath)' == ''" />

    <MakeDir Directories="$(PrebuiltSourceBuiltPackagesPath)" Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' == ''" />
    <Exec Command="tar -xzf $(ExternalTarballsDir)$(SourceBuiltArtifactsTarballName).*.tar.gz"
          WorkingDirectory="$(PrebuiltSourceBuiltPackagesPath)"
          Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' == ''" />

    <Copy SourceFiles="$(PrebuiltSourceBuiltPackagesPath)PackageVersions.props" DestinationFiles="$(IntermediatePath)SourceBuiltPackageVersions.props" />

    <WriteLinesToFile File="$(CompletedSemaphorePath)UnpackTarballs.complete" Overwrite="true" />
  </Target>

  <Target Name="BuildTasks" 
          Inputs="$(MSBuildProjectFullPath)" 
          Outputs="$(CompletedSemaphorePath)BuildTasks.complete" >
    <!--
      __ToolInitPhase ensures MSBuild reruns all the targets for each BuildTasksTarget. If we don't
      alter the global properties, we get a "hit" in MSBuild's target cache, and the props/targets
      generated by Restore may not be reevaluated, causing missing netstandard2.0 references.
    -->
    <MSBuild
      Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks\Microsoft.DotNet.SourceBuild.Tasks.csproj"
      Targets="%(BuildTasksTarget.Identity)"
      SkipNonexistentTargets="true"
      Properties="
        RestoreSources=$(BuildTasksOfflineSources);
        __ToolInitPhase=%(BuildTasksTarget.Identity)" />
 
    <WriteLinesToFile File="$(CompletedSemaphorePath)BuildTasks.complete" Overwrite="true" />
  </Target>

  <Target Name="BuildXPlatTasks" 
          DependsOnTargets="UnpackTarballs"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)BuildXPlatTasks.complete">
    <MSBuild
      Projects="
        tasks\Microsoft.DotNet.SourceBuild.Tasks.XPlat\Microsoft.DotNet.SourceBuild.Tasks.XPlat.csproj;
        tasks\SourceBuild.MSBuildSdkResolver\SourceBuild.MSBuildSdkResolver.csproj"
      Targets="%(BuildTasksTarget.Identity)"
      SkipNonexistentTargets="true"
      Properties="
        RestoreSources=$(BuildTasksOfflineSources);
        __ToolInitPhase=%(BuildTasksTarget.Identity)" />

    <WriteLinesToFile File="$(CompletedSemaphorePath)BuildXPlatTasks.complete" Overwrite="true" />
  </Target>

  <Target Name="GetRepoProjects">
    <ItemGroup>
      <RepoProjects Include="$(ProjectDir)repos/*.proj" />
    </ItemGroup>
  </Target>

  <Target Name="ApplyPatches" DependsOnTargets="GetRepoProjects">
    <Message Text="Applying patches only" />
    <MSBuild Projects="@(RepoProjects)" Targets="ApplyPatches" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="GenerateRootFs" Condition="'$(OS)' != 'Windows_NT'">
     <Exec Condition="$(Platform.Contains('arm')) AND '$(Platform)' != 'armel' AND '$(BuildArchitecture)' != 'arm64'" Command="$(ArmEnvironmentVariables) $(ProjectDir)cross/build-rootfs.sh" />
     <Exec Condition="'$(Platform)' == 'armel'" Command="$(ArmEnvironmentVariables) $(ProjectDir)cross/armel/tizen-build-rootfs.sh" />
  </Target>

  <Target Name="BuildReferenceAssemblies" 
          Condition="'$(OfflineBuild)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)BuildReferenceAssemblies.complete">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building reference-only assemblies." />
    <ItemGroup>
      <IlSource Include="$(ReferencePackagesSourceDir)**/*.il" />
      <ReferenceAssemblyDirectories Include ="$(ReferencePackagesStagingDir)/**/*.nuspec" />
    </ItemGroup>

    <MakeDir Condition="'%(IlSource.RecursiveDir)' != ''" Directories="$(ReferencePackagesStagingDir)%(IlSource.RecursiveDir)" />
    <Exec Condition="'%(IlSource.Identity)' != ''" Command="$(IlasmPath) %(IlSource.Identity) -dll -quiet -nologo -output=$(ReferencePackagesStagingDir)%(IlSource.RecursiveDir)%(IlSource.Filename).dll" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done building reference-only assemblies." />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Packing reference-only packages." />
    <NugetPack Condition="'%(ReferenceAssemblyDirectories.Identity)' != ''" 
               Nuspecs="%(ReferenceAssemblyDirectories.Identity)"
               OutputDirectory="$(ReferencePackagesDir)"
               ExcludeEmptyDirectories="false"
               CreateSymbolPackage="false" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done packing reference-only packages." />
        
    <WriteLinesToFile File="$(CompletedSemaphorePath)BuildReferenceAssemblies.complete" Overwrite="true" />
  </Target>


  <Target Name="ExtractToolPackage"
          DependsOnTargets="UnpackTarballs;BuildXPlatTasks"
          Condition="'$(OfflineBuild)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)ExtractToolPackage.complete">
    <ZipFileExtractToDirectory SourceArchive="$(PrebuiltSourceBuiltPackagesPath)Microsoft.DotNet.Arcade.Sdk.$(ARCADE_BOOTSTRAP_VERSION).nupkg"
                               DestinationDirectory="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/"
                               OverwriteDestination="true" />
        
    <WriteLinesToFile File="$(CompletedSemaphorePath)ExtractToolPackage.complete" Overwrite="true" />
  </Target>

  <Target Name="WriteDynamicPropsToStaticPropsFiles" 
          DependsOnTargets="BuildTasks"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)WriteDynamicPropsToStaticPropsFiles.complete">
    <GetHostInformation Condition="'$(TargetRid)' == ''">
      <Output PropertyName="TargetRid" TaskParameter="Rid" />
    </GetHostInformation>

    <GetHostInformation Condition="'$(TargetOS)' == ''">
      <Output PropertyName="TargetOS" TaskParameter="OSName" />
    </GetHostInformation>

    <PropertyGroup Condition="'$(PortableBuild)' == 'true'">
      <TargetRid Condition="'$(TargetOS)' == 'FreeBSD'">freebsd-$(Platform)</TargetRid>
      <TargetRid Condition="'$(TargetOS)' == 'OSX'">osx-$(Platform)</TargetRid>
      <TargetRid Condition="'$(TargetOS)' == 'Linux'">linux-$(Platform)</TargetRid>
      <TargetRid Condition="'$(TargetOS)' == 'Windows_NT'">win-$(Platform)</TargetRid>
    </PropertyGroup>

    <PropertyGroup>
      <TargetInfoPropsContent>&lt;Project ToolsVersion=&quot;15.0&quot;&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetRid&gt;$(TargetRid)&lt;/TargetRid&gt;
    &lt;TargetOS&gt;$(TargetOS)&lt;/TargetOS&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;</TargetInfoPropsContent>
    </PropertyGroup>
    <MakeDir Directories="$(IntermediatePath)" Condition="!Exists('$(IntermediatePath)')" />
    <WriteLinesToFile File="$(TargetInfoProps)" Lines="$(TargetInfoPropsContent)" Overwrite="True" />
        
    <WriteLinesToFile File="$(CompletedSemaphorePath)WriteDynamicPropsToStaticPropsFiles.complete" Overwrite="true" />
  </Target>

  <Target Name="PoisonPrebuiltPackages" 
          Condition="'$(EnablePoison)' == 'true' and '$(OfflineBuild)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)PoisonPrebuiltPackages.complete">
    <ItemGroup>
      <PrebuiltPackages Include="$(PrebuiltPackagesPath)**/*.nupkg" />
      <PrebuiltSourceBuiltPackages Include="$(PrebuiltSourceBuiltPackagesPath)**/*.nupkg" />
    </ItemGroup>
    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltPackages)" CatalogOutputFilePath="$(PoisonReportDataFile)" MarkerFileName="$(PoisonMarkerFile)" />
    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltSourceBuiltPackages)" CatalogOutputFilePath="$(SourceBuiltPoisonReportDataFile)" MarkerFileName="$(SourceBuiltPoisonMarkerFile)" />
        
    <WriteLinesToFile File="$(CompletedSemaphorePath)PoisonPrebuiltPackages.complete" Overwrite="true" />
  </Target>

  <Target Name="FetchSources"
          Condition="'$(OfflineBuild)' != 'true'"
          DependsOnTargets="GetCommonDarcCloneCommand"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)FetchSources.complete">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Getting source code for repos in Version.Details.xml." />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Running Darc command: '$(DarcCloneCommand)' from working dir $(ProjectDir)" />
    <Exec Command="$(DarcCloneCommand) --repos-folder $(DarcCloneReposFolder)" WorkingDirectory="$(ProjectDir)" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done getting source code for repos in Version.Details.xml." />

    <WriteLinesToFile File="$(CompletedSemaphorePath)FetchSources.complete" Overwrite="true" />
  </Target>

  <Target Name="WriteSourceLinkMetadata" 
          Condition="'$(OfflineBuild)' != 'true'" 
          DependsOnTargets="AcquireDarc;FetchSources"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)WriteSourceLinkMetadata.complete">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Writing out SourceLink metadata." />
    <WriteSourceRepoProperties
       VersionDetailsFile="$(RepositoryEngineeringDir)Version.Details.xml"
       ClonedSubmoduleGitRootDirectory="$(ClonedSubmoduleGitRootDirectory)"
       ClonedSubmoduleDirectory="$(ClonedSubmoduleDirectory)"
       SourceBuildMetadataDir="$(GitInfoOutputDir)" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done writing out SourceLink metadata." />

    <WriteLinesToFile File="$(CompletedSemaphorePath)WriteSourceLinkMetadata.complete" Overwrite="true" />
  </Target>

</Project>
