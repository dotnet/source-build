<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Don't try to import the target info file when building this project -->
    <GeneratingStaticPropertiesFile>true</GeneratingStaticPropertiesFile>
  </PropertyGroup>
  <Import Project="..\dir.props" />
  <Import Project="$(ToolsDir)Packaging.targets" />
  <Import Project="$(ToolsDir)IL.targets" />

  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="GetHostInformation" />
  <UsingTask AssemblyFile="$(LeakDetectionTasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.dll" TaskName="MarkAndCatalogPackages" />
  <UsingTask AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll" TaskName="ZipFileExtractToDirectory" />
  

  <PropertyGroup>
    <BuildCompetedSuccessSemaphore>$(BaseIntermediatePath)/init-build-proj.complete</BuildCompetedSuccessSemaphore>
    <SourceBuildMSBuildSdkResolverPath>$(DotNetSdkResolversDir)SourceBuild.MSBuildSdkResolver\SourceBuild.MSBuildSdkResolver.dll</SourceBuildMSBuildSdkResolverPath>
    <SourceBuildMSBuildSdk3ResolverPath>$(DotNetSdk3ResolversDir)SourceBuild.MSBuildSdkResolver\SourceBuild.MSBuildSdkResolver.dll</SourceBuildMSBuildSdk3ResolverPath>
  </PropertyGroup>

  <Target Name="Build"
    Inputs="$(TargetInfoProps)"
    Outputs="$(BuildCompetedSuccessSemaphore)"
    >
    <CallTarget Targets="BuildDarc;FetchSources;BuildTasks;ExtractToolPackage;InstallSourceBuildSdkResolver;WriteDynamicPropsToStaticPropsFiles;GenerateRootFs;CreateAllGitInfoProps;ApplyPatches;PoisonPrebuiltPackages" />
    <Touch Files="$(BuildCompetedSuccessSemaphore)" AlwaysCreate="true" />
  </Target>

  <Target Name="Clean">
    <Delete Files="$(BuildCompetedSuccessSemaphore)" />
  </Target>

  <Target Name="InstallSourceBuildSdkResolver">
    <Copy SourceFiles="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll"
          DestinationFiles="$(SourceBuildMSBuildSdkResolverPath)" />
    <Copy SourceFiles="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll"
          DestinationFiles="$(SourceBuildMSBuildSdk3ResolverPath)" />
  </Target>

  <Target Name="BuildTasks">
    <PropertyGroup Condition="'$(OfflineBuild)' == 'true'">
      <OfflineSources>&quot;$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)&quot;</OfflineSources>
    </PropertyGroup>
    <Exec Command="$(DotNetCliToolDir)dotnet build tasks\Microsoft.DotNet.SourceBuild.Tasks\Microsoft.DotNet.SourceBuild.Tasks.csproj /p:RestoreSources=$(OfflineSources) /p:OfflineBuild=$(OfflineBuild)" />
  </Target>

  <Target Name="GetRepoProjects">
    <ItemGroup>
      <RepoProjects Include="$(ProjectDir)repos/*.proj" />
    </ItemGroup>
  </Target>

  <Target Name="CreateAllGitInfoProps">
    <!--
      Create the files in a new process to avoid MSBuild remembering the static properties/items.
      Using the MSBuild task here would cause, for example, GIT_COMMIT EnvironmentVariables items to
      be created that don't contain any commit, and they would stick around until the real build.
    -->
    <Exec Command="$(DotNetCliToolDir)dotnet msbuild /v:$(LogVerbosity) /nologo $(MSBuildThisFileFullPath) /t:CreateGitInfoProps" />
  </Target>

  <Target Name="CreateGitInfoProps" DependsOnTargets="GetRepoProjects">
    <MSBuild Projects="@(RepoProjects)" Targets="CreateGitInfoProps" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="ApplyPatches" DependsOnTargets="GetRepoProjects">
    <Message Text="Applying patches only" />
    <MSBuild Projects="@(RepoProjects)" Targets="ApplyPatches" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="GenerateRootFs" Condition="'$(OS)' != 'Windows_NT'">
     <Exec Condition="$(Platform.Contains('arm')) AND '$(Platform)' != 'armel'" Command="$(ArmEnvironmentVariables) $(ProjectDir)cross/build-rootfs.sh" />
     <Exec Condition="'$(Platform)' == 'armel'" Command="$(ArmEnvironmentVariables) $(ProjectDir)cross/armel/tizen-build-rootfs.sh" />
  </Target>

  <Target Name="BuildReferenceAssemblies" Condition="'$(OfflineBuild)' == 'true'">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building reference-only assemblies." />
    <ItemGroup>
      <IlSource Include="$(ReferencePackagesSourceDir)**/*.il" />
      <ReferenceAssemblyDirectories Include ="$(ReferencePackagesStagingDir)/**/*.nuspec" />
    </ItemGroup>

    <MakeDir Directories="$(ReferencePackagesStagingDir)%(IlSource.RecursiveDir)" />
    <Exec Command="$(IlasmToolPath) %(IlSource.Identity) -dll -quiet -nologo -output=$(ReferencePackagesStagingDir)%(IlSource.RecursiveDir)%(IlSource.Filename).dll" />

    <!-- Temporary workaround to copy dlls that can't be round-tripped 
         They just get copied from the source to the package staging area
    -->
    <ItemGroup>
      <DllsInSource Include="$(ReferencePackagesSourceDir)**/*.dll" />
    </ItemGroup>
    <Copy SourceFiles="%(DllsInSource.Identity)" DestinationFiles="$(ReferencePackagesStagingDir)%(DllsInSource.RecursiveDir)%(DllsInSource.Filename).dll" />

    <!-- End Temporary workaround -->
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done building reference-only assemblies." />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Packing reference-only packages." />
    <NugetPack Nuspecs="%(ReferenceAssemblyDirectories.Identity)"
               OutputDirectory="$(ReferencePackagesDir)"
               ExcludeEmptyDirectories="false"
               CreateSymbolPackage="false" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done packing reference-only packages." />
  </Target>


  <Target Name="ExtractToolPackage"
          DependsOnTargets="BuildTasks"
          Condition="'$(OfflineBuild)' == 'true'">
    <ZipFileExtractToDirectory SourceArchive="$(PrebuiltSourceBuiltPackagesPath)Microsoft.DotNet.Arcade.Sdk.1.0.0-dev.nupkg"
                               DestinationDirectory="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/1.0.0-dev/"
                               OverwriteDestination="true" />
  </Target>

  <Target Name="WriteDynamicPropsToStaticPropsFiles">
    <GetHostInformation Condition="'$(TargetRid)' == ''">
      <Output PropertyName="TargetRid" TaskParameter="Rid" />
    </GetHostInformation>

    <GetHostInformation Condition="'$(TargetOS)' == ''">
      <Output PropertyName="TargetOS" TaskParameter="OSName" />
    </GetHostInformation>

    <PropertyGroup Condition="'$(PortableBuild)' == 'true'">
      <TargetRid Condition="'$(TargetOS)' == 'OSX'">osx-$(Platform)</TargetRid>
      <TargetRid Condition="'$(TargetOS)' == 'Linux'">linux-$(Platform)</TargetRid>
      <TargetRid Condition="'$(TargetOS)' == 'Windows_NT'">win-$(Platform)</TargetRid>
    </PropertyGroup>

    <PropertyGroup>
      <TargetInfoPropsContent>&lt;Project ToolsVersion=&quot;15.0&quot;&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetRid&gt;$(TargetRid)&lt;/TargetRid&gt;
    &lt;TargetOS&gt;$(TargetOS)&lt;/TargetOS&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;</TargetInfoPropsContent>
    </PropertyGroup>
    <MakeDir Directories="$(IntermediatePath)" Condition="!Exists('$(IntermediatePath)')" />
    <WriteLinesToFile File="$(TargetInfoProps)" Lines="$(TargetInfoPropsContent)" Overwrite="True" />
  </Target>

  <Target Name="PoisonPrebuiltPackages" Condition="'$(EnablePoison)' == 'true' and '$(OfflineBuild)' == 'true'">
    <ItemGroup>
      <PrebuiltPackages Include="$(PrebuiltPackagesPath)**/*.nupkg" />
      <PrebuiltSourceBuiltPackages Include="$(PrebuiltSourceBuiltPackagesPath)**/*.nupkg" />
    </ItemGroup>
    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltPackages)" CatalogOutputFilePath="$(PoisonReportDataFile)" MarkerFileName="$(PoisonMarkerFile)" />
    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltSourceBuiltPackages)" CatalogOutputFilePath="$(SourceBuiltPoisonReportDataFile)" MarkerFileName="$(SourceBuiltPoisonMarkerFile)" />
  </Target>

  <Target Name="BuildDarc" Condition="'$(OfflineBuild)' != 'true'">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Building Darc." />
    <Exec Command="$(DotNetCliToolDir)dotnet build -c Release $(MSBuildProjectDirectory)/arcade-services/src/Microsoft.DotNet.Darc/src/Darc/Microsoft.DotNet.Darc.csproj" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done building Darc." />
  </Target>

  <Target Name="FetchSources" Condition="'$(OfflineBuild)' != 'true'" DependsOnTargets="BuildDarc">
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Getting source code for repos in Version.Details.xml." />
    <PropertyGroup>
      <DarcCloneArguments>clone</DarcCloneArguments>
      <DarcCloneArguments>$(DarcCloneArguments) --repos-folder $(ClonedSubmoduleDirectory)</DarcCloneArguments>
      <DarcCloneArguments>$(DarcCloneArguments) --git-dir-folder $(ClonedSubmoduleGitRootDirectory)</DarcCloneArguments>
      <DarcCloneArguments>$(DarcCloneArguments) --include-toolset</DarcCloneArguments>
      <IgnoredRepos/>
      <IgnoredRepos>$(IgnoredRepos);https://dev.azure.com/dnceng/internal/_git/dotnet-optimization</IgnoredRepos>
      <IgnoredRepos>$(IgnoredRepos);https://dev.azure.com/devdiv/DevDiv/_git/DotNet-Trusted</IgnoredRepos>
      <IgnoredRepos>$(IgnoredRepos);https://devdiv.visualstudio.com/DevDiv/_git/DotNet-Trusted</IgnoredRepos>
      <IgnoredRepos>$(IgnoredRepos);https://dnceng@dev.azure.com/dnceng/internal/_git/dotnet-optimization</IgnoredRepos>
      <IgnoredRepos>$(IgnoredRepos);https://dev.azure.com/dnceng/internal/_git/dotnet-core-setup</IgnoredRepos>
      <DarcCloneArguments>$(DarcCloneArguments) --ignore-repos "$(IgnoredRepos)"</DarcCloneArguments>
      <!-- required so Darc doesn't throw an error for missing auth -->
      <DarcCloneArguments>$(DarcCloneArguments) --azdev-pat bogus</DarcCloneArguments>
      <DarcCloneArguments>$(DarcCloneArguments) --github-pat bogus</DarcCloneArguments>
      <!-- depth 0 should be sufficient for us since we explictly declare all our dependencies -->
      <DarcCloneArguments>$(DarcCloneArguments) --depth 0</DarcCloneArguments>
      <DarcCloneArguments>$(DarcCloneArguments) --debug</DarcCloneArguments>
      <DarcCloneCommand>$(DotNetCliToolDir)dotnet $(DarcDll) $(DarcCloneArguments)</DarcCloneCommand>
    </PropertyGroup>
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Running Darc command: '$(DarcCloneCommand)'" />
    <Exec Command="$(DarcCloneCommand)" WorkingDirectory="$(ProjectDir)" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done getting source code for repos in Version.Details.xml." />
  </Target>

</Project>
