parameters:
- name: dotnetStagingPipelineResource
  type: string
- name: dotnetMajorVersion
  type: string
- name: isPreviewRelease
  type: boolean
- name: releaseName
  type: string
- name: releaseBranchName
  type: string
- name: createReleaseAnnouncement
  type: boolean
  default: true
- name: announcementGist
  type: string
- name: submitReleasePR
  type: boolean
  default: true
- name: createGitHubRelease
  type: string
- name: isDryRun
  type: boolean
  default: false

stages:
- stage: Release
  displayName: Release
  dependsOn:
  - PreRelease
  - ReleaseApproval

  variables:
  - template: ../variables/pipelines.yml

  - group: DotNet-Source-Build-Bot-Secrets
  - group: DotNet-DotNetCli-Storage
  - group: DotNetBot-GitHub-AllBranches

  - name: releasePrRepo
    value: dotnet/installer
  - name: vmrPublicRepo
    value: dotnet/dotnet
  - name: vmrPublicUrl
    value: https://github.com/$(vmrPublicRepo)
  - name: releasePrForkRepo
    value: dotnet-sb-bot/installer
  - name: announcementOrg
    value: dotnet
  - name: announcementRepo
    value: source-build
  - name: storageAccountName
    value: dotnetcli
  - name: blobContainerName
    value: source-built-artifacts
  - name: artifactsUploadBaseFilePath
    ${{ if parameters.isDryRun }}:
      value: testing
    ${{ else }}:
      value: assets
  - name: sdkUploadBaseFilePath
    ${{ if parameters.isDryRun }}:
      value: testing
    ${{ else }}:
      value: sdks
  - name: Codeql.Enabled
    value: true

  - ${{ if eq(parameters.dotnetMajorVersion, '6.0') }}:
    - name: sourceBuildArtifactLeg
      value: Build_Tarball_x64 CentOS7-Offline_Artifacts
    - name: sourceBuiltArtifactsFileName
      value: Private.SourceBuilt.Artifacts.$(sdkVersion).centos.7-x64.tar.gz
    - name: sdkArtifactFileName
      value: dotnet-sdk-$(sdkVersion)-*.tar.gz

  - ${{ if eq(parameters.dotnetMajorVersion, '7.0') }}:
    - name: sourceBuildArtifactLeg
      value: Build_Tarball_x64 CentOSStream8-Offline_Artifacts
    - name: sourceBuiltArtifactsFileName
      value: Private.SourceBuilt.Artifacts.$(sdkVersion).centos.8-x64.tar.gz
    - name: sdkArtifactFileName
      value: dotnet-sdk-$(sdkVersion)-*.tar.gz

  - ${{ if eq(parameters.dotnetMajorVersion, '8.0') }}:
    - name: sourceBuildArtifactLeg
      value: CentOSStream8_Offline_MsftSdk_x64_Artifacts
    - name: sourceBuiltArtifactsFileName
      value: Private.SourceBuilt.Artifacts.*.centos.8-x64.tar.gz
    - name: sdkArtifactFileName
      value: dotnet-sdk-*.tar.gz

  # GitHub release is skipped for 6.0/7.0 and dry runs
  - name: createGitHubRelease
    ${{ if eq(parameters.createGitHubRelease, 'auto') }}:
      ${{ if or(parameters.isDryRun, eq(parameters.dotnetMajorVersion, '6.0'), eq(parameters.dotnetMajorVersion, '7.0')) }}:
        value: skip
      ${{ else }}:
        value: full
    ${{ else }}:
      value: ${{ parameters.createGitHubRelease }}

  # Variables from the Pre-Release stage
  - name: release
    value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.Release'] ]
  - name: sdkVersion
    value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.SdkVersion'] ]
  - name: runtimeVersion
    value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.RuntimeVersion'] ]
  - name: releaseChannel
    value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.ReleaseChannel'] ]
  - name: releaseTag
    value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.ReleaseTag'] ]

  - ${{ if or(eq(parameters.dotnetMajorVersion, '6.0'), eq(parameters.dotnetMajorVersion, '7.0')) }}:
    - name: officialBuildPipelineId
      value: $(INSTALLER_TARBALL_BUILD_CI_PIPELINE_ID)
    - name: officialBuildRunId
      value: $[ stageDependencies.PreRelease.PreRelease.outputs['AssociatedPipelineRuns.InstallerTarballBuildRunId'] ]
  - ${{ else }}:
    - name: officialBuildPipelineId
      value: $(DOTNET_DOTNET_CI_PIPELINE_ID)
    - name: officialBuildRunId
      value: $[ stageDependencies.PreRelease.PreRelease.outputs['AssociatedPipelineRuns.DotnetDotnetRunId'] ]
    - name: dotnetDotnetCommit
      value: $[ stageDependencies.PreRelease.PreRelease.outputs['AssociatedPipelineRuns.DotnetDotnetCommit'] ]

  jobs:
  - job: Release
    displayName: Announcements, PRs & Release
    steps:
    - checkout: self
      path: dotnet-source-build

    - ${{ if and(ne(variables.createGitHubRelease, 'skip'), ne(parameters.dotnetMajorVersion, '6.0'), ne(parameters.dotnetMajorVersion, '7.0')) }}:
      - checkout: dotnet-dotnet
        displayName: Checkout dotnet-dotnet
        path: dotnet-dotnet
        fetchDepth: 0
        fetchTags: true

      - script: |
          set -euo pipefail

          prerelease=''
          if [ "${{ parameters.isPreviewRelease }}" = True ]; then
            prerelease='--prerelease'
          fi

          draft=''
          if [ "${{ variables.createGitHubRelease }}" = draft ]; then
            draft='--draft'
          fi

        git_user=dotnet-bot
        git_email=dotnet-bot@microsoft.com

        git config --global user.name "$git_user"
        git config --global user.email "$git_email"

        vmr_url="https://$git_user:${GH_TOKEN}@github.com/$(vmrPublicRepo)"

        set +e
        if git fetch "$vmr_url" tag "$(releaseTag)" --no-tags; then
          # Tag exists, we need to verify that the correct commit is tagged
          tagged_commit=$(git rev-list -1 "refs/tags/$(releaseTag)")           
          if [[ "$tagged_commit" != "$(dotnetDotnetCommit)" ]]; then
            echo "##vso[task.logissue type=error]The release tag '$(releaseTag)' is linked to a different commit. Expected: '$(dotnetDotnetCommit)'; Actual: '$tagged_commit'"
            echo "##vso[task.logissue type=error]See the tag at $(vmrPublicUrl)/releases/tag/$(releaseTag) for more info."
            exit 1
          fi
        else
          # Tag does not exist, we need to tag the commit and push it
          echo "Pushing release tag to $(vmrPublicRepo)"
          git tag "$(releaseTag)" "$(dotnetDotnetCommit)"
          git push "$vmr_url" "refs/tags/$(releaseTag)"
          if [[ $? != 0 ]]; then
            echo "##vso[task.logissue type=error]Failed to create a GitHub tag for the release"
            exit 1
          fi
        fi
        set -e

          release_json="$(Build.ArtifactStagingDirectory)/release.json"

          echo "{}" \
            | jq '. += { "release": "$(release)" }'                                \
            | jq '. += { "channel": "$(releaseChannel)" }'                         \
            | jq '. += { "tag": "$(releaseTag)" }'                                 \
            | jq '. += { "sdkVersion": "$(sdkVersion)" }'                          \
            | jq '. += { "runtimeVersion": "$(runtimeVersion)" }'                  \
            | jq '. += { "sourceRepository": "$(vmrPublicUrl)" }'                  \
            | jq '. += { "sourceVersion": "$(dotnetDotnetCommit)" }'               \
            > "$release_json"

          echo -e "\n\nGenerated release.json:\n\n"
          cat "$release_json"

          release_notes="$(Build.ArtifactStagingDirectory)/release_notes.md"

          ./create-announcement-draft.sh                   \
            --template "source-build-release-notes.md"     \
            --channel "$(releaseChannel)"                  \
            $prerelease                                    \
            --release "$(release)"                         \
            --release-name "${{ parameters.releaseName }}" \
            --runtime-version "$(runtimeVersion)"          \
            --sdk-version "$(sdkVersion)"                  \
            --tag "$(releaseTag)"                          \
            --source-version "$(dotnetDotnetCommit)"       \
            > "$release_notes"

          echo -e "\n\nGenerated release notes:\n\n"
          cat "$release_notes"

          echo -e "\n\nCreating GitHub release..."

          set +e
          result=$(gh release create "$(releaseTag)" \
            "$release_json#Release manifest"         \
            --repo $vmrPublicRepo                    \
            --title "${{ parameters.releaseName }}"  \
            --notes-file "$release_notes"            \
            --verify-tag                             \
            $prerelease                              \
            $draft \
            2>&1)

          if [ $? -ne 0 ]; then
            echo "##vso[task.logissue type=error]Failed to create the GitHub release: $result"
            exit 1
          fi

        displayName: Create GitHub release
        workingDirectory: $(Agent.BuildDirectory)/dotnet-source-build/eng
        env:
          GH_TOKEN: $(BotAccount-dotnet-bot-repo-PAT)

    # Skip release tag validation for draft releases as the tag won't be immediately visible until the draft is published
    - ${{ if or(eq(variables.createGitHubRelease, 'skip'), eq(variables.createGitHubRelease, 'full'), eq(parameters.dotnetMajorVersion, '6.0'), eq(parameters.dotnetMajorVersion, '7.0')) }}:
      - script: |
          set -euo pipefail

          if [[ "$(releaseChannel)" == '6.0' || "$(releaseChannel)" == '7.0' ]]; then
            repo='installer'
          else
            repo='dotnet'
          fi

          # Checks for all matching tags (there can be more, e.g. 7.0.100 will match 7.0.100-preview.1.21102.12)
          query="{ repository(owner: \"dotnet\", name: \"$repo\") { refs(refPrefix: \"refs/tags/\", last: 100, query: \"$(releaseTag)\") { nodes { name }}}}"
          tags=$(gh api graphql -f query="$query" --template '{{.data.repository.refs.nodes}}')

          # Find the exact match
          if echo "$tags" | grep -q "map\[name:$(releaseTag)\]"; then
            echo "Tag $(releaseTag) exists: https://github.com/dotnet/$repo/releases/tag/$(releaseTag)"
            exit 0
          fi

          if [ ${{ parameters.isDryRun }} = True ]; then
            echo "##vso[task.logissue type=warning]Tag $(releaseTag) does not exist in dotnet/$repo (possibly expected)"
            exit 0
          fi

          echo "##vso[task.logissue type=error]Tag $(releaseTag) does not exist in dotnet/$repo"
          exit 1
        displayName: Validate release tag
        env:
          GH_TOKEN: $(BotAccount-dotnet-sb-bot-pat)

    - ${{ if parameters.createReleaseAnnouncement }}:
      - script: |
          set -euo pipefail

          prerelease=''
          if [ ${{ parameters.isPreviewRelease }} = True ]; then
            prerelease='--prerelease'
          fi

          dry_run=''
          if [ ${{ parameters.isDryRun }} = True ]; then
            dry_run='--dry-run'
          fi

          set -x
          ./submit-announcement.sh                                   \
            --announcement-org dotnet                                \
            --announcement-repo source-build                         \
            --announcement-gist "${{ parameters.announcementGist }}" \
            --channel "$(releaseChannel)"                            \
            $dry_run                                                 \
            $prerelease                                              \
            --release "$(release)"                                   \
            --release-name "${{ parameters.releaseName }}"           \
            --runtime-version "$(runtimeVersion)"                    \
            --sdk-version "$(sdkVersion)"                            \
            --tag "$(releaseTag)"

        displayName: Submit announcement discussion
        workingDirectory: $(Agent.BuildDirectory)/dotnet-source-build/eng
        env:
          GH_TOKEN: $(BotAccount-dotnet-sb-bot-pat)

    - ${{ if parameters.submitReleasePR }}:
      - task: DownloadPipelineArtifact@2
        name: DownloadSourceBuiltArtifactsStep
        displayName: Download Source-Built Artifacts
        inputs:
          source: specific
          project: $(AZDO_PROJECT)
          pipeline: $(officialBuildPipelineId)
          runVersion: specific
          runId: $(officialBuildRunId)
          artifact: $(sourceBuildArtifactLeg)
          patterns: $(sourceBuiltArtifactsFileName)

      - task: DownloadPipelineArtifact@2
        name: DownloadSourceBuiltSDKStep
        displayName: Download Source-Built SDK
        inputs:
          source: specific
          project: $(AZDO_PROJECT)
          pipeline: $(officialBuildPipelineId)
          runVersion: specific
          runId: $(officialBuildRunId)
          artifact: $(sourceBuildArtifactLeg)
          patterns: $(sdkArtifactFileName)

      - template: ../steps/upload-to-blob-storage.yml
        parameters:
          file: $(PIPELINE.WORKSPACE)/$(sourceBuiltArtifactsFileName)
          accountName: $(storageAccountName)
          containerName: $(blobContainerName)
          uploadPath: $(artifactsUploadBaseFilePath)
          azureStorageKey: $(dotnetcli-storage-key)
          contentType: $(TARBALL_BLOB_CONTENT_TYPE)

      - template: ../steps/upload-to-blob-storage.yml
        parameters:
          file: $(PIPELINE.WORKSPACE)/$(sdkArtifactFileName)
          accountName: $(storageAccountName)
          containerName: $(blobContainerName)
          uploadPath: $(sdkUploadBaseFilePath)
          azureStorageKey: $(dotnetcli-storage-key)
          contentType: $(TARBALL_BLOB_CONTENT_TYPE)

      - script: |
          set -euo pipefail

          export RELEASE_DATE=$(date +"%B %Y") # e.g. "March 2022"
          export RUNTIME_VERSION="$(runtimeVersion)"
          export SDK_VERSION="$(sdkVersion)"

          template="$(envsubst < source-build-release-pr.md)"
          # Get the line in the template that is prefixed with "Title:" and remove the prefix
          title=$(echo "$template" | grep "^Title:" | cut -d " " -f2-)
          # Get the inverse of the above selection
          body=$(echo "$template" | grep -v "^Title:")

          echo "TargetRepo: $(releasePrRepo)"
          echo "ForkRepo: $(releasePrForkRepo)"
          echo "SdkVersion: $(sdkVersion)"
          echo "Title: $title"
          echo "Body: $body"

          extraArgs=()
          if [[ "$(releaseChannel)" == '6.0' || "$(releaseChannel)" == '7.0' ]]; then
            extraArgs+=("--globalJson" "src/SourceBuild/tarball/content/global.json")
            extraArgs+=("--versionsProps" "eng/Versions.props")
          fi

          if [ "${{ parameters.isPreviewRelease }}" = True ]; then
            target_branch='main'
          else
            target_branch="${{ parameters.releaseBranchName }}"
            if [[ "$target_branch" == internal/* ]]; then
              target_branch="${target_branch#internal/}"
            fi
          fi
          
          # We get the actual final version from the file names - it differs as it comes from the VMR build, not from the official installer one
          resolvedSourceBuiltArtifactsFileName=$(basename $(PIPELINE.WORKSPACE)/$(sourceBuiltArtifactsFileName))
          resolvedSdkArtifactFileName=$(basename $(PIPELINE.WORKSPACE)/$(sdkArtifactFileName))
          
          if [ "${{ parameters.isDryRun }}" = True ]; then
            echo "Doing a dry run, not submitting PR. Would have called:"
            echo "./submit-source-build-release-pr.sh"
            echo "  --setupGitAuth"
            echo "  --targetRepo $(releasePrRepo)"
            echo "  --forkRepo $(releasePrForkRepo)"
            echo "  --sdkVersion $(sdkVersion)"
            echo "  --title $title"
            echo "  --body $body"
            echo "  --targetBranch $target_branch"
            echo "  --sdkArtifactFileName $resolvedSdkArtifactFileName"
            echo "  --sourceBuiltArtifactsFileName $resolvedSourceBuiltArtifactsFileName"
            echo "  ${extraArgs[@]}"
          else
            echo "Submitting PR"
            ./submit-source-build-release-pr.sh \
              --setupGitAuth \
              --targetRepo "$(releasePrRepo)" \
              --forkRepo "$(releasePrForkRepo)" \
              --sdkVersion "$(sdkVersion)" \
              --title "$title" \
              --body "$body" \
              --targetBranch "$target_branch" \
              --sdkArtifactFileName "$resolvedSdkArtifactFileName" \
              --sourceBuiltArtifactsFileName "$resolvedSourceBuiltArtifactsFileName" \
              "${extraArgs[@]}"
          fi
        displayName: Submit Release PR
        workingDirectory: $(Agent.BuildDirectory)/dotnet-source-build/eng
        env:
          GH_TOKEN: $(BotAccount-dotnet-sb-bot-pat)
