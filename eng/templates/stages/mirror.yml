parameters:
- name: dotnetMajorVersion
  displayName: Major .NET version being released
  type: string
- name: releaseBranchName
  displayName: Release branch name (e.g. release/8.0.1xx-preview1)
  type: string
- name: useCustomTag
  type: boolean
  default: false
- name: customTag
  type: string
- name: isDryRun
  type: boolean
  default: false

stages:
- stage: Mirror
  displayName: Mirror branch to DSP
  dependsOn:
  - PreRelease
  - MirrorApproval

  jobs:
  - job: Mirror
    displayName: Mirror ${{ parameters.releaseBranchName }}
    variables:
    - group: DotNet-Source-Build-All-Orgs-Source-Access
    - name: RepoDir
      value: vmr
    - name: GitUser
      value: dn-bot
    - name: GitEmail
      value: dn-bot@microsoft.com
    - name: destinationUrl
      value: https://dotnet-security-partners@dev.azure.com/dotnet-security-partners/dotnet/_git/dotnet
    - name: sdkVersion
      value: $[ stageDependencies.PreRelease.PreRelease.outputs['ReadReleaseInfo.SdkVersion'] ]
    - ${{ if or(eq(parameters.dotnetMajorVersion, '6.0'), eq(parameters.dotnetMajorVersion, '7.0')) }}:
      - name: sourceUrl
        value: https://dnceng@dev.azure.com/dnceng/internal/_git/security-partners-dotnet
      - name: sourceVersion
        value: $[ stageDependencies.PreRelease.PreRelease.outputs['AssociatedPipelineRuns.InstallerCommit'] ]
    - ${{ else }}:
      - name: sourceUrl
        value: https://dnceng@dev.azure.com/dnceng/internal/_git/dotnet-dotnet
      - name: sourceVersion
        value: $[ stageDependencies.PreRelease.PreRelease.outputs['AssociatedPipelineRuns.DotnetDotnetCommit'] ]

    steps:
    - checkout: none

    - script: |
        set -euo pipefail

        repo_dir="$(Pipeline.Workspace)/$(RepoDir)"
        git init "$repo_dir"
        cd "$repo_dir"

        echo "Setting up git in $repo_dir repo for ${{ variables.sourceUrl }} -> ${{ variables.destinationUrl }}"

        git config --global user.name '${{ variables.GitUser }}'
        git config --global user.email '${{ variables.GitEmail }}'

        source_url=$(echo '${{ variables.sourceUrl }}' | sed "s,https://.*@,https://${{ variables.GitUser }}:${AZDO_PAT}@,g")
        destination_url=$(echo '${{ variables.destinationUrl }}' | sed "s,https://.*@,https://${{ variables.GitUser }}:${AZDO_PAT}@,g")

        git remote add source "${source_url}"
        git remote add destination "${destination_url}"
      displayName: Initialize repository
      env:
        AZDO_PAT: $(dn-bot-all-orgs-build-rw-code-rw)

    - script: |
        set -euxo pipefail

        branch_name="${{ parameters.releaseBranchName }}"
        if [[ "$branch_name" == internal/* ]]; then
          branch_name="${branch_name#internal/}"
        fi

        echo "Mirroring $branch_name from ${{ variables.sourceUrl }} to ${{ variables.destinationUrl }}"

        if [[ "${{ parameters.dotnetMajorVersion }}" == '6.0' || "${{ parameters.dotnetMajorVersion }}" == '7.0' ]]; then
          # For 6.0 and 7.0 we tag the release branch into which we merged the release PR
          ref_to_tag="$branch_name"
        else
          # For 8.0+ we tag a given VMR commit
          ref_to_tag="$(sourceVersion)"
        fi

        git fetch source "$ref_to_tag"
        git checkout "$ref_to_tag"

        if [ "${{ parameters.useCustomTag }}" = "True" ] ; then
          tag_name="${{ parameters.customTag }}"
          echo "Using custom tag ${tag_name}"
        else
          tag_name="v$(SdkVersion)"
          echo "Using tag ${tag_name}"
        fi

        message=".NET Source-build $(sdkVersion)-SDK"
        git tag "$tag_name" "$ref_to_tag" -m "$message"

        if [ "${{ parameters.isDryRun }}" = "True" ]; then
          set +x
          echo "Doing a dry run, not pushing the tag $tag_name / $ref_to_tag to ${{ variables.destinationUrl }}"
        else
          echo "Pushing tag $tag_name to ${{ variables.destinationUrl }}"
          git push destination "$tag_name"
        fi
      workingDirectory: $(Pipeline.Workspace)/$(RepoDir)
      displayName: Mirror and tag
