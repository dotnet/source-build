parameters:
- name: dotnetStagingPipelineResource
  type: string
  default: ''
- name: getAssociatedPipelineRuns
  type: boolean
  default: false
- name: useSpecificPipelineRunIDs
  type: boolean
  default: false
- name: dotnetInstallerOfficialRunID
  type: string
  default: ''
- name: dotnetInstallerTarballBuildRunID
  type: string
  default: ''
- name: dotnetDotnetRunID
  type: string
  default: ''
- name: releaseBranchName
  type: string
  default: ''
- name: verifyBuildSuccess
  type: boolean

steps:
- download: ${{ parameters.dotnetStagingPipelineResource }}
  artifact: manifests
  patterns: manifest.json
  displayName: Download Release Manifest

- download: ${{ parameters.dotnetStagingPipelineResource }}
  artifact: drop
  patterns: config.json
  displayName: Download Release Config

- script: |
    set -euo pipefail

    manifest_path=$(PIPELINE.WORKSPACE)/dotnet-staging-pipeline-resource/manifests/manifest.json
    config_path=$(PIPELINE.WORKSPACE)/dotnet-staging-pipeline-resource/drop/config.json

    runtime_version="$(jq -r '.Runtime' $config_path)"
    release_channel="$(jq -r '.Channel' $config_path)"

    # Source-build only supports the lowest available feature band.
    # Sort the SDK releases by number and pick the lowest value.
    # We also need to remove the preview label from the version
    sdk_version="$(jq -r '.Sdks | sort_by(. | split(".") | map(sub("-[a-z0-9]+"; "")) | map(tonumber)) | .[0]' $config_path)"

    branch_name="${{ parameters.releaseBranchName }}"
    if [ -z "$branch_name" ]; then
      # For non-preview releases, the branch name can be determined from the SDK version
      # Replace the last two characters in sdk_version with xx
      branch_version=$(echo $sdk_version | sed 's/..$/xx/')
      branch_name="refs/heads/internal/release/${branch_version}"
    fi

    if [[ ! "$branch_name" =~ ^refs/heads/ ]]; then
      branch_name="refs/heads/$branch_name"
    fi

    commit=$(jq -r --arg BRANCH "$branch_name" '.builds[] | select(.repo == "https://dev.azure.com/dnceng/internal/_git/dotnet-installer" or .repo == "https://github.com/dotnet/installer") | select(.branch == $BRANCH) | .commit' $manifest_path)

    if [[ ! $commit ]]; then
      echo "##vso[task.logissue type=error]Installer build on a commit for branch $branch_name not found. Exiting..."
      exit 1
    fi

    echo "Release channel: ${release_channel}"
    echo "Runtime version: ${runtime_version}"
    echo "SDK version: ${sdk_version}"
    echo "Installer commit: ${commit}"

    echo "##vso[task.setvariable variable=SdkVersion]${sdk_version}"
    echo "##vso[task.setvariable variable=RuntimeVersion]${runtime_version}"
    echo "##vso[task.setvariable variable=ReleaseChannel]${release_channel}"
    echo "##vso[task.setvariable variable=InstallerCommit]${commit}"
  name: ReadReleaseInfoStep
  displayName: Read Release Info

- ${{ if eq(parameters.getAssociatedPipelineRuns, true) }}:
  - ${{ if eq(parameters.useSpecificPipelineRunIDs, false) }}:
    - script: |
        set -euo pipefail
        source eng/get-build-info.sh

        if [[ "$(ReleaseChannel)" == "8.0" ]]; then
            get_build_info "$(azDoOrg)" "$(azDoProject)" "$(dotnetDotnetCiPipelineId)" dotnet-dotnet DotnetDotnetRunId "${{ parameters.verifyBuildSuccess }}" "installer-$(InstallerCommit)"
        else
            get_build_info "$(azDoOrg)" "$(azDoProject)" "$(installerOfficialCiPipelineId)" dotnet-installer-official-ci InstallerOfficialRunId "${{ parameters.verifyBuildSuccess }}"
            get_build_info "$(azDoOrg)" "$(azDoProject)" "$(installerTarballBuildCiPipelineId)" dotnet-installer-source-build-tarball-build InstallerTarballBuildRunId "${{ parameters.verifyBuildSuccess }}"
        fi
      name: GetAssociatedPipelineRunsStep
      displayName: Get Associated Pipeline Run IDs
      env:
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

  - ${{ else }}:
    - script: |
        set -euo pipefail
        source eng/get-build-info.sh

        if [[ "$(ReleaseChannel)" == "8.0" ]]; then
          print_build_info dotnet-dotnet DotnetDotnetRunId "$(DotnetDotnetRunId)" "See the build info"
        else
          print_build_info dotnet-installer-official-ci InstallerOfficialRunId "$(InstallerOfficialRunId)" "$(InstallerCommit)"
          print_build_info dotnet-installer-source-build-tarball-build InstallerTarballBuildRunId "$(InstallerTarballBuildRunId)" "N/A"
        fi
      name: SetAssociatedPipelineRunsStep
      displayName: Set Associated Pipeline Run IDs