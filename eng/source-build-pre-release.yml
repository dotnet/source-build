trigger: none
pr: none

pool:
  name: NetCore1ESPool-Svc-Internal
  demands: ImageOverride -equals 1es-ubuntu-2004

resources:
  pipelines:
  - pipeline: dotnet-staging-pipeline-resource
    source: Stage-DotNet

parameters:
- name: useSpecificPipelineRunIDs
  displayName: Use Specific Pipeline Run IDs
  type: boolean
  default: false
- name: dotnetInstallerOfficialRunID
  displayName: dotnet-installer-official-ci run ID
  type: string
  default: '200XXXX'
- name: dotnetInstallerTarballBuildRunID
  displayName: dotnet-installer-source-build-tarball-build run ID
  type: string
  default: '200XXXX'
- name: verifyBuildSuccess
  displayName: Verify that associated pipeline runs succeeded
  type: boolean
  default: true
- name: isDryRun
  displayName: Dry Run
  type: boolean
  default: false

variables:
- template: templates/variables/installer-pipelines.yml
- group: DotNet-MSRC-Storage
- group: DotNet-Source-Build-All-Orgs-Source-Access
- name: storageAccountName
  value: 'dotnetclimsrc'
- name: blobContainerName
  value: 'source-build'
- name: vmrUpstreamUrl
  value: 'https://dnceng@dev.azure.com/dnceng/internal/_git/security-partners-dotnet'
- name: blobContainerUploadBaseFilePath
  ${{ if eq( parameters['isDryRun'], true) }}:
    value: 'Dev'
  ${{ else }}:
    value: 'release'


jobs:
- job: SourceBuildPreRelease
  displayName: Source Build Pre-Release

  steps:
  - template: templates/steps/get-build-info.yml
    parameters:
      dotnetStagingPipelineResource: dotnet-staging-pipeline-resource
      getAssociatedPipelineRuns: true
      useSpecificPipelineRunIDs: ${{ parameters.useSpecificPipelineRunIDs }}
      dotnetInstallerOfficialRunID: ${{ parameters.dotnetInstallerOfficialRunID }}
      dotnetInstallerTarballBuildRunID: ${{ parameters.dotnetInstallerTarballBuildRunID }}
      verifyBuildSuccess: ${{ parameters.verifyBuildSuccess }}

  - task: DownloadPipelineArtifact@2
    name: DownloadSourceTarballStep
    displayName: Download Source Tarball
    inputs:
      source: 'specific'
      artifact: 'BlobArtifacts'
      patterns: 'BlobArtifacts/dotnet-sdk-source-$(SdkVersion).tar.gz'
      project: $(azDoProject)
      pipeline: $(installerOfficialCiPipelineId)
      runVersion: 'specific'
      runId: $(InstallerOfficialRunId)

  - template: templates/steps/upload-to-blob-storage.yml
    parameters:
      file: '$(PIPELINE.WORKSPACE)/dotnet-sdk-source-$(SdkVersion).tar.gz'
      accountName: '$(storageAccountName)'
      containerName: '$(blobContainerName)'
      uploadPath: '$(blobContainerUploadBaseFilePath)/$(ReleaseChannel)/$(RuntimeVersion)-$(SdkVersion)'
      azureStorageKey: '$(dotnetclimsrc-access-key)'
  
  - script: |
      set -euo pipefail
      
      upstream_with_pat=$(echo $(vmrUpstreamUrl) | sed "s,https://.*@,https://dn-bot:${AZDO_PAT}@,g")

      args=()
      args+=(--releaseChannel $(ReleaseChannel))
      args+=(--sdkVersion $(SdkVersion))
      args+=(--upstream ${upstream_with_pat})
      args+=(--tarball $(Pipeline.Workspace)/dotnet-sdk-source-$(SdkVersion).tar.gz)

      if [ ${{ parameters.isDryRun }} = True ]; then
        args+=(--isDryRun)
      fi

      $(Build.SourcesDirectory)/eng/update-vmr.sh "${args[@]}"
    displayName: Update security-partners-dotnet
    env:
      AZDO_PAT: $(dn-bot-all-orgs-build-rw-code-rw)