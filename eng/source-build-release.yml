trigger: none
pr: none

pool:
  name: NetCore1ESPool-Svc-Internal
  demands: ImageOverride -equals 1es-ubuntu-2004

resources:
  pipelines:
  - pipeline: dotnet-staging-pipeline-resource
    source: Stage-DotNet
  repositories:
  - repository: installer
    type: github
    endpoint: dotnet
    name: dotnet/installer

parameters:
  - name: createReleaseAnnouncement
    displayName:  Create Release Announcement
    type: boolean
    default: true
  - name: submitReleasePR
    displayName: Submit Release PR
    type: boolean
    default: true
  - name: useCustomTag
    displayName: Use custom tag?
    type: boolean
    default: false
  - name: customTag
    displayName: Installer custom tag
    type: string
    default: v6.0.XYY-source-build
  - name: useSpecificPipelineRunIDs
    displayName: Use Specific Pipeline Run IDs
    type: boolean
    default: false
  - name: dotnetInstallerOfficialRunID
    displayName: dotnet-installer-official-ci run ID
    type: string
    default: '200XXXX'
  - name: dotnetInstallerTarballBuildRunID
    displayName: dotnet-installer-source-build-tarball-build run ID
    type: string
    default: '200XXXX'
  - name: isDryRun
    displayName: Testing mode (run the pipeline but don't submit PRs or announcements)
    type: boolean
    default: false

variables:
- template: templates/variables/installer-pipelines.yml
- group: DotNet-Source-Build-Bot-Secrets
- group: DotNet-DotNetCli-Storage
- name: announcementOrg
  value: 'dotnet'
- name: announcementRepo
  value: 'source-build'
- name: storageAccountName
  value: 'dotnetcli'
- name: blobContainerName
  value: 'source-built-artifacts'
- name: artifactsUploadBaseFilePath
  ${{ if eq( parameters['isDryRun'], true) }}:
    value: 'testing'
  ${{ else }}:
    value: 'assets'
- name: sdkUploadBaseFilePath
  ${{ if eq( parameters['isDryRun'], true) }}:
    value: 'testing'
  ${{ else }}:
    value: 'sdks'
- name: Codeql.Enabled
  value: true


jobs:
- job: CreateReleaseAnnouncementJob
  displayName: Create Release Announcement
  condition: eq('${{ parameters.createReleaseAnnouncement }}', true)
  steps:
  - checkout: self
  - checkout: installer

  - template: templates/steps/get-build-info.yml
    parameters:
      dotnetStagingPipelineResource: dotnet-staging-pipeline-resource
      getAssociatedPipelineRuns: false

  - template: templates/steps/validate-tag.yml
    parameters:
      useCustomTag: ${{ parameters.useCustomTag }}
      customTag: ${{ parameters.customTag }}
      repoPath: $(Build.SourcesDirectory)/installer

  - script: |
      set -euxo pipefail

      query='query { repository(owner: "${{ variables.announcementOrg }}", name: "${{ variables.announcementRepo }}") { id } }'
      echo "${query}"
      repo_id=$( gh api graphql -f query="$query" --template '{{.data.repository.id}}' )
      echo ${{ variables.announcementOrg }}/${{ variables.announcementRepo }} repo ID is ${repo_id}

      query='query { repository(name: "${{ variables.announcementRepo }}", owner: "${{ variables.announcementOrg }}") { discussionCategories(first: 10) { edges { node { id, name } } } } }'
      echo "${query}"
      category_id=$( gh api graphql -f query="$query" --template '{{range .data.repository.discussionCategories.edges}}{{if eq .node.name "Announcements"}}{{.node.id}}{{end}}{{end}}' )
      echo Discussion Category ID is ${category_id}

      echo "##vso[task.setvariable variable=RepoId;]${repo_id}"
      echo "##vso[task.setvariable variable=DiscussionCategoryId;]${category_id}"
    displayName: Get category IDs
    env:
      GH_TOKEN: $(BotAccount-dotnet-sb-bot-pat)

  - script: |
      set -euxo pipefail
      echo Repo ID is $(RepoId)
      echo Discussion Category ID is $(DiscussionCategoryId)

      # Set environment variables that go in the announcement template
      export TAG=$(Tag)
      export RUNTIME_VERSION="$(RuntimeVersion)"
      export RELEASE_CHANNEL="$(ReleaseChannel)"
      export SDK_VERSION="$(SdkVersion)"
      export TAG_URL="https://github.com/dotnet/installer/releases/tag/$TAG"
      export RELEASE_NOTES_URL="https://github.com/dotnet/core/blob/main/release-notes/$RELEASE_CHANNEL/$RUNTIME_VERSION/$SDK_VERSION.md"
      export RELEASE_DATE=$(date +"%B %Y") # e.g. "March 2022"

      template_path="$(Build.SourcesDirectory)/$(Build.Repository.Name)/eng"
      template="$(envsubst < ${template_path}/source-build-release-announcement.md)"
      # Get the line in the template that is prefixed with "Title:" and remove the prefix
      title=$(echo "$template" | grep "^Title:" | cut -d " " -f2-)
      # Get the inverse of the above selection
      body=$(echo "$template" | grep -v "^Title:")

      query='mutation($RepoId: ID!, $categoryId: ID!, $body: String!, $title: String!) { createDiscussion(input: {repositoryId: $RepoId, categoryId: $categoryId, body: $body, title: $title}) { discussion { url } } }'

      if [ ${{ parameters.isDryRun }} = True ]; then
        echo "Doing a dry run, not submitting announcement."
        echo "Announcement title: ${title}"
        echo "Announcement body: ${body}"
      else
        echo "Submitting announcement."
        announcement_url=$( gh api graphql -F RepoId=$(RepoId) -F categoryId=$(DiscussionCategoryId) -F body="${body}" -F title="${title}" -f query="$query" --template '{{.data.createDiscussion.discussion.url}}' )

        echo "Announcement URL: $announcement_url"
        echo "Tag URL: $TAG_URL"
        echo "Release Notes URL: $RELEASE_NOTES_URL"
      fi
    displayName: Submit announcement discussion
    env:
      GH_TOKEN: $(BotAccount-dotnet-sb-bot-pat)

- job: SubmitReleasePrJob
  displayName: Submit Release PR
  condition: eq('${{ parameters.submitReleasePR }}', true)
  variables:
  - name: TargetRepo
    value: dotnet/installer
  - name: ForkRepo
    value: dotnet-sb-bot/installer

  steps:
  - checkout: self
  - checkout: installer

  - template: templates/steps/get-build-info.yml
    parameters:
      dotnetStagingPipelineResource: dotnet-staging-pipeline-resource
      getAssociatedPipelineRuns: true
      useSpecificPipelineRunIDs: ${{ parameters.useSpecificPipelineRunIDs }}
      dotnetInstallerOfficialRunID: ${{ parameters.dotnetInstallerOfficialRunID }}
      dotnetInstallerTarballBuildRunID: ${{ parameters.dotnetInstallerTarballBuildRunID }}

  - template: templates/steps/validate-tag.yml
    parameters:
      useCustomTag: ${{ parameters.useCustomTag }}
      customTag: ${{ parameters.customTag }}
      repoPath: $(Build.SourcesDirectory)/installer

  - script: |
      set -euo pipefail
      if [ '$(ReleaseChannel)' == '6.0' ]; then
        echo "##vso[task.setvariable variable=TarballBuildArtifactLeg]Build_Tarball_x64 CentOS7-Offline_Artifacts"
      elif [ '$(ReleaseChannel)' == '7.0' ]; then
        echo "##vso[task.setvariable variable=TarballBuildArtifactLeg]Build_Tarball_x64 CentOSStream8-Offline_Artifacts"
      else
        echo "##vso[task.logissue type=error]Release channel $(ReleaseChannel) is not supported. Exiting..."
        exit 1
      fi
    displayName: Set artifact name

  - task: DownloadPipelineArtifact@2
    name: DownloadSourceBuiltArtifactsStep
    displayName: Download Source-Built Artifacts
    inputs:
      source: 'specific'
      project: '$(azDoProject)'
      pipeline: '$(installerTarabllBuildCiPipelineId)'
      runVersion: 'specific'
      runId: '$(InstallerTarballBuildRunId)'
      artifact: '$(TarballBuildArtifactLeg)'
      patterns: 'Private.SourceBuilt.Artifacts.$(SdkVersion).tar.gz'

  - task: DownloadPipelineArtifact@2
    name: DownloadSourceBuiltSDKStep
    displayName: Download Source-Built SDK
    inputs:
      source: 'specific'
      project: '$(azDoProject)'
      pipeline: '$(installerTarabllBuildCiPipelineId)'
      runVersion: 'specific'
      runId: '$(InstallerTarballBuildRunId)'
      artifact: '$(TarballBuildArtifactLeg)'
      patterns: 'dotnet-sdk-$(SdkVersion)-*.tar.gz'

  - template: templates/steps/upload-to-blob-storage.yml
    parameters:
      file: '$(PIPELINE.WORKSPACE)/Private.SourceBuilt.Artifacts.$(SdkVersion).tar.gz'
      accountName: '$(storageAccountName)'
      containerName: '$(blobContainerName)'
      uploadPath: '$(artifactsUploadBaseFilePath)'
      azureStorageKey: '$(dotnetcli-storage-key)'

  - template: templates/steps/upload-to-blob-storage.yml
    parameters:
      file: '$(PIPELINE.WORKSPACE)/dotnet-sdk-$(SdkVersion)-*.tar.gz'
      accountName: '$(storageAccountName)'
      containerName: '$(blobContainerName)'
      uploadPath: '$(sdkUploadBaseFilePath)'
      azureStorageKey: '$(dotnetcli-storage-key)'

  - script: |
      set -euxo pipefail

      export RELEASE_DATE=$(date +"%B %Y") # e.g. "March 2022"
      export RUNTIME_VERSION="$(RuntimeVersion)"
      export SDK_VERSION="$(SdkVersion)"
      
      source_build_repo_root="$(Build.SourcesDirectory)/$(Build.Repository.Name)"
      template_path="${source_build_repo_root}/eng"
      template="$(envsubst < ${template_path}/source-build-release-pr.md)"
      # Get the line in the template that is prefixed with "Title:" and remove the prefix
      title=$(echo "$template" | grep "^Title:" | cut -d " " -f2-)
      # Get the inverse of the above selection
      body=$(echo "$template" | grep -v "^Title:")

      cd $(Agent.WorkFolder)/

      echo "TargetRepo: $(TargetRepo)"
      echo "ForkRepo: $(ForkRepo)"
      echo "SdkVersion: $(SdkVersion)"
      echo "title: ${title}"
      echo "body: ${body}"

      if [ ${{ parameters.isDryRun }} = True ]; then
        echo "Doing a dry run, not submitting PR."
      else
        echo "Submitting PR"
        ${source_build_repo_root}/eng/submit-source-build-release-pr.sh \
            --setupGitAuth \
            --targetRepo $(TargetRepo) \
            --forkRepo $(ForkRepo) \
            --sdkVersion $(SdkVersion) \
            --title "${title}" \
            --body "${body}"
      fi
    displayName: Submit Release PR
    env:
      GH_TOKEN: $(BotAccount-dotnet-sb-bot-pat)
