<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="JoinItems" />

  <Target Name="CreateOrchestratedBuildUpdaters"
          BeforeTargets="CreateDefaultDependencyInfos"
          Condition="'$(SkipOrchestratedBuildUpdate)' != 'true'">

    <ItemGroup>
      <RepoProjectFile Include="$(ProjectDir)repos\*.proj" />
    </ItemGroup>

    <!--
      Evaluate the dependency properties of each repo project. Use MSBuildSourceProjectFile as the
      join key to make one combined item for each project with all available metadata.
    -->
    <MSBuild Projects="@(RepoProjectFile)" Targets="GetOrchestratedManifestBuildName">
      <Output TaskParameter="TargetOutputs" ItemName="OrchestratedManifestBuildNames" />
    </MSBuild>
    <ItemGroup>
      <_RepoProjectExtractedProperties
        Include="@(OrchestratedManifestBuildNames)"
        BuildName="%(Identity)"
        KeepMetadata="MSBuildSourceProjectFile" />
    </ItemGroup>

    <MSBuild Projects="@(RepoProjectFile)" Targets="GetProjectDirectory">
      <Output TaskParameter="TargetOutputs" ItemName="ProjectDirectories" />
    </MSBuild>
    <ItemGroup>
      <_RepoProjectExtractedProperties
        Include="@(ProjectDirectories)"
        ProjectDirectory="%(Identity)"
        KeepMetadata="MSBuildSourceProjectFile" />
    </ItemGroup>

    <MSBuild Projects="@(RepoProjectFile)" Targets="GetOfficialBuildId">
      <Output TaskParameter="TargetOutputs" ItemName="OfficialBuildIds" />
    </MSBuild>
    <ItemGroup>
      <_RepoProjectExtractedProperties
        Include="@(OfficialBuildIds)"
        OfficialBuildId="%(Identity)"
        KeepMetadata="MSBuildSourceProjectFile" />
    </ItemGroup>

    <JoinItems
      Left="@(RepoProjectFile)" LeftMetadata="*"
      Right="@(_RepoProjectExtractedProperties)" RightKey="MSBuildSourceProjectFile" RightMetadata="*">
      <Output TaskParameter="JoinResult" ItemName="_JoinProjectFileProperties" />
    </JoinItems>

    <!-- Add the git submodule directory to each project item. -->
    <ReadGitConfigFile File="$(GitModulesPath)">
      <Output TaskParameter="SubmoduleConfiguration" ItemName="SubmoduleConfigurations" />
    </ReadGitConfigFile>
    <ItemGroup>
      <_ExtractedGitModuleProperties
        Include="@(SubmoduleConfigurations)"
        ProjectDirectory="$(ProjectDir)%(Path)/"
        GitUrl="%(Url)"
        KeepMetadata="Identity" />
    </ItemGroup>

    <JoinItems
      Left="@(_JoinProjectFileProperties)" LeftKey="ProjectDirectory" LeftMetadata="*" LeftItemSpec="Identity"
      Right="@(_ExtractedGitModuleProperties)" RightKey="ProjectDirectory" RightMetadata="*">
      <Output TaskParameter="JoinResult" ItemName="RepoProjectWithProperties" />
    </JoinItems>

    <ItemGroup>
      <UpdateStep
        Include="@(RepoProjectWithProperties)"
        Condition="'%(RepoProjectWithProperties.BuildName)' != 'N/A'"
        UpdaterType="Submodule from orchestrated build"
        Path="%(RepoProjectWithProperties.ProjectDirectory)" />

      <UpdateStep
        Include="@(RepoProjectWithProperties)"
        Condition="
          '%(RepoProjectWithProperties.BuildName)' != 'N/A' AND
          '%(RepoProjectWithProperties.OfficialBuildId)' != ''"
        UpdaterType="Build attribute from orchestrated build"
        AttributeName="BuildId"
        Path="%(RepoProjectWithProperties.Identity)"
        ElementName="OfficialBuildId" />
    </ItemGroup>
  </Target>
</Project>
