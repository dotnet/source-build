<Project>

  <PropertyGroup>
    <ImportNetSdkFromRepoToolset>false</ImportNetSdkFromRepoToolset>
    <_SuppressSdkImports>true</_SuppressSdkImports>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
  </PropertyGroup>

  <Import Condition="'$(SkipArcadeSdkImport)' != 'true'" Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <PropertyGroup>
    <!-- Fake, for SDK. -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <!-- We have no projects targeting multiple frameworks, so don't include in output path. -->
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <Platform Condition="'$(Platform)' == 'AnyCPU'"></Platform>
    <BuildArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</BuildArchitecture>
    <Platform Condition="'$(Platform)' == '' AND '$(BuildArchitecture)' == 'arm64'">$(BuildArchitecture)</Platform>
    <Platform Condition="'$(Platform)' == ''">x64</Platform>

    <!-- true if we have bootstrapped buildtools (usually on an unsupported platform -->
    <_IsBootstrapping Condition="'$(BootstrapBuildToolsDir)' != ''">true</_IsBootstrapping>

    <PortableBuild Condition="'$(OS)' == 'Windows_NT'">true</PortableBuild>
    <PortableBuild Condition="'$(PortableBuild)' == ''">false</PortableBuild>
    <UseSystemLibraries Condition="'$(UseSystemLibraries)' == '' AND '$(PortableBuild)' != 'true'">true</UseSystemLibraries>
    <UseSystemLibunwind Condition="'$(UseSystemLibunwind)' == ''">$(UseSystemLibraries)</UseSystemLibunwind>
    <UseStableVersions Condition="'$(UseStableVersions)' == ''">true</UseStableVersions>
  </PropertyGroup>

  <!-- This repo's projects are entirely infrastructure and do not ship. -->
  <PropertyGroup>
    <IsShipping>false</IsShipping>
  </PropertyGroup>

  <PropertyGroup>
    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>
    <TargetsDir>$(ProjectDir)targets/</TargetsDir>
    <KeysDir>$(ProjectDir)keys/</KeysDir>
    <DotNetCliToolDir Condition="'$(DotNetCliToolDir)' == '' and '$(CustomDotNetSdkDir)' != ''">$([MSBuild]::EnsureTrailingSlash('$(CustomDotNetSdkDir)'))</DotNetCliToolDir>
    <DotNetCliToolDir Condition="'$(DotNetCliToolDir)' == '' and '$(DOTNET_INSTALL_DIR)' != ''">$([MSBuild]::NormalizeDirectory('$(DOTNET_INSTALL_DIR)'))</DotNetCliToolDir>
    <DotNetCliToolDir Condition="'$(DotNetCliToolDir)' == ''">$(ProjectDir).dotnet/</DotNetCliToolDir>
    <DotnetToolCommand>$(DotNetCliToolDir)dotnet</DotnetToolCommand>
    <PatchesDir>$(ProjectDir)patches/</PatchesDir>
    <PackagesDir Condition="'$(NuGetPackageRoot)' != ''">$(NuGetPackageRoot)</PackagesDir>
    <PackagesDir Condition="'$(PackagesDir)' == ''">$(ProjectDir)packages/restored/</PackagesDir>
    <ArcadeBootstrapPackageDir>$(PackagesDir)ArcadeBootstrapPackage/</ArcadeBootstrapPackageDir>
    <!-- if we're not currently building,  Visual Studio will still set this -->
    <SDK_VERSION Condition="'$(SDK_VERSION)' == ''">$(NETCoreSdkVersion)</SDK_VERSION>
    <DotNetSdkDir>$(DotNetCliToolDir)sdk/$(SDK_VERSION)/</DotNetSdkDir>
    <DotNetSdkResolversDir>$(DotNetSdkDir)SdkResolvers/</DotNetSdkResolversDir>
    <SdkReferenceDir>$(DotNetCliToolDir)sdk/$(SDK_VERSION)/</SdkReferenceDir>
  </PropertyGroup>

  <!--
    '.proj' has no DefaultLanguageSourceExtension, causing **/* to be collected
    in Compile items! Avoid this by disabling the default items.
  -->
  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.proj'">
    <EnableDefaultItems>false</EnableDefaultItems>
  </PropertyGroup>

  <PropertyGroup>
    <LogVerbosity Condition="'$(LogVerbosity)'==''">minimal</LogVerbosity>
  </PropertyGroup>

  <PropertyGroup>
    <BuildInParallel Condition="'$(BuildInParallel)'==''">false</BuildInParallel>
  </PropertyGroup>

  <PropertyGroup>
    <ShellExtension Condition="'$(OS)' == 'Windows_NT'">.cmd</ShellExtension>
    <ShellExtension Condition="'$(OS)' != 'Windows_NT'">.sh</ShellExtension>
    <TarBallExtension Condition="'$(OS)' == 'Windows_NT'">.zip</TarBallExtension>
    <TarBallExtension Condition="'$(OS)' != 'Windows_NT'">.tar.gz</TarBallExtension>
  </PropertyGroup>

  <PropertyGroup>
    <SubmoduleDirectory Condition="'$(SubmoduleDirectory)' == ''">$(ProjectDir)src/</SubmoduleDirectory>
    <GitModulesPath>$(ProjectDir).gitmodules</GitModulesPath>
    <ProdConFeedPath>$(ProjectDir)ProdConFeed.txt</ProdConFeedPath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Init basic Arcade props, if the project importing this file doesn't use Arcade. -->
    <ArtifactsDir Condition="'$(ArtifactsDir)' == ''">$(ProjectDir)artifacts/</ArtifactsDir>
    <RepositoryEngineeringDir Condition="'$(RepositoryEngineeringDir)' == ''">$(ProjectDir)eng/</RepositoryEngineeringDir>
  </PropertyGroup>

  <PropertyGroup>
    <BaseOutputPath>$(ArtifactsDir)</BaseOutputPath>
    <ClonedSubmoduleDirectory Condition="'$(ClonedSubmoduleDirectory)' == ''">$(BaseOutputPath)src/</ClonedSubmoduleDirectory>
    <ClonedSubmoduleGitRootDirectory Condition="'$(ClonedSubmoduleGitRootDirectory)' == ''">$(ProjectDir).git/modules/src/</ClonedSubmoduleGitRootDirectory>
    <ToolsDir>$(ProjectDir)Tools/</ToolsDir>
    <ToolPackageExtractDir>$(ToolsDir)source-built/</ToolPackageExtractDir>
    <ToolsLocalDir>$(ProjectDir)tools-local/</ToolsLocalDir>
    <TaskDirectory>$(ToolsLocalDir)tasks/</TaskDirectory>
    <DarcInstallDir>$(DotNetCliToolDir)tools/</DarcInstallDir>
    <DarcVersion>$([System.IO.File]::ReadAllText('$(ProjectDir)DarcVersion.txt').Trim())</DarcVersion>
    <DarcDll>$(DotNetCliToolDir)tools/.store/microsoft.dotnet.darc/$(DarcVersion)/microsoft.dotnet.darc/$(DarcVersion)/tools/netcoreapp3.0/any/Microsoft.DotNet.Darc.dll</DarcDll>

    <TasksBinDir>$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/$(Configuration)/</TasksBinDir>
    <SourceBuildTasksAssembly>$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll</SourceBuildTasksAssembly>

    <XPlatTasksBinDir>$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.XPlat/bin/$(Configuration)/</XPlatTasksBinDir>
    <XPlatSourceBuildTasksAssembly>$(XPlatTasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.XPlat.dll</XPlatSourceBuildTasksAssembly>

    <LeakDetectionTasksBinDir>$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks.LeakDetection/</LeakDetectionTasksBinDir>
    <LeakDetectionTasksAssembly>$(LeakDetectionTasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.dll</LeakDetectionTasksAssembly>

    <BaseIntermediatePath>$(BaseOutputPath)obj/</BaseIntermediatePath>
    <OutputPath>$(BaseOutputPath)$(Platform)/$(Configuration)/</OutputPath>
    <IntermediatePath>$(BaseIntermediatePath)$(Platform)/$(Configuration)/</IntermediatePath>
    <GeneratedSourcePathOnline>$(IntermediatePath)generatedSrc</GeneratedSourcePathOnline>
    <GeneratedSourcePathOffline>$(SubmoduleDirectory)generatedSrc</GeneratedSourcePathOffline>
    <LocalBlobStorageRoot>$(IntermediatePath)blobs/</LocalBlobStorageRoot>
    <LocalBuildInfoRoot>$(IntermediatePath)build-info/</LocalBuildInfoRoot>
    <LocalNuGetPackagesRoot>$(IntermediatePath)nuget-packages/</LocalNuGetPackagesRoot>
    <SourceBuiltBlobFeedDir>$(IntermediatePath)blob-feed/</SourceBuiltBlobFeedDir>
    <SourceBuiltPackagesPath>$(SourceBuiltBlobFeedDir)packages/</SourceBuiltPackagesPath>
    <SourceBuiltAssetsDir>$(SourceBuiltBlobFeedDir)assets/</SourceBuiltAssetsDir>
    <PrebuiltPackagesPath>$(ProjectDir)packages/prebuilt/</PrebuiltPackagesPath>
    <PreviouslyRestoredPackagesPath>$(ProjectDir)packages/previouslyRestored/</PreviouslyRestoredPackagesPath>
    <PrebuiltSourceBuiltPackagesPath>$(ProjectDir)packages/source-built/</PrebuiltSourceBuiltPackagesPath>
    <PrebuiltSourceBuiltPackagesPath Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' != ''">$(CustomPrebuiltSourceBuiltPackagesPath)/</PrebuiltSourceBuiltPackagesPath>
    <SourceBuiltTarBallPath>$(OutputPath)</SourceBuiltTarBallPath>
    <SourceBuiltToolsetDir>$(LocalBlobStorageRoot)Toolset/</SourceBuiltToolsetDir>
    <SourceBuiltRuntimeDir>$(LocalBlobStorageRoot)Runtime/</SourceBuiltRuntimeDir>
    <SourceBuiltAspNetCoreRuntime>$(LocalBlobStorageRoot)aspnetcore/Runtime/</SourceBuiltAspNetCoreRuntime>
    <TargetInfoProps>$(IntermediatePath)TargetInfo.props</TargetInfoProps>
    <RestoreSourcePropsPath>$(IntermediatePath)RestoreSources.props</RestoreSourcePropsPath>
    <PackageVersionPropsPath>$(IntermediatePath)PackageVersions.props</PackageVersionPropsPath>
    <GennedPackageVersionPropsPath Condition="'$(OfflineBuild)' == 'true'">$(IntermediatePath)GennedPackageVersions.props</GennedPackageVersionPropsPath>
    <GennedPackageVersionPropsPath Condition="'$(OfflineBuild)' != 'true'">$(IntermediatePath)PackageVersions.props</GennedPackageVersionPropsPath>
    <LoggingDir>$(BaseOutputPath)logs/</LoggingDir>
    <MSBuildDebugPathTargetDir>$(BaseOutputPath)msbuild-debug/</MSBuildDebugPathTargetDir>
    <RoslynDebugPathTargetDir>$(BaseOutputPath)roslyn-debug/</RoslynDebugPathTargetDir>
    <AspNetRazorBuildServerLogDir>$(BaseOutputPath)aspnet-debug</AspNetRazorBuildServerLogDir>
    <AspNetRazorBuildServerLogFile>$(AspNetRazorBuildServerLogDir)razor-build-server.log</AspNetRazorBuildServerLogFile>
    <IlasmPath Condition="'$(OfflineBuild)' != 'true'">invalid: ILAsm is not expected to be needed in the online build</IlasmPath>
    <IlasmPath Condition="'$(OfflineBuild)' == 'true'">$(PrebuiltSourceBuiltPackagesPath)coreclr-tools/ilasm</IlasmPath>
    <IldasmPath Condition="'$(OfflineBuild)' != 'true'">$(ToolPackageExtractDir)coreclr-tools/ildasm</IldasmPath>
    <IldasmPath Condition="'$(OfflineBuild)' == 'true'">invalid: ILDasm is not expected to be needed in the offline build</IldasmPath>
    <!-- Dir where git info is generated during online builds. -->
    <GitInfoOutputDir>$(BaseOutputPath)git-info/</GitInfoOutputDir>
    <!-- Dir where git info is placed inside the tarball. -->
    <GitInfoOfflineDir>$(ProjectDir)git-info/</GitInfoOfflineDir>
    <OutputGitInfoPropsFile>$(GitInfoOutputDir)$(RepositoryName).props</OutputGitInfoPropsFile>
    <ProductionAllRepoPropsFile>$(GitInfoOutputDir)AllRepoVersions.props</ProductionAllRepoPropsFile>
    <OfflineGitInfoPropsFile>$(GitInfoOfflineDir)$(RepositoryName).props</OfflineGitInfoPropsFile>
    <OfflineAllRepoPropsFile>$(GitInfoOfflineDir)AllRepoVersions.props</OfflineAllRepoPropsFile>
    <PackageReportDir>$(BaseOutputPath)prebuilt-report/</PackageReportDir>
    <PackageReportDataFile>$(PackageReportDir)prebuilt-usage.xml</PackageReportDataFile>
    <PoisonUsageReportFile>$(PackageReportDir)poison-usage.xml</PoisonUsageReportFile>
    <PoisonReportDataFile>$(PackageReportDir)poison-catalog.xml</PoisonReportDataFile>
    <PoisonMarkerFile>.prebuilt.xml</PoisonMarkerFile>
    <SourceBuiltPoisonReportDataFile>$(PackageReportDir)poison-source-built-catalog.xml</SourceBuiltPoisonReportDataFile>
    <SourceBuiltPoisonMarkerFile>.source-built.xml</SourceBuiltPoisonMarkerFile>
    <ProjectAssetsJsonArchiveFile>$(PackageReportDir)all-project-assets-json-files.zip</ProjectAssetsJsonArchiveFile>
    <ProdConManifestFile>$(PackageReportDir)prodcon-build.xml</ProdConManifestFile>
    <PoisonedReportFile>$(PackageReportDir)poisoned.txt</PoisonedReportFile>
    <ConflictingPackageReportDir>$(BaseOutputPath)conflict-report/</ConflictingPackageReportDir>
    <OfflinePrebuiltBurndownDataFile>$(PackageReportDir)PrebuiltBurndownData-offline.csv</OfflinePrebuiltBurndownDataFile>
    <OnlinePrebuiltBurndownDataFile>$(PackageReportDir)PrebuiltBurndownData-online.csv</OnlinePrebuiltBurndownDataFile>
    <ReferencePackagesBaseDir>$(IntermediatePath)reference-packages/</ReferencePackagesBaseDir>
    <ExternalTarballsDir>$(IntermediatePath)external-tarballs/</ExternalTarballsDir>
    <!--
      Change ReferencePackagesBaseDir & ExternalTarballsDir conditionally in offline build.
      See corresponding change in build-source-tarball.sh to copy reference-packages & external-tarballs
      from source-build bin dir to tarball packages/reference dir & packages/archive.
    -->
    <ExternalTarballsDir Condition="'$(OfflineBuild)' == 'true'">$(ProjectDir)packages/archive/</ExternalTarballsDir>
    <ReferencePackagesBaseDir Condition="'$(OfflineBuild)' == 'true'">$(ProjectDir)packages/reference/</ReferencePackagesBaseDir>
    <ReferencePackagesStagingDir>$(ReferencePackagesBaseDir)staging/</ReferencePackagesStagingDir>
    <ReferencePackagesSourceDir>$(ReferencePackagesBaseDir)source/</ReferencePackagesSourceDir>
    <ReferencePackagesDir>$(ReferencePackagesBaseDir)packages/</ReferencePackagesDir>
    <ReferencePackagesDir Condition="'$(CustomReferencePackagesPath)' != ''">$(CustomReferencePackagesPath)/</ReferencePackagesDir>
    <SourceBuiltArtifactsTarballName>Private.SourceBuilt.Artifacts</SourceBuiltArtifactsTarballName>
    <SourceBuiltArtifactsTarballUrl>https://dotnetcli.azureedge.net/source-built-artifacts/assets/</SourceBuiltArtifactsTarballUrl>
    <ReferencePackagesTarballName>Private.SourceBuild.ReferencePackages</ReferencePackagesTarballName>
    <ReferencePackagesTarballUrl>https://dotnetfeed.blob.core.windows.net/dotnet-core/assets/</ReferencePackagesTarballUrl>
    <ReferencePackagesToDeleteDir>$(ReferencePackagesBaseDir)packages-to-delete/</ReferencePackagesToDeleteDir>
    <BaselineDataFile>$(ToolsLocalDir)prebuilt-baseline-</BaselineDataFile>
    <OfflineBaselineDataFile>$(BaselineDataFile)offline.xml</OfflineBaselineDataFile>
    <OnlineBaselineDataFile>$(BaselineDataFile)online.xml</OnlineBaselineDataFile>
    <BaselineDataFile Condition="'$(OfflineBuild)' == 'true'">$(OfflineBaselineDataFile)</BaselineDataFile>
    <BaselineDataFile Condition="'$(OfflineBuild)' != 'true'">$(OnlineBaselineDataFile)</BaselineDataFile>
    <!--Exclude tests that are failing for test enabled projects like - corefx -->
    <TestExclusionsDir>$(ProjectDir)test/exclusions/</TestExclusionsDir>
  </PropertyGroup>

  <!-- Import Build tools common props file where repo-independent properties are found -->
  <Import Project="$(ToolsDir)Build.Common.props" Condition="Exists('$(ToolsDir)Build.Common.props')" />

  <PropertyGroup>
     <ArmEnvironmentVariables Condition="'$(ArmEnvironmentVariables)' == ''">ROOTFS_DIR=$(BaseIntermediatePath)crossrootfs/arm</ArmEnvironmentVariables>
     <ArmEnvironmentVariables Condition="'$(Platform)' == 'armel'">ROOTFS_DIR=$(BaseIntermediatePath)crossrootfs/armel</ArmEnvironmentVariables>
   </PropertyGroup>

  <Import Project="$(TargetInfoProps)" Condition="'$(GeneratingStaticPropertiesFile)' != 'true' AND Exists('$(TargetInfoProps)')" />

  <PropertyGroup>
    <!-- known-good (repos/known-good.proj) conditionally includes submodules based on the platform,
         so this will not always correspond to the same repos - see that file for details.
         We need an "empty" project after the last real project in order for prebuilt detection
         to work, so we always build known-good. -->
    <RootRepo>known-good</RootRepo>
    <RootRepoTests>known-good-tests</RootRepoTests>
  </PropertyGroup>

  <ItemGroup>
    <SourceBuiltPackage Include="$(SourceBuiltPackagesPath)/*.nupkg" />
  </ItemGroup>

  <!-- CLI internal version is statically set by us to a version that will never show up in the wild.
       This ensures we will never restore a public version instead of our source-built version.  We
       invlude the version number because it is used both by CLI.proj and the core-sdk build and they
       have to be synced up.  ExtraPackageVersionPropsPackageInfo doesn't work in cli.proj because
       toolset is between CLI and core-sdk, and the extra package version info is lost.               -->
  <PropertyGroup>
    <CliInternalReleaseTag>source</CliInternalReleaseTag>
    <CliInternalBuildVersion>30000001-1</CliInternalBuildVersion>
  </PropertyGroup>

  <ItemGroup>
    <ExtraPackageVersionPropsPackageInfo Include="DotnetCliInternalVersion" Version="3.0.100-$(CliInternalReleaseTag)-$(CliInternalBuildVersion)" />
  </ItemGroup>

  <Import Project="$(ProductionAllRepoPropsFile)" Condition="Exists('$(ProductionAllRepoPropsFile)')" />
  <Import Project="$(OfflineAllRepoPropsFile)" Condition="Exists('$(OfflineAllRepoPropsFile)')" />

  <!-- Additional psuedo-versions that some repos depend on -->
  <ItemGroup>
    <!-- we don't produce the Windows version of this package but that's the one core-sdk keys off of for the ASP.NET version -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimewinx64PackageVersion" Version="$(aspnetcoreOutputPackageVersion)" />
    <!-- same thing here for CLI -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimewinx64Version" Version="$(coresetupOutputPackageVersion)" />
    <!-- same thing here for toolset -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimewinx64PackageVersion" Version="%24(MicrosoftNETCoreDotNetAppHostPackageVersion)" />
    <!-- same thing here for core-sdk -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimePackageVersion" Version="%24(MicrosoftNETCoreDotNetAppHostPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimeVersion" Version="%24(MicrosoftNETCoreDotNetAppHostPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppHostPackageVersion" Version="%24(MicrosoftNETCoreDotNetAppHostPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimePackageVersion" Version="%24(MicrosoftAspNetCoreAppRuntimeLinux$(Platform)PackageVersion)" />
    <!-- core-sdk uses this property for ASP.NET blob directory -->
    <ExtraPackageVersionPropsPackageInfo Include="VSRedistCommonAspNetCoreTargetingPackx6430PackageVersion" Version="$(aspnetcoreOutputPackageVersion)" />
    <!-- OSX needs the OSX version instead of Linux.  We don't have a lot of flexibility in how we output these properties so we're relying on the previous one being blank if the Linux version of the package is missing.  -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimePackageVersion" Version="%24(MicrosoftAspNetCoreAppRuntimeOsxX64PackageVersion)" DoNotOverwrite="true" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimePackageVersion" Version="%24(MicrosoftAspNetCoreAppRuntimewinx64PackageVersion)" DoNotOverwrite="true" />

    <!-- property used by Arcade to determine what version of SourceLink to use -->
    <!-- if MicrosoftSourceLinkCommonPackageVersion is non-empty, then we've already built SourceLink, regardless of whether
         this is the production or offline build, so we should use that version.  -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftSourceLinkVersion" Version="%24(MicrosoftSourceLinkCommonPackageVersion)" />
  </ItemGroup>

</Project>
