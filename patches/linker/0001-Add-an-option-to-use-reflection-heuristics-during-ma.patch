From ee3efcb6178a29138d13600298b7a68de183e98e Mon Sep 17 00:00:00 2001
From: Eugene Rozenfeld <erozen@microsoft.com>
Date: Tue, 4 Apr 2017 23:27:47 -0700
Subject: [PATCH] Add an option to use reflection heuristics during marking
 step.

This change adds a -h option that can specify heuristics for keeping
types/methods/fields that may be needed for reflection. Three simple
and coarse-grained heuristic options are added initially (all are off by default):

1. "LdtokenTypeMethods": mark all methods of types whose token is used
in an ldtoken instruction.
2. "LdtokenTypeFields": mark all fields of types whose token is used
in an ldtoken instruction.
3. "InstanceConstructors": mark all instance constructors in types
where an instance member has been marked but none of the instance
constructors have been marked. (The type is likely to be instantiated via CreateInstance).

When -h is specified MarkStep is replaced with MarkStepWithReflectionHeuristics that
derives from MarkStep. The names of heuristics are specified in a comma-separated list.
More heuristics will be added over time and any subset of them can be used for a particular
linker invocation.

https://github.com/dotnet/source-build/issues/777 tracks removing this patch.
---
 .../MarkStepWithReflectionHeuristics.cs            | 98 ++++++++++++++++++++++
 src/linker/Linker/Driver.cs                        | 26 ++++++
 2 files changed, 124 insertions(+)
 create mode 100644 src/linker/Linker.Steps/MarkStepWithReflectionHeuristics.cs

diff --git a/src/linker/Linker.Steps/MarkStepWithReflectionHeuristics.cs b/src/linker/Linker.Steps/MarkStepWithReflectionHeuristics.cs
new file mode 100644
index 0000000..ff5a3e7
--- /dev/null
+++ b/src/linker/Linker.Steps/MarkStepWithReflectionHeuristics.cs
@@ -0,0 +1,98 @@
+using System;
+using System.Collections;
+using System.Collections.Generic;
+
+using Mono.Cecil;
+using Mono.Cecil.Cil;
+
+namespace Mono.Linker.Steps {
+
+	public class MarkStepWithReflectionHeuristics : MarkStep {
+
+		protected ICollection<string> _reflectionHeuristics;
+
+		public MarkStepWithReflectionHeuristics (ICollection<string> reflectionHeuristics)
+		{
+			_reflectionHeuristics = reflectionHeuristics;
+		}
+
+		protected override void MarkInstruction (Instruction instruction)
+		{
+			base.MarkInstruction (instruction);
+
+			if (instruction.OpCode == OpCodes.Ldtoken) {
+				object token = instruction.Operand;
+				if (token is TypeReference) {
+					TypeDefinition type = ResolveTypeDefinition (GetOriginalType (((TypeReference) token)));
+					if (type != null) {
+						if (_reflectionHeuristics.Contains ("LdtokenTypeMethods")) {
+							MarkMethods (type);
+						}
+						if (_reflectionHeuristics.Contains  ("LdtokenTypeFields")) {
+							MarkFields (type, includeStatic: true);
+						}
+					}
+				}
+			}
+		}
+
+		protected override void DoAdditionalProcessing()
+		{
+			if (_reflectionHeuristics.Contains ("InstanceConstructors")) {
+				ProcessConstructors ();
+			}
+		}
+
+		void ProcessConstructors()
+		{
+			foreach (AssemblyDefinition assembly in _context.GetAssemblies ()) {
+				foreach (TypeDefinition type in assembly.MainModule.Types) {
+					ProcessConstructors (type);
+				}
+			}
+		}
+
+		void ProcessConstructors(TypeDefinition type)
+		{
+			if (Annotations.IsMarked (type)) {
+
+				bool hasMarkedConstructors = false;
+				bool hasMarkedInstanceMember = false;
+				foreach (var method in type.Methods) {
+					if (Annotations.IsMarked (method)) {
+						if (!method.IsStatic) {
+							hasMarkedInstanceMember = true;
+						}
+
+						if (method.IsInstanceConstructor()) {
+							hasMarkedConstructors = true;
+						}
+
+						if (hasMarkedInstanceMember && hasMarkedConstructors) {
+							break;
+						}
+					}
+				}
+
+				if (!hasMarkedConstructors) {
+					if (!hasMarkedInstanceMember) {
+						foreach (var field in type.Fields) {
+							if (!field.IsStatic && Annotations.IsMarked (field)) {
+								hasMarkedInstanceMember = true;
+								break;
+							}
+						}
+					}
+
+					if (hasMarkedInstanceMember) {
+						MarkMethodsIf (type.Methods, (m) => m.IsInstanceConstructor());
+					}
+				}
+
+				foreach (var nestedType in type.NestedTypes) {
+					ProcessConstructors (nestedType);
+				}
+			}
+		}
+	}
+}
diff --git a/src/linker/Linker/Driver.cs b/src/linker/Linker/Driver.cs
index c1e429f..612f3d1 100644
--- a/src/linker/Linker/Driver.cs
+++ b/src/linker/Linker/Driver.cs
@@ -463,6 +463,10 @@ namespace Mono.Linker {
 								return false;
 
 							continue;
+					    case 'h':
+                            ICollection<string> reflectionHeuristics = ParseReflectionHeuristics (GetParam ());
+                            p.ReplaceStep (typeof (MarkStep), new MarkStepWithReflectionHeuristics (reflectionHeuristics));
+                            continue;
 						case "?":
 						case "help":
 							Usage ();
@@ -689,7 +693,20 @@ namespace Mono.Linker {
 
 			return assemblies;
 		}
+<<<<<<< HEAD
 #endif
+=======
+
+		protected static ICollection<string> ParseReflectionHeuristics(string str)
+		{
+			HashSet<string> heuristics = new HashSet<string> (StringComparer.OrdinalIgnoreCase);
+			string[] parts = str.Split (',');
+			foreach (string part in parts)
+				heuristics.Add (part);
+
+			return heuristics;
+		}
+>>>>>>> Add an option to use reflection heuristics during marking step.
 
 		AssemblyAction ParseAssemblyAction (string s)
 		{
@@ -881,6 +898,15 @@ namespace Mono.Linker {
 			Console.WriteLine ("  --dependencies-file PATH   Specify the dependencies output. Defaults to 'output/linker-dependencies.xml.gz'");
 			Console.WriteLine ("  --dump-dependencies        Dump dependencies for the linker analyzer tool");
 			Console.WriteLine ("  --reduced-tracing          Reduces dependency output related to assemblies that will not be modified");
+			Console.WriteLine ("   -h                  List of reflection heuristics separated with a comma.");
+			Console.WriteLine ("                       Supported heuristics:");
+			Console.WriteLine ("                         LdtokenTypeMethods:   mark all methods of types whose token is used");
+			Console.WriteLine ("                                               in an ldtoken instruction");
+			Console.WriteLine ("                         LdtokenTypeFields:    mark all fields of types whose token is used");
+			Console.WriteLine ("                                               in an ldtoken instruction");
+			Console.WriteLine ("                         InstanceConstructors: mark all instance constructors in types");
+			Console.WriteLine ("                                               where an instance member has been marked but");
+			Console.WriteLine ("                                               none of the instance constructors have been marked");
 			Console.WriteLine ("");
 		}
 
-- 
1.8.3.1

