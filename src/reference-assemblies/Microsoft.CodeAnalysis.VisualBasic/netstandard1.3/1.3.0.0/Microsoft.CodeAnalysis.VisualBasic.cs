[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("Â© Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("1.3.0.60613")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("1.3.0.60613")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.CompilerServer, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.Scripting.Desktop.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.Scripting.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.VisualBasic.ExpressionEvaluator.ExpressionCompiler, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.VisualBasic.InteractiveEditorFeatures, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.VisualBasic.Scripting, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.VisualBasic.Scripting.Desktop.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Microsoft.CodeAnalysis.VisualBasic.Scripting.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.CommandLine.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.Emit.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.Semantic.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.Symbol.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.Syntax.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.Test.Utilities, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Compilers.VisualBasic.Test.Utilities.Desktop, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.ExpressionEvaluator.ExpressionCompiler.Test.Utilities, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.ExpressionEvaluator.VisualBasic.ExpressionCompiler.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Services.Editor.UnitTests2, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Services.Editor.VisualBasic.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Test.Utilities, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Test.Utilities.Desktop, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.Test.Utilities.FX45, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("Roslyn.VisualStudio.Services.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("vbc, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("VBCSCompiler, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("VBCSCompilerPortable, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("vbi, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Runtime.Versioning.TargetFrameworkAttribute(".NETPortable,Version=v4.5,Profile=Profile7", FrameworkDisplayName=".NET Portable Subset")]
namespace Microsoft.CodeAnalysis
{
    public static partial class VisualBasicExtensions
    {
        public static bool Any(this Microsoft.CodeAnalysis.SyntaxTokenList list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool Any(this Microsoft.CodeAnalysis.SyntaxTriviaList list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool Any<TNode>(this Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static bool Any<TNode>(this Microsoft.CodeAnalysis.SyntaxList<TNode> list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static int IndexOf(this Microsoft.CodeAnalysis.SyntaxTokenList list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static int IndexOf(this Microsoft.CodeAnalysis.SyntaxTriviaList list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static int IndexOf<TNode>(this Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static int IndexOf<TNode>(this Microsoft.CodeAnalysis.SyntaxList<TNode> list, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static bool IsKind(this Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsKind(this Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsKind(this Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsKind(this Microsoft.CodeAnalysis.SyntaxTrivia trivia, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
    }
}
namespace Microsoft.CodeAnalysis.VisualBasic
{
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct AggregateClauseSymbolInfo
    {
        public Microsoft.CodeAnalysis.SymbolInfo Select1 { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.SymbolInfo Select2 { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct AwaitExpressionInfo
    {
        public Microsoft.CodeAnalysis.IMethodSymbol GetAwaiterMethod { get { throw null; } }
        public Microsoft.CodeAnalysis.IMethodSymbol GetResultMethod { get { throw null; } }
        public Microsoft.CodeAnalysis.IPropertySymbol IsCompletedProperty { get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct CollectionRangeVariableSymbolInfo
    {
        public Microsoft.CodeAnalysis.SymbolInfo AsClauseConversion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.SymbolInfo SelectMany { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.SymbolInfo ToQueryableCollectionConversion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Conversion : System.IEquatable<Microsoft.CodeAnalysis.VisualBasic.Conversion>
    {
        public bool Exists { get { throw null; } }
        public bool IsAnonymousDelegate { get { throw null; } }
        public bool IsArray { get { throw null; } }
        public bool IsBoolean { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        public bool IsLambda { get { throw null; } }
        public bool IsNarrowing { get { throw null; } }
        public bool IsNullableValueType { get { throw null; } }
        public bool IsNumeric { get { throw null; } }
        public bool IsReference { get { throw null; } }
        public bool IsString { get { throw null; } }
        public bool IsTypeParameter { get { throw null; } }
        public bool IsUserDefined { get { throw null; } }
        public bool IsValueType { get { throw null; } }
        public bool IsWidening { get { throw null; } }
        public Microsoft.CodeAnalysis.IMethodSymbol MethodSymbol { get { throw null; } }
        public bool Equals(Microsoft.CodeAnalysis.VisualBasic.Conversion other) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Microsoft.CodeAnalysis.VisualBasic.Conversion left, Microsoft.CodeAnalysis.VisualBasic.Conversion right) { throw null; }
        public static bool operator !=(Microsoft.CodeAnalysis.VisualBasic.Conversion left, Microsoft.CodeAnalysis.VisualBasic.Conversion right) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct ForEachStatementInfo
    {
        public Microsoft.CodeAnalysis.VisualBasic.Conversion CurrentConversion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.IPropertySymbol CurrentProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.IMethodSymbol DisposeMethod { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Conversion ElementConversion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.ITypeSymbol ElementType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.IMethodSymbol GetEnumeratorMethod { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public Microsoft.CodeAnalysis.IMethodSymbol MoveNextMethod { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    public static partial class GeneratedExtensionSyntaxFacts
    {
        public static string GetText(this Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{GetDebuggerDisplay(), nq}")]
    public sealed partial class GlobalImport : System.IEquatable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport>
    {
        internal GlobalImport() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax Clause { get { throw null; } }
        public string Name { get { throw null; } }
        public bool Equals(Microsoft.CodeAnalysis.VisualBasic.GlobalImport other) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Microsoft.CodeAnalysis.VisualBasic.GlobalImport left, Microsoft.CodeAnalysis.VisualBasic.GlobalImport right) { throw null; }
        public static bool operator !=(Microsoft.CodeAnalysis.VisualBasic.GlobalImport left, Microsoft.CodeAnalysis.VisualBasic.GlobalImport right) { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> Parse(System.Collections.Generic.IEnumerable<string> importedNames) { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> Parse(System.Collections.Generic.IEnumerable<string> importedNames, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> diagnostics) { diagnostics = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>); throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.GlobalImport Parse(string importedNames) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.GlobalImport Parse(string importedNames, out System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> diagnostics) { diagnostics = default(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>); throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> Parse(params string[] importedNames) { throw null; }
    }
    public sealed partial class HandledEvent
    {
        internal HandledEvent() { }
        public Microsoft.CodeAnalysis.IPropertySymbol EventContainer { get { throw null; } }
        public Microsoft.CodeAnalysis.IEventSymbol EventSymbol { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.HandledEventKind HandlesKind { get { throw null; } }
        public Microsoft.CodeAnalysis.IPropertySymbol WithEventsSourceProperty { get { throw null; } }
    }
    public enum HandledEventKind
    {
        Me = 0,
        MyBase = 2,
        MyClass = 1,
        WithEvents = 3,
    }
    public enum LanguageVersion
    {
        VisualBasic10 = 10,
        VisualBasic11 = 11,
        VisualBasic12 = 12,
        VisualBasic14 = 14,
        VisualBasic9 = 9,
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct LocalizableErrorArgument : System.IFormattable
    {
        public override string ToString() { throw null; }
        public string ToString(string format, System.IFormatProvider formatProvider) { throw null; }
    }
    public enum OptionStrict : byte
    {
        Custom = (byte)1,
        Off = (byte)0,
        On = (byte)2,
    }
    public sealed partial class PredefinedPreprocessorSymbols
    {
        internal PredefinedPreprocessorSymbols() { }
        public static System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, object>> AddPredefinedPreprocessorSymbols(Microsoft.CodeAnalysis.OutputKind kind, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> symbols) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, object>> AddPredefinedPreprocessorSymbols(Microsoft.CodeAnalysis.OutputKind kind, params System.Collections.Generic.KeyValuePair<string, object>[] symbols) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, object>> AddPredefinedPreprocessorSymbols(Microsoft.CodeAnalysis.OutputKind kind, System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, object>> symbols) { throw null; }
    }
    public sealed partial class SymbolDisplay
    {
        internal SymbolDisplay() { }
        public static string FormatPrimitive(object obj, bool quoteStrings, bool useHexadecimalNumbers) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart> ToDisplayParts(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SymbolDisplayFormat format=null) { throw null; }
        public static string ToDisplayString(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SymbolDisplayFormat format=null) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SymbolDisplayPart> ToMinimalDisplayParts(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format=null) { throw null; }
        public static string ToMinimalDisplayString(Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format=null) { throw null; }
    }
    public static partial class SyntaxExtensions
    {
        public static Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> Attributes(this Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClauseSyntax) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken NormalizeWhitespace(this Microsoft.CodeAnalysis.SyntaxToken token, string indentation, bool elasticTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken NormalizeWhitespace(this Microsoft.CodeAnalysis.SyntaxToken token, string indentation="    ", string eol="\r\n", bool elasticTrivia=false, bool useDefaultCasing=false) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList NormalizeWhitespace(this Microsoft.CodeAnalysis.SyntaxTriviaList trivia, string indentation="    ", string eol="\r\n", bool elasticTrivia=false, bool useDefaultCasing=false) { throw null; }
        public static TNode NormalizeWhitespace<TNode>(this TNode node, bool useDefaultCasing, string indentation, bool elasticTrivia) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static TNode NormalizeWhitespace<TNode>(this TNode node, bool useDefaultCasing, string indentation="    ", string eol="\r\n", bool elasticTrivia=false) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList ToSyntaxTriviaList(this System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> sequence) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type(this Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClauseSyntax) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type(this Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpressionSyntax) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax WithIdentifier(this Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax simpleName, Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
    }
    public partial class SyntaxFactory
    {
        public SyntaxFactory() { }
        public static Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturn { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturnLineFeed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturn { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturnLineFeed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticLineFeed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticMarker { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticSpace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticTab { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia LineFeed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia Space { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.SyntaxTrivia Tab { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AccessorBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AccessorBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AddAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AddAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AddExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AddExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax AddressOfExpression(Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax AddressOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> additionalQueryOperators, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause(Microsoft.CodeAnalysis.SyntaxToken aggregateKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> additionalQueryOperators, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax AggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax AggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndAlsoExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndAlsoExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) { throw null; }
        public static bool AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, bool topLevel) { throw null; }
        public static bool AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, System.Func<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool> ignoreChildNode=null) { throw null; }
        public static bool AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken oldToken, Microsoft.CodeAnalysis.SyntaxToken newToken) { throw null; }
        public static bool AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList oldList, Microsoft.CodeAnalysis.SyntaxTokenList newList) { throw null; }
        public static bool AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree, bool topLevel) { throw null; }
        public static bool AreEquivalent<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> oldList, Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> newList, System.Func<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool> ignoreChildNode=null) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static bool AreEquivalent<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode> oldList, Microsoft.CodeAnalysis.SyntaxList<TNode> newList, System.Func<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool> ignoreChildNode=null) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax> arguments) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax> arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> rankSpecifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxTokenList commaTokens, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax ArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax ArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> rankSpecifiers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax AscendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax AscendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax AsNewClause(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax AsNewClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Attribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax target, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Attribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax> attributes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax> attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AttributesStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AttributesStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax AttributeTarget(Microsoft.CodeAnalysis.SyntaxToken attributeModifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax AttributeTarget(Microsoft.CodeAnalysis.SyntaxToken attributeModifier, Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax AwaitExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken BadToken(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax BinaryConditionalExpression(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax BinaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax BinaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken BracketedIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken BracketedIdentifier(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax CallStatement(Microsoft.CodeAnalysis.SyntaxToken callKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax CallStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement(Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseEqualsClause(Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseEqualsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanClause(Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanOrEqualClause(Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanOrEqualClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanClause(Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanOrEqualClause(Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanOrEqualClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseNotEqualsClause(Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseNotEqualsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax CatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax CatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken whenKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax CatchFilterClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement(Microsoft.CodeAnalysis.SyntaxToken catchKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax CharacterLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken CharacterLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, char value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken CharacterLiteralToken(string text, char value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endClassStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax ClassConstraint(Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken classKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> initializers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer(Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ColonTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia CommentTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax> options, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax> imports, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax> attributes, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax> options, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax> imports, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax> attributes, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.SyntaxToken endOfFileToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ConcatenateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ConcatenateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ConcatenateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ConcatenateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken questionMarkToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken constKeyword, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia(string name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueDoStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueDoStatement(Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueForStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueForStatement(Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueWhileStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueWhileStatement(Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax CrefOperatorReference(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax CrefOperatorReference(Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax CrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax CrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax signature, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax> argumentTypes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax> argumentTypes, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[] argumentTypes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax CrefSignaturePart() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax CrefSignaturePart(Microsoft.CodeAnalysis.SyntaxToken modifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax CTypeExpression(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax CTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax DateLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken DateLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, System.DateTime value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken DateLiteralToken(string text, System.DateTime value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken DecimalLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, decimal value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken DecimalLiteralToken(string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, decimal value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax DescendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax DescendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax DirectCastExpression(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax DirectCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia DisabledTextTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken disableKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia(params Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] errorCodes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax DistinctClause() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax DistinctClause(Microsoft.CodeAnalysis.SyntaxToken distinctKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax DivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax DivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax DivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax DivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationComment(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia DocumentationCommentExteriorTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken DocumentationCommentLineBreakToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken DocumentationCommentLineBreakToken(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopUntilBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopUntilBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoUntilLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoUntilLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement(Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoWhileLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoWhileLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement(Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticEndOfLine(string text) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticWhitespace(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax elseStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax ElseCaseClause() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax ElseCaseClause(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax ElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax ElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax ElseIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax ElseIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement(Microsoft.CodeAnalysis.SyntaxToken elseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax EmptyStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken empty) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken enableKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia(params Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] errorCodes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAddHandlerStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAddHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax EndExternalSourceDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax EndExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndFunctionStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndGetStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndGetStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine(string text) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("Use SyntaxFactory.EndOfLine or SyntaxFactory.ElasticEndOfLine")]
        public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine(string text, bool elastic) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLineTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRaiseEventStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRaiseEventStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken regionKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRemoveHandlerStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRemoveHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSetStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSetStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax EndStatement(Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement(Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEnumStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken enumKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax EqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax EqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax EqualsValue(Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax EqualsValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> expressions) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement(Microsoft.CodeAnalysis.SyntaxToken eraseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> expressions) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] expressions) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax ErrorStatement(Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax ErrorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax EventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax EventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken customKeyword, Microsoft.CodeAnalysis.SyntaxToken eventKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExclusiveOrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExclusiveOrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitDoStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitDoStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitForStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitForStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitFunctionStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitOperatorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitOperatorStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitPropertyStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitPropertyStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSelectStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSelectStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSubStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSubStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitTryStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitTryStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitWhileStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitWhileStatement(Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ExponentiateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ExponentiateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExponentiateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExponentiateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax ExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax ExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax ExpressionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax ExternalChecksumDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax ExternalChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken externalChecksumKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken externalSource, Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, Microsoft.CodeAnalysis.SyntaxToken guid, Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, Microsoft.CodeAnalysis.SyntaxToken checksum, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax ExternalSourceDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax ExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken externalSource, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.SyntaxToken lineStart, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax FalseLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration(params Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] declarators) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax finallyStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement(Microsoft.CodeAnalysis.SyntaxToken finallyKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken FloatingLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, double value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken FloatingLiteralToken(string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, double value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax ForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax ForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax ForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax ForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.SyntaxToken eachKeyword, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement(Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax ForStepClause(Microsoft.CodeAnalysis.SyntaxToken stepKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax ForStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause(Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(Microsoft.CodeAnalysis.SyntaxToken functionName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(Microsoft.CodeAnalysis.SyntaxToken functionName, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(Microsoft.CodeAnalysis.SyntaxToken functionName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(string functionName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax GenericName(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax GenericName(string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetStandaloneExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax GetTypeExpression(Microsoft.CodeAnalysis.SyntaxToken getTypeKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax GetTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax GetXmlNamespaceExpression() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax GetXmlNamespaceExpression(Microsoft.CodeAnalysis.SyntaxToken getXmlNamespaceKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax GlobalName() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax GlobalName(Microsoft.CodeAnalysis.SyntaxToken globalKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax GoToStatement(Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax GoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax GroupAggregation() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax GroupAggregation(Microsoft.CodeAnalysis.SyntaxToken groupKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> keys, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> items, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> keys, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause(Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> items, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> keys, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause(Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax> events) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause(Microsoft.CodeAnalysis.SyntaxToken handlesKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax> events) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[] events) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax HandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax HandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, bool isBracketed, string identifierText, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeCharacter, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Identifier(string text) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Identifier(string text, bool isBracketed, string identifierText, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeCharacter) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax IdentifierLabel(Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax IdentifierLabel(string labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax> interfaceMembers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause(Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax> interfaceMembers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] interfaceMembers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement(Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] types) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax> importsClauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement(Microsoft.CodeAnalysis.SyntaxToken importsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax> importsClauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax IncompleteMember() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax IncompleteMember(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken missingIdentifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax InferredFieldInitializer(Microsoft.CodeAnalysis.SyntaxToken keyKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax InferredFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement(Microsoft.CodeAnalysis.SyntaxToken inheritsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] types) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax IntegerDivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax IntegerDivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IntegerDivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IntegerDivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken IntegerLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase @base, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, ulong value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken IntegerLiteralToken(string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase @base, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, ulong value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endInterfaceStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken interfaceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax> contents) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken dollarSignDoubleQuoteToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax> contents, Microsoft.CodeAnalysis.SyntaxToken doubleQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(params Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[] contents) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax InterpolatedStringText() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken textToken) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken InterpolatedStringTextToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken InterpolatedStringTextToken(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation(Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax formatClause, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SyntaxToken formatStringToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsNotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsNotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax JoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken equalsKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax JoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax KeywordEventContainer(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement(Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement(Microsoft.CodeAnalysis.SyntaxToken labelToken, Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement(string labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax LambdaHeader(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax LambdaHeader(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax LeftShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax LeftShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LeftShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LeftShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause(Microsoft.CodeAnalysis.SyntaxToken letKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LikeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LikeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia LineContinuationTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxList<TNode> List<TNode>() where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxList<TNode> List<TNode>(System.Collections.Generic.IEnumerable<TNode> nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, char value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, decimal value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, double value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, long value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, uint value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, ulong value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(char value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(decimal value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(double value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(int value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(long value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(float value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, char value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, decimal value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, double value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, int value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, long value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, float value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, uint value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(string text, ulong value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(uint value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Literal(ulong value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax LiteralExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement(Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement(Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax MeExpression() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax MeExpression(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax MemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax MemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax MethodBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax MethodBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MidAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MidAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax MidExpression(Microsoft.CodeAnalysis.SyntaxToken mid, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax MidExpression(string mid, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken nullable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> arrayRankSpecifiers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken moduleKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ModuloExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ModuloExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineFunctionLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineFunctionLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax> elseIfBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax> elseIfBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endIfStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineSubLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineSubLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MultiplyAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MultiplyAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax MultiplyExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax MultiplyExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax MyBaseExpression() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax MyBaseExpression(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax MyClassExpression() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax MyClassExpression(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken colonEqualsToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax NamedFieldInitializer(Microsoft.CodeAnalysis.SyntaxToken keyKeyword, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax NamedFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax NameOfExpression(Microsoft.CodeAnalysis.SyntaxToken nameOfKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax NameOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endNamespaceStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement(Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax NewConstraint(Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NextLabel() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NextLabel(Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> controlVariables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement(Microsoft.CodeAnalysis.SyntaxToken nextKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> controlVariables) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList() { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList(params Microsoft.CodeAnalysis.SyntaxNodeOrToken[] nodesAndTokens) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken> nodesAndTokens) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax NotEqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax NotEqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax NotExpression(Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax NotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax NothingLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax NullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax NullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxToken questionMarkToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NumericLabel() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NumericLabel(Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax NumericLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax ObjectCollectionInitializer(Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax ObjectCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax> initializers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer(Microsoft.CodeAnalysis.SyntaxToken withKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax> initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer(params Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[] initializers) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax OmittedArgument() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax OmittedArgument(Microsoft.CodeAnalysis.SyntaxToken empty) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToLabelStatement(Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToMinusOneStatement(Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToMinusOneStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToZeroStatement(Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToZeroStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax OnErrorResumeNextStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax OnErrorResumeNextStatement(Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.SyntaxToken nextKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endOperatorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement(Microsoft.CodeAnalysis.SyntaxToken nameKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement(Microsoft.CodeAnalysis.SyntaxToken nameKeyword, Microsoft.CodeAnalysis.SyntaxToken valueKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement(Microsoft.CodeAnalysis.SyntaxToken optionKeyword, Microsoft.CodeAnalysis.SyntaxToken nameKeyword, Microsoft.CodeAnalysis.SyntaxToken valueKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax> orderings) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause(Microsoft.CodeAnalysis.SyntaxToken orderKeyword, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax> orderings) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[] orderings) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Ordering(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Ordering(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrElseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrElseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Parameter(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax @default) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Parameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax> parameters) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax> parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ParseArgumentList(string text, int offset=0, bool consumeFullText=true) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax ParseCompilationUnit(string text, int offset=0, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options=null) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax ParseExecutableStatement(string text, int offset=0, bool consumeFullText=true) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax ParseExpression(string text, int offset=0, bool consumeFullText=true) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList ParseLeadingTrivia(string text, int offset=0) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax ParseName(string text, int offset=0, bool consumeFullText=true) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParseParameterList(string text, int offset=0, bool consumeFullText=true) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.ParseOptions options=null, string path="", System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree(string text, Microsoft.CodeAnalysis.ParseOptions options=null, string path="", System.Text.Encoding encoding=null, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken ParseToken(string text, int offset=0, bool startStatement=false) { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> ParseTokens(string text, int offset=0, int initialTokenPosition=0, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options=null) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList ParseTrailingTrivia(string text, int offset=0) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax ParseTypeName(string text, int offset=0, bool consumeFullText=true) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax PartitionClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax PartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax PartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax PredefinedCastExpression(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax PredefinedCastExpression(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax PredefinedType(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax PrintStatement(Microsoft.CodeAnalysis.SyntaxToken questionToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax PrintStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax PropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax PropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endPropertyStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken propertyKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax QualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax QualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax QualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax QualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax QueryExpression(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax QueryExpression(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[] clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement(Microsoft.CodeAnalysis.SyntaxToken raiseEventKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax RangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax RangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax RangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax RangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax RedimClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement(Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken referenceKeyword, Microsoft.CodeAnalysis.SyntaxToken file) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken regionKeyword, Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax RelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax RelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax RemoveHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax RemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement(Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement(Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken returnKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax RightShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax RightShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax RightShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax RightShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax> caseBlocks) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax> caseBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSelectStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause(Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement(Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> SeparatedList<TNode>() where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> SeparatedList<TNode>(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList nodesAndTokens) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> SeparatedList<TNode>(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNodeOrToken> nodesAndTokens) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> SeparatedList<TNode>(System.Collections.Generic.IEnumerable<TNode> nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> SeparatedList<TNode>(System.Collections.Generic.IEnumerable<TNode> nodes, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> separators) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax SimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax SimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax nameColonEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SimpleAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SimpleAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax SimpleCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax SimpleDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax SimpleDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement(Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax SimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax alias, Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax SimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause(Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement(Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause(Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineFunctionLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineSubLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxList<TNode> SingletonList<TNode>(TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> SingletonSeparatedList<TNode>(TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax SkipClause(Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax SkipClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList tokens) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax SkipWhileClause(Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax SkipWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax SpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax StopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax StopStatement(Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax StringLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken StringLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken StringLiteralToken(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endStructureStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax StructureConstraint(Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken structureKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subKeyword, Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SubtractAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SubtractAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax SubtractExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax SubtractExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSyncLockStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement(Microsoft.CodeAnalysis.SyntaxToken syncLockKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTree SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.ParseOptions options=null, string path="", System.Text.Encoding encoding=null) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia SyntaxTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax TakeClause(Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax TakeClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax TakeWhileClause(Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax TakeWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax TernaryConditionalExpression(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax TernaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Token(Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxTriviaList trailing, string text=null) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Token(Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text=null) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Token(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxTriviaList trailing, string text=null) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken Token(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text=null) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList() { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList(params Microsoft.CodeAnalysis.SyntaxToken[] tokens) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia Trivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax node) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList() { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia trivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(params Microsoft.CodeAnalysis.SyntaxTrivia[] trivias) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivias) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax TrueLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax> catchBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax tryStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax> catchBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endTryStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax TryCastExpression(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax TryCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement(Microsoft.CodeAnalysis.SyntaxToken tryKeyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> arguments) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken ofKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] arguments) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax TypeBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind blockKind, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax begin, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits=default(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax>), Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements=default(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax>), Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members=default(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax>), Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end=null) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax TypeConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsExpression(Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsNotExpression(Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsNotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter(Microsoft.CodeAnalysis.SyntaxToken varianceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax typeParameterConstraintClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax> parameters) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken ofKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax> parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] parameters) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax> constraints) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax> constraints, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[] constraints) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax TypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax TypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax TypeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind statementKind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributes=default(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax>), Microsoft.CodeAnalysis.SyntaxTokenList modifiers=default(Microsoft.CodeAnalysis.SyntaxTokenList), Microsoft.CodeAnalysis.SyntaxToken keyword=default(Microsoft.CodeAnalysis.SyntaxToken), Microsoft.CodeAnalysis.SyntaxToken identifier=default(Microsoft.CodeAnalysis.SyntaxToken), Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList=null) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryMinusExpression(Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryMinusExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryPlusExpression(Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryPlusExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax UntilClause(Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax UntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endUsingStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement(Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> variables) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax> names) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax> names, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[] names) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WhereClause(Microsoft.CodeAnalysis.SyntaxToken whereKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WhereClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWhileStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileClause(Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement(Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia Whitespace(string text) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("Use SyntaxFactory.Whitespace or SyntaxFactory.ElasticWhitespace")]
        public static Microsoft.CodeAnalysis.SyntaxTrivia Whitespace(string text, bool elastic) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTrivia WhitespaceTrivia(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWithStatement) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsEventContainer(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsEventContainer(string identifier) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement(Microsoft.CodeAnalysis.SyntaxToken withKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax XmlBracketedName(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax XmlBracketedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax XmlCDataSection() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken beginCDataToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endCDataToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax XmlComment() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax XmlComment(Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind quoteKind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration(Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, Microsoft.CodeAnalysis.SyntaxToken xmlKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone, Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax XmlDeclarationOption(Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken equals, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax XmlDeclarationOption(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax XmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> precedingMisc, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> followingMisc) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax XmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(string localName, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax XmlEmbeddedExpression(Microsoft.CodeAnalysis.SyntaxToken lessThanPercentEqualsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken percentGreaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax XmlEmbeddedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes, Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(string localName) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlEntityLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlEntityLiteralToken(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExampleElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExampleElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExceptionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExceptionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlMultiLineElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlMultiLineElement(string localName, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax XmlName() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax XmlName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax prefix, Microsoft.CodeAnalysis.SyntaxToken localName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute(string parameterName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax XmlNamespaceImportsClause(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax XmlNamespaceImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlNameToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind possibleKeywordKind, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlNameToken(string text, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind possibleKeywordKind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlNewLine(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlNullKeywordElement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParaElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParaElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParamElement(string parameterName, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParamElement(string parameterName, params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlParamRefElement(string parameterName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPermissionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPermissionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPlaceholderElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPlaceholderElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax XmlPrefix() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax XmlPrefixName() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax XmlPrefixName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlPreliminaryElement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlRemarksElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlRemarksElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlReturnsElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlReturnsElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlSeeAlsoElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSeeAlsoElement(System.Uri linkAddress, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> linkText) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlSeeElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax XmlString(Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax XmlString(Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSummaryElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSummaryElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText(params Microsoft.CodeAnalysis.SyntaxToken[] textTokens) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText(string value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(string value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteralToken(string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text, bool continueXmlDocumentationComment) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.SyntaxTriviaList trailing) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextToken(Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken XmlTextToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text, string value) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement(bool isStatic, bool isInstance) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlValueElement(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlValueElement(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax YieldStatement(Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax YieldStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
    }
    public partial class SyntaxFacts
    {
        public SyntaxFacts() { }
        public static System.Collections.Generic.IEqualityComparer<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind> EqualityComparer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public static bool AllowsLeadingImplicitLineContinuation(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static bool AllowsTrailingImplicitLineContinuation(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetAccessorStatementKind(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetBaseTypeStatementKind(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetBinaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind keyword) { throw null; }
        public static string GetBlockName(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetContextualKeywordKind(string text) { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind> GetContextualKeywordKinds() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetInstanceExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetKeywordKind(string text) { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind> GetKeywordKinds() { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetLiteralExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetOperatorKind(string operatorMetadataName) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetPreprocessorKeywordKind(string text) { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind> GetPreprocessorKeywordKinds() { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind> GetPunctuationKinds() { throw null; }
        public static System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind> GetReservedKeywordKinds() { throw null; }
        public static string GetText(Microsoft.CodeAnalysis.Accessibility accessibility) { throw null; }
        public static string GetText(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetTypeStatementKind(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind keyword) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind GetUnaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind token) { throw null; }
        public static bool IsAccessibilityModifier(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAccessorStatementAccessorKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use IsAccessorStatementAccessorKeyword instead.", true)]
        public static bool IsAccessorStatementKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAddRemoveHandlerStatementAddHandlerOrRemoveHandlerKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAddressOfOperand(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node) { throw null; }
        public static bool IsAnyToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAssignmentStatementOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public static bool IsAttributeTargetAttributeModifier(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsBinaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsCaseBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsCaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsColon(char c) { throw null; }
        public static bool IsContextualKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsContinueStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsContinueStatementBlockKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsCrefOperatorReferenceOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsCrefSignaturePartModifier(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDeclareStatementCharsetKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use IsDeclareStatementSubOrFunctionKeyword instead.", true)]
        public static bool IsDeclareStatementKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDeclareStatementSubOrFunctionKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use IsDelegateStatementSubOrFunctionKeyword instead.", true)]
        public static bool IsDelegateStatementKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDelegateStatementSubOrFunctionKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsDoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsEndBlockStatementBlockKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsExitStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsExitStatementBlockKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsHash(char c) { throw null; }
        public static bool IsIdentifierPartCharacter(char c) { throw null; }
        public static bool IsIdentifierStartCharacter(char c) { throw null; }
        public static bool IsIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsIfDirectiveTriviaIfOrElseIfKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public static bool IsInstanceExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsInTypeOnlyContext(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node) { throw null; }
        public static bool IsInvocationOrAddressOfOperand(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node) { throw null; }
        public static bool IsInvoked(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node) { throw null; }
        public static bool IsKeywordEventContainerKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsKeywordKind(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLabel(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLabelLabelToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLabelStatementLabelToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLambdaHeader(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use IsLambdaHeaderSubOrFunctionKeyword instead.", true)]
        public static bool IsLambdaHeaderKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLambdaHeaderSubOrFunctionKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLanguagePunctuation(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLiteralExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLiteralExpressionToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsLoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsMemberAccessExpressionOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsMethodBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsMethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use IsMethodStatementSubOrFunctionKeyword instead.", true)]
        public static bool IsMethodStatementKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsMethodStatementSubOrFunctionKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsMultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsName(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public static bool IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsNewLine(char c) { throw null; }
        public static bool IsOnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsOperator(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsOperatorStatementOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsOptionStatementNameKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsOptionStatementValueKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsOrdering(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsOrderingAscendingOrDescendingKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPartitionClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPartitionClauseSkipOrTakeKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPartitionWhileClauseSkipOrTakeKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPredefinedCastExpressionKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPredefinedType(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPreprocessorDirective(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPreprocessorKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPreprocessorPunctuation(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPunctuation(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsPunctuationOrKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsRelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsRelationalCaseClauseOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsRelationalOperator(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsReservedKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsSingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsSpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsSpecialConstraintConstraintKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsStopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsStopOrEndStatementStopOrEndKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind @this) { throw null; }
        public static bool IsTypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsTypeOfExpressionOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsUnaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsUnderscore(char c) { throw null; }
        public static bool IsValidIdentifier(string name) { throw null; }
        public static bool IsWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsWhileOrUntilClauseWhileOrUntilKeyword(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsWhitespace(char c) { throw null; }
        public static bool IsXmlCrefAttributeEndQuoteToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlCrefAttributeStartQuoteToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlMemberAccessExpressionToken2(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlNameAttributeEndQuoteToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlNameAttributeStartQuoteToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlStringEndQuoteToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlStringStartQuoteToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlTextToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) { throw null; }
        public static bool IsXmlWhitespace(char c) { throw null; }
        public static string MakeHalfWidthIdentifier(string text) { throw null; }
        public static Microsoft.CodeAnalysis.VarianceKind VarianceKindFromToken(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
    }
    public enum SyntaxKind : ushort
    {
        AddAssignmentStatement = (ushort)249,
        AddExpression = (ushort)307,
        AddHandlerAccessorBlock = (ushort)85,
        AddHandlerAccessorStatement = (ushort)107,
        AddHandlerKeyword = (ushort)413,
        AddHandlerStatement = (ushort)262,
        AddressOfExpression = (ushort)336,
        AddressOfKeyword = (ushort)414,
        AggregateClause = (ushort)361,
        AggregateKeyword = (ushort)584,
        AggregationRangeVariable = (ushort)355,
        AliasKeyword = (ushort)415,
        AllKeyword = (ushort)585,
        AmpersandEqualsToken = (ushort)664,
        AmpersandToken = (ushort)638,
        AndAlsoExpression = (ushort)332,
        AndAlsoKeyword = (ushort)417,
        AndExpression = (ushort)330,
        AndKeyword = (ushort)416,
        AnonymousObjectCreationExpression = (ushort)298,
        AnsiKeyword = (ushort)586,
        ArgumentList = (ushort)347,
        ArrayCreationExpression = (ushort)301,
        ArrayRankSpecifier = (ushort)134,
        ArrayType = (ushort)396,
        AscendingKeyword = (ushort)587,
        AscendingOrdering = (ushort)375,
        AsKeyword = (ushort)418,
        AsNewClause = (ushort)124,
        AssemblyKeyword = (ushort)588,
        AsteriskEqualsToken = (ushort)665,
        AsteriskToken = (ushort)647,
        AsyncKeyword = (ushort)630,
        AtToken = (ushort)635,
        Attribute = (ushort)136,
        AttributeList = (ushort)135,
        AttributesStatement = (ushort)138,
        AttributeTarget = (ushort)137,
        AutoKeyword = (ushort)589,
        AwaitExpression = (ushort)412,
        AwaitKeyword = (ushort)631,
        BackslashEqualsToken = (ushort)669,
        BackslashToken = (ushort)659,
        BadDirectiveTrivia = (ushort)753,
        BadToken = (ushort)693,
        BeginCDataToken = (ushort)690,
        BinaryConditionalExpression = (ushort)337,
        BinaryKeyword = (ushort)590,
        BooleanKeyword = (ushort)421,
        ByKeyword = (ushort)591,
        ByRefKeyword = (ushort)422,
        ByteKeyword = (ushort)423,
        ByValKeyword = (ushort)424,
        CallKeyword = (ushort)425,
        CallStatement = (ushort)261,
        CaretEqualsToken = (ushort)670,
        CaretToken = (ushort)662,
        CaseBlock = (ushort)207,
        CaseElseBlock = (ushort)210,
        CaseElseStatement = (ushort)212,
        CaseEqualsClause = (ushort)216,
        CaseGreaterThanClause = (ushort)223,
        CaseGreaterThanOrEqualClause = (ushort)222,
        CaseKeyword = (ushort)426,
        CaseLessThanClause = (ushort)218,
        CaseLessThanOrEqualClause = (ushort)219,
        CaseNotEqualsClause = (ushort)217,
        CaseStatement = (ushort)211,
        CatchBlock = (ushort)187,
        CatchFilterClause = (ushort)191,
        CatchKeyword = (ushort)427,
        CatchStatement = (ushort)190,
        CBoolKeyword = (ushort)428,
        CByteKeyword = (ushort)429,
        CCharKeyword = (ushort)432,
        CDateKeyword = (ushort)433,
        CDblKeyword = (ushort)435,
        CDecKeyword = (ushort)434,
        CharacterLiteralExpression = (ushort)272,
        CharacterLiteralToken = (ushort)706,
        CharKeyword = (ushort)436,
        CIntKeyword = (ushort)437,
        ClassBlock = (ushort)53,
        ClassConstraint = (ushort)73,
        ClassKeyword = (ushort)438,
        ClassStatement = (ushort)62,
        CLngKeyword = (ushort)439,
        CloseBraceToken = (ushort)645,
        CloseParenToken = (ushort)643,
        CObjKeyword = (ushort)440,
        CollectionInitializer = (ushort)302,
        CollectionRangeVariable = (ushort)353,
        ColonEqualsToken = (ushort)663,
        ColonToken = (ushort)652,
        ColonTrivia = (ushort)731,
        CommaToken = (ushort)636,
        CommentTrivia = (ushort)732,
        CompareKeyword = (ushort)592,
        CompilationUnit = (ushort)38,
        ConcatenateAssignmentStatement = (ushort)259,
        ConcatenateExpression = (ushort)317,
        ConditionalAccessExpression = (ushort)713,
        ConstDirectiveTrivia = (ushort)736,
        ConstKeyword = (ushort)441,
        ConstructorBlock = (ushort)81,
        ContinueDoStatement = (ushort)167,
        ContinueForStatement = (ushort)168,
        ContinueKeyword = (ushort)443,
        ContinueWhileStatement = (ushort)166,
        CrefOperatorReference = (ushort)409,
        CrefReference = (ushort)404,
        CrefSignature = (ushort)407,
        CrefSignaturePart = (ushort)408,
        CSByteKeyword = (ushort)444,
        CShortKeyword = (ushort)445,
        CSngKeyword = (ushort)446,
        CStrKeyword = (ushort)447,
        CTypeExpression = (ushort)303,
        CTypeKeyword = (ushort)448,
        CUIntKeyword = (ushort)449,
        CULngKeyword = (ushort)450,
        CUShortKeyword = (ushort)453,
        CustomKeyword = (ushort)593,
        DateKeyword = (ushort)454,
        DateLiteralExpression = (ushort)276,
        DateLiteralToken = (ushort)704,
        DecimalKeyword = (ushort)455,
        DecimalLiteralToken = (ushort)703,
        DeclareFunctionStatement = (ushort)97,
        DeclareKeyword = (ushort)456,
        DeclareSubStatement = (ushort)96,
        DefaultKeyword = (ushort)457,
        DelegateFunctionStatement = (ushort)99,
        DelegateKeyword = (ushort)458,
        DelegateSubStatement = (ushort)98,
        DescendingKeyword = (ushort)594,
        DescendingOrdering = (ushort)376,
        DictionaryAccessExpression = (ushort)292,
        DimKeyword = (ushort)459,
        DirectCastExpression = (ushort)304,
        DirectCastKeyword = (ushort)460,
        DisabledTextTrivia = (ushort)735,
        DisableKeyword = (ushort)595,
        DisableWarningDirectiveTrivia = (ushort)749,
        DistinctClause = (ushort)362,
        DistinctKeyword = (ushort)596,
        DivideAssignmentStatement = (ushort)252,
        DivideExpression = (ushort)310,
        DocumentationCommentExteriorTrivia = (ushort)734,
        DocumentationCommentLineBreakToken = (ushort)697,
        DocumentationCommentTrivia = (ushort)710,
        DoKeyword = (ushort)461,
        DollarSignDoubleQuoteToken = (ushort)785,
        DoLoopUntilBlock = (ushort)760,
        DoLoopWhileBlock = (ushort)759,
        DotToken = (ushort)650,
        DoubleKeyword = (ushort)462,
        DoubleQuoteToken = (ushort)676,
        DoUntilLoopBlock = (ushort)758,
        DoUntilStatement = (ushort)772,
        DoWhileLoopBlock = (ushort)757,
        DoWhileStatement = (ushort)771,
        EachKeyword = (ushort)463,
        ElseBlock = (ushort)181,
        ElseCaseClause = (ushort)213,
        ElseDirectiveTrivia = (ushort)739,
        ElseIfBlock = (ushort)180,
        ElseIfDirectiveTrivia = (ushort)738,
        ElseIfKeyword = (ushort)465,
        ElseIfStatement = (ushort)183,
        ElseKeyword = (ushort)464,
        ElseStatement = (ushort)184,
        EmptyStatement = (ushort)2,
        EmptyToken = (ushort)679,
        EnableKeyword = (ushort)599,
        EnableWarningDirectiveTrivia = (ushort)748,
        EndAddHandlerStatement = (ushort)22,
        EndCDataToken = (ushort)691,
        EndClassStatement = (ushort)12,
        EndEnumStatement = (ushort)10,
        EndEventStatement = (ushort)21,
        EndExternalSourceDirectiveTrivia = (ushort)746,
        EndFunctionStatement = (ushort)16,
        EndGetStatement = (ushort)17,
        EndIfDirectiveTrivia = (ushort)740,
        EndIfKeyword = (ushort)580,
        EndIfStatement = (ushort)5,
        EndInterfaceStatement = (ushort)11,
        EndKeyword = (ushort)466,
        EndModuleStatement = (ushort)13,
        EndNamespaceStatement = (ushort)14,
        EndOfFileToken = (ushort)678,
        EndOfInterpolatedStringToken = (ushort)787,
        EndOfLineTrivia = (ushort)730,
        EndOfXmlToken = (ushort)692,
        EndOperatorStatement = (ushort)20,
        EndPropertyStatement = (ushort)19,
        EndRaiseEventStatement = (ushort)24,
        EndRegionDirectiveTrivia = (ushort)744,
        EndRemoveHandlerStatement = (ushort)23,
        EndSelectStatement = (ushort)8,
        EndSetStatement = (ushort)18,
        EndStatement = (ushort)156,
        EndStructureStatement = (ushort)9,
        EndSubStatement = (ushort)15,
        EndSyncLockStatement = (ushort)27,
        EndTryStatement = (ushort)26,
        EndUsingStatement = (ushort)6,
        EndWhileStatement = (ushort)25,
        EndWithStatement = (ushort)7,
        EnumBlock = (ushort)54,
        EnumKeyword = (ushort)467,
        EnumMemberDeclaration = (ushort)78,
        EnumStatement = (ushort)63,
        EqualsExpression = (ushort)319,
        EqualsKeyword = (ushort)600,
        EqualsToken = (ushort)656,
        EqualsValue = (ushort)129,
        EraseKeyword = (ushort)468,
        EraseStatement = (ushort)271,
        ErrorKeyword = (ushort)469,
        ErrorStatement = (ushort)195,
        EventBlock = (ushort)89,
        EventKeyword = (ushort)470,
        EventStatement = (ushort)102,
        ExclamationToken = (ushort)634,
        ExclusiveOrExpression = (ushort)329,
        ExitDoStatement = (ushort)157,
        ExitForStatement = (ushort)158,
        ExitFunctionStatement = (ushort)160,
        ExitKeyword = (ushort)471,
        ExitOperatorStatement = (ushort)161,
        ExitPropertyStatement = (ushort)162,
        ExitSelectStatement = (ushort)164,
        ExitSubStatement = (ushort)159,
        ExitTryStatement = (ushort)163,
        ExitWhileStatement = (ushort)165,
        ExplicitKeyword = (ushort)601,
        ExponentiateAssignmentStatement = (ushort)254,
        ExponentiateExpression = (ushort)314,
        ExpressionRangeVariable = (ushort)354,
        ExpressionStatement = (ushort)139,
        ExternalChecksumDirectiveTrivia = (ushort)747,
        ExternalChecksumKeyword = (ushort)603,
        ExternalSourceDirectiveTrivia = (ushort)745,
        ExternalSourceKeyword = (ushort)602,
        FalseKeyword = (ushort)474,
        FalseLiteralExpression = (ushort)274,
        FieldDeclaration = (ushort)119,
        FinallyBlock = (ushort)188,
        FinallyKeyword = (ushort)475,
        FinallyStatement = (ushort)194,
        FloatingLiteralToken = (ushort)702,
        ForBlock = (ushort)237,
        ForEachBlock = (ushort)238,
        ForEachStatement = (ushort)241,
        ForKeyword = (ushort)476,
        ForStatement = (ushort)239,
        ForStepClause = (ushort)240,
        FriendKeyword = (ushort)477,
        FromClause = (ushort)359,
        FromKeyword = (ushort)604,
        FunctionAggregation = (ushort)357,
        FunctionBlock = (ushort)80,
        FunctionKeyword = (ushort)478,
        FunctionLambdaHeader = (ushort)346,
        FunctionStatement = (ushort)94,
        GenericName = (ushort)400,
        GetAccessorBlock = (ushort)83,
        GetAccessorStatement = (ushort)105,
        GetKeyword = (ushort)479,
        GetTypeExpression = (ushort)285,
        GetTypeKeyword = (ushort)480,
        GetXmlNamespaceExpression = (ushort)290,
        GetXmlNamespaceKeyword = (ushort)481,
        GlobalKeyword = (ushort)482,
        GlobalName = (ushort)402,
        GosubKeyword = (ushort)581,
        GoToKeyword = (ushort)483,
        GoToStatement = (ushort)149,
        GreaterThanEqualsToken = (ushort)658,
        GreaterThanExpression = (ushort)324,
        GreaterThanGreaterThanEqualsToken = (ushort)674,
        GreaterThanGreaterThanToken = (ushort)672,
        GreaterThanOrEqualExpression = (ushort)323,
        GreaterThanToken = (ushort)657,
        GroupAggregation = (ushort)358,
        GroupByClause = (ushort)368,
        GroupJoinClause = (ushort)371,
        GroupKeyword = (ushort)605,
        HandlesClause = (ushort)113,
        HandlesClauseItem = (ushort)117,
        HandlesKeyword = (ushort)484,
        HashToken = (ushort)637,
        IdentifierLabel = (ushort)150,
        IdentifierName = (ushort)399,
        IdentifierToken = (ushort)700,
        IfDirectiveTrivia = (ushort)737,
        IfKeyword = (ushort)485,
        IfStatement = (ushort)182,
        ImplementsClause = (ushort)112,
        ImplementsKeyword = (ushort)486,
        ImplementsStatement = (ushort)58,
        ImportAliasClause = (ushort)754,
        ImportsKeyword = (ushort)487,
        ImportsStatement = (ushort)42,
        IncompleteMember = (ushort)118,
        InferKeyword = (ushort)606,
        InferredFieldInitializer = (ushort)127,
        InheritsKeyword = (ushort)489,
        InheritsStatement = (ushort)57,
        InKeyword = (ushort)488,
        IntegerDivideAssignmentStatement = (ushort)253,
        IntegerDivideExpression = (ushort)311,
        IntegerKeyword = (ushort)490,
        IntegerLiteralToken = (ushort)701,
        InterfaceBlock = (ushort)52,
        InterfaceKeyword = (ushort)491,
        InterfaceStatement = (ushort)61,
        InterpolatedStringExpression = (ushort)780,
        InterpolatedStringText = (ushort)781,
        InterpolatedStringTextToken = (ushort)786,
        Interpolation = (ushort)782,
        InterpolationAlignmentClause = (ushort)783,
        InterpolationFormatClause = (ushort)784,
        IntoKeyword = (ushort)607,
        InvocationExpression = (ushort)296,
        IsExpression = (ushort)325,
        IsFalseKeyword = (ushort)608,
        IsKeyword = (ushort)492,
        IsNotExpression = (ushort)326,
        IsNotKeyword = (ushort)495,
        IsTrueKeyword = (ushort)609,
        IteratorKeyword = (ushort)632,
        JoinCondition = (ushort)369,
        JoinKeyword = (ushort)610,
        KeyKeyword = (ushort)611,
        KeywordEventContainer = (ushort)114,
        LabelStatement = (ushort)148,
        LeftShiftAssignmentStatement = (ushort)255,
        LeftShiftExpression = (ushort)315,
        LessThanEqualsToken = (ushort)654,
        LessThanExclamationMinusMinusToken = (ushort)684,
        LessThanExpression = (ushort)321,
        LessThanGreaterThanToken = (ushort)655,
        LessThanLessThanEqualsToken = (ushort)673,
        LessThanLessThanToken = (ushort)671,
        LessThanOrEqualExpression = (ushort)322,
        LessThanPercentEqualsToken = (ushort)688,
        LessThanQuestionToken = (ushort)686,
        LessThanSlashToken = (ushort)683,
        LessThanToken = (ushort)653,
        LetClause = (ushort)360,
        LetKeyword = (ushort)496,
        LibKeyword = (ushort)497,
        LikeExpression = (ushort)327,
        LikeKeyword = (ushort)498,
        LineContinuationTrivia = (ushort)733,
        List = (ushort)1,
        LocalDeclarationStatement = (ushort)147,
        LongKeyword = (ushort)499,
        LoopKeyword = (ushort)500,
        LoopUntilStatement = (ushort)775,
        LoopWhileStatement = (ushort)774,
        MeExpression = (ushort)282,
        MeKeyword = (ushort)501,
        MidAssignmentStatement = (ushort)248,
        MidExpression = (ushort)260,
        MidKeyword = (ushort)612,
        MinusEqualsToken = (ushort)667,
        MinusMinusGreaterThanToken = (ushort)685,
        MinusToken = (ushort)649,
        ModifiedIdentifier = (ushort)133,
        ModKeyword = (ushort)502,
        ModuleBlock = (ushort)50,
        ModuleKeyword = (ushort)503,
        ModuleStatement = (ushort)59,
        ModuloExpression = (ushort)318,
        MultiLineFunctionLambdaExpression = (ushort)343,
        MultiLineIfBlock = (ushort)173,
        MultiLineSubLambdaExpression = (ushort)344,
        MultiplyAssignmentStatement = (ushort)251,
        MultiplyExpression = (ushort)309,
        MustInheritKeyword = (ushort)504,
        MustOverrideKeyword = (ushort)505,
        MyBaseExpression = (ushort)283,
        MyBaseKeyword = (ushort)506,
        MyClassExpression = (ushort)284,
        MyClassKeyword = (ushort)507,
        NameColonEquals = (ushort)755,
        NamedFieldInitializer = (ushort)128,
        NameOfExpression = (ushort)779,
        NameOfKeyword = (ushort)778,
        NamespaceBlock = (ushort)48,
        NamespaceKeyword = (ushort)508,
        NamespaceStatement = (ushort)49,
        NarrowingKeyword = (ushort)509,
        NewConstraint = (ushort)72,
        NewKeyword = (ushort)511,
        NextKeyword = (ushort)510,
        NextLabel = (ushort)152,
        NextStatement = (ushort)242,
        None = (ushort)0,
        NotEqualsExpression = (ushort)320,
        NotExpression = (ushort)335,
        NothingKeyword = (ushort)513,
        NothingLiteralExpression = (ushort)280,
        NotInheritableKeyword = (ushort)516,
        NotKeyword = (ushort)512,
        NotOverridableKeyword = (ushort)517,
        NullableType = (ushort)397,
        NumericLabel = (ushort)151,
        NumericLiteralExpression = (ushort)275,
        ObjectCollectionInitializer = (ushort)126,
        ObjectCreationExpression = (ushort)297,
        ObjectKeyword = (ushort)518,
        ObjectMemberInitializer = (ushort)125,
        OffKeyword = (ushort)613,
        OfKeyword = (ushort)519,
        OmittedArgument = (ushort)348,
        OnErrorGoToLabelStatement = (ushort)198,
        OnErrorGoToMinusOneStatement = (ushort)197,
        OnErrorGoToZeroStatement = (ushort)196,
        OnErrorResumeNextStatement = (ushort)199,
        OnKeyword = (ushort)520,
        OpenBraceToken = (ushort)644,
        OpenParenToken = (ushort)642,
        OperatorBlock = (ushort)82,
        OperatorKeyword = (ushort)521,
        OperatorStatement = (ushort)103,
        OptionalKeyword = (ushort)523,
        OptionKeyword = (ushort)522,
        OptionStatement = (ushort)41,
        OrderByClause = (ushort)372,
        OrderKeyword = (ushort)614,
        OrElseExpression = (ushort)331,
        OrElseKeyword = (ushort)525,
        OrExpression = (ushort)328,
        OrKeyword = (ushort)524,
        OutKeyword = (ushort)615,
        OverloadsKeyword = (ushort)526,
        OverridableKeyword = (ushort)527,
        OverridesKeyword = (ushort)528,
        ParamArrayKeyword = (ushort)529,
        Parameter = (ushort)132,
        ParameterList = (ushort)92,
        ParenthesizedExpression = (ushort)281,
        PartialKeyword = (ushort)530,
        PercentGreaterThanToken = (ushort)689,
        PlusEqualsToken = (ushort)666,
        PlusToken = (ushort)648,
        PredefinedCastExpression = (ushort)306,
        PredefinedType = (ushort)398,
        PreserveKeyword = (ushort)616,
        PrintStatement = (ushort)140,
        PrivateKeyword = (ushort)531,
        PropertyBlock = (ushort)88,
        PropertyKeyword = (ushort)532,
        PropertyStatement = (ushort)104,
        ProtectedKeyword = (ushort)533,
        PublicKeyword = (ushort)534,
        QualifiedCrefOperatorReference = (ushort)410,
        QualifiedName = (ushort)401,
        QueryExpression = (ushort)352,
        QuestionGreaterThanToken = (ushort)687,
        QuestionToken = (ushort)675,
        RaiseEventAccessorBlock = (ushort)87,
        RaiseEventAccessorStatement = (ushort)111,
        RaiseEventKeyword = (ushort)537,
        RaiseEventStatement = (ushort)264,
        RangeArgument = (ushort)351,
        RangeCaseClause = (ushort)215,
        ReadOnlyKeyword = (ushort)538,
        RedimClause = (ushort)270,
        ReDimKeyword = (ushort)539,
        ReDimPreserveStatement = (ushort)267,
        ReDimStatement = (ushort)266,
        ReferenceDirectiveTrivia = (ushort)750,
        ReferenceKeyword = (ushort)442,
        RegionDirectiveTrivia = (ushort)741,
        RegionKeyword = (ushort)617,
        REMKeyword = (ushort)540,
        RemoveHandlerAccessorBlock = (ushort)86,
        RemoveHandlerAccessorStatement = (ushort)108,
        RemoveHandlerKeyword = (ushort)541,
        RemoveHandlerStatement = (ushort)263,
        ResumeKeyword = (ushort)542,
        ResumeLabelStatement = (ushort)201,
        ResumeNextStatement = (ushort)202,
        ResumeStatement = (ushort)200,
        ReturnKeyword = (ushort)543,
        ReturnStatement = (ushort)169,
        RightShiftAssignmentStatement = (ushort)258,
        RightShiftExpression = (ushort)316,
        SByteKeyword = (ushort)544,
        SelectBlock = (ushort)203,
        SelectClause = (ushort)377,
        SelectKeyword = (ushort)545,
        SelectStatement = (ushort)204,
        SemicolonToken = (ushort)646,
        SetAccessorBlock = (ushort)84,
        SetAccessorStatement = (ushort)106,
        SetKeyword = (ushort)546,
        ShadowsKeyword = (ushort)547,
        SharedKeyword = (ushort)548,
        ShortKeyword = (ushort)549,
        SimpleArgument = (ushort)349,
        SimpleAsClause = (ushort)123,
        SimpleAssignmentStatement = (ushort)247,
        SimpleCaseClause = (ushort)214,
        SimpleDoLoopBlock = (ushort)756,
        SimpleDoStatement = (ushort)770,
        SimpleImportsClause = (ushort)44,
        SimpleJoinClause = (ushort)370,
        SimpleLoopStatement = (ushort)773,
        SimpleMemberAccessExpression = (ushort)291,
        SingleKeyword = (ushort)550,
        SingleLineElseClause = (ushort)172,
        SingleLineFunctionLambdaExpression = (ushort)339,
        SingleLineIfPart = (ushort)171,
        SingleLineIfStatement = (ushort)170,
        SingleLineSubLambdaExpression = (ushort)342,
        SingleQuoteToken = (ushort)641,
        SkipClause = (ushort)366,
        SkipKeyword = (ushort)620,
        SkippedTokensTrivia = (ushort)709,
        SkipWhileClause = (ushort)364,
        SlashEqualsToken = (ushort)668,
        SlashGreaterThanToken = (ushort)680,
        SlashToken = (ushort)651,
        StatementTerminatorToken = (ushort)677,
        StaticKeyword = (ushort)551,
        StepKeyword = (ushort)552,
        StopKeyword = (ushort)553,
        StopStatement = (ushort)153,
        StrictKeyword = (ushort)621,
        StringKeyword = (ushort)554,
        StringLiteralExpression = (ushort)279,
        StringLiteralToken = (ushort)705,
        StructureBlock = (ushort)51,
        StructureConstraint = (ushort)74,
        StructureKeyword = (ushort)555,
        StructureStatement = (ushort)60,
        SubBlock = (ushort)79,
        SubKeyword = (ushort)558,
        SubLambdaHeader = (ushort)345,
        SubNewStatement = (ushort)95,
        SubStatement = (ushort)93,
        SubtractAssignmentStatement = (ushort)250,
        SubtractExpression = (ushort)308,
        SyncLockBlock = (ushort)145,
        SyncLockKeyword = (ushort)559,
        SyncLockStatement = (ushort)226,
        TakeClause = (ushort)367,
        TakeKeyword = (ushort)622,
        TakeWhileClause = (ushort)365,
        TernaryConditionalExpression = (ushort)338,
        TextKeyword = (ushort)623,
        ThenKeyword = (ushort)560,
        ThrowKeyword = (ushort)561,
        ThrowStatement = (ushort)246,
        ToKeyword = (ushort)562,
        TrueKeyword = (ushort)563,
        TrueLiteralExpression = (ushort)273,
        TryBlock = (ushort)185,
        TryCastExpression = (ushort)305,
        TryCastKeyword = (ushort)565,
        TryKeyword = (ushort)564,
        TryStatement = (ushort)189,
        TypeArgumentList = (ushort)403,
        TypeConstraint = (ushort)75,
        TypeKeyword = (ushort)628,
        TypeOfIsExpression = (ushort)286,
        TypeOfIsNotExpression = (ushort)287,
        TypeOfKeyword = (ushort)566,
        TypeParameter = (ushort)67,
        TypeParameterList = (ushort)66,
        TypeParameterMultipleConstraintClause = (ushort)71,
        TypeParameterSingleConstraintClause = (ushort)70,
        UIntegerKeyword = (ushort)567,
        ULongKeyword = (ushort)568,
        UnaryMinusExpression = (ushort)334,
        UnaryPlusExpression = (ushort)333,
        UnicodeKeyword = (ushort)624,
        UntilClause = (ushort)777,
        UntilKeyword = (ushort)625,
        UShortKeyword = (ushort)569,
        UsingBlock = (ushort)144,
        UsingKeyword = (ushort)570,
        UsingStatement = (ushort)243,
        VariableDeclarator = (ushort)122,
        VariableNameEquals = (ushort)356,
        VariantKeyword = (ushort)582,
        WarningKeyword = (ushort)626,
        WendKeyword = (ushort)583,
        WhenKeyword = (ushort)571,
        WhereClause = (ushort)363,
        WhereKeyword = (ushort)627,
        WhileBlock = (ushort)141,
        WhileClause = (ushort)776,
        WhileKeyword = (ushort)572,
        WhileStatement = (ushort)234,
        WhitespaceTrivia = (ushort)729,
        WideningKeyword = (ushort)573,
        WithBlock = (ushort)146,
        WithEventsEventContainer = (ushort)115,
        WithEventsKeyword = (ushort)575,
        WithEventsPropertyEventContainer = (ushort)116,
        WithKeyword = (ushort)574,
        WithStatement = (ushort)265,
        WriteOnlyKeyword = (ushort)578,
        XmlAttribute = (ushort)386,
        XmlAttributeAccessExpression = (ushort)295,
        XmlBracketedName = (ushort)390,
        XmlCDataSection = (ushort)394,
        XmlComment = (ushort)392,
        XmlCrefAttribute = (ushort)711,
        XmlDeclaration = (ushort)379,
        XmlDeclarationOption = (ushort)380,
        XmlDescendantAccessExpression = (ushort)294,
        XmlDocument = (ushort)378,
        XmlElement = (ushort)381,
        XmlElementAccessExpression = (ushort)293,
        XmlElementEndTag = (ushort)384,
        XmlElementStartTag = (ushort)383,
        XmlEmbeddedExpression = (ushort)395,
        XmlEmptyElement = (ushort)385,
        XmlEntityLiteralToken = (ushort)696,
        XmlKeyword = (ushort)629,
        XmlName = (ushort)389,
        XmlNameAttribute = (ushort)712,
        XmlNamespaceImportsClause = (ushort)45,
        XmlNameToken = (ushort)694,
        XmlPrefix = (ushort)391,
        XmlPrefixName = (ushort)388,
        XmlProcessingInstruction = (ushort)393,
        XmlString = (ushort)387,
        XmlText = (ushort)382,
        XmlTextLiteralToken = (ushort)695,
        XorKeyword = (ushort)579,
        YieldKeyword = (ushort)633,
        YieldStatement = (ushort)411,
    }
    public static partial class TypedConstantExtensions
    {
        public static string ToVisualBasicString(this Microsoft.CodeAnalysis.TypedConstant constant) { throw null; }
    }
    public sealed partial class VisualBasicCommandLineArguments : Microsoft.CodeAnalysis.CommandLineArguments
    {
        internal VisualBasicCommandLineArguments() { }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions CompilationOptions { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        protected override Microsoft.CodeAnalysis.CompilationOptions CompilationOptionsCore { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions ParseOptions { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        protected override Microsoft.CodeAnalysis.ParseOptions ParseOptionsCore { get { throw null; } }
    }
    public partial class VisualBasicCommandLineParser : Microsoft.CodeAnalysis.CommandLineParser
    {
        internal VisualBasicCommandLineParser() { }
        public static Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineParser Default { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        protected override string RegularFileExtension { get { throw null; } }
        protected override string ScriptFileExtension { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArguments Parse(System.Collections.Generic.IEnumerable<string> args, string baseDirectory, string sdkDirectory, string additionalReferenceDirectories=null) { throw null; }
        public static System.Collections.Generic.IReadOnlyDictionary<string, object> ParseConditionalCompilationSymbols(string symbolList, out System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> diagnostics, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> symbols=null) { diagnostics = default(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic>); throw null; }
    }
    public sealed partial class VisualBasicCompilation : Microsoft.CodeAnalysis.Compilation
    {
        internal VisualBasicCompilation() { }
        protected override Microsoft.CodeAnalysis.IAssemblySymbol CommonAssembly { get { throw null; } }
        protected override Microsoft.CodeAnalysis.ITypeSymbol CommonDynamicType { get { throw null; } }
        protected override Microsoft.CodeAnalysis.INamespaceSymbol CommonGlobalNamespace { get { throw null; } }
        protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonObjectType { get { throw null; } }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonOptions { get { throw null; } }
        protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonScriptClass { get { throw null; } }
        protected override Microsoft.CodeAnalysis.IModuleSymbol CommonSourceModule { get { throw null; } }
        protected override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> CommonSyntaxTrees { get { throw null; } }
        public override System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.MetadataReference> DirectiveReferences { get { throw null; } }
        public override bool IsCaseSensitive { get { throw null; } }
        public override string Language { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.LanguageVersion LanguageVersion { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions Options { get { throw null; } }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.AssemblyIdentity> ReferencedAssemblyNames { get { throw null; } }
        public new System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.SyntaxTree> SyntaxTrees { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddReferences(params Microsoft.CodeAnalysis.MetadataReference[] references) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> references) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddSyntaxTrees(params Microsoft.CodeAnalysis.SyntaxTree[] trees) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) { throw null; }
        protected override void AppendDefaultVersionResource(System.IO.Stream resourceStream) { }
        public Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(Microsoft.CodeAnalysis.ITypeSymbol source, Microsoft.CodeAnalysis.ITypeSymbol destination) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation Clone() { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonAddSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonClone() { throw null; }
        protected override bool CommonContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree syntaxTree) { throw null; }
        protected override Microsoft.CodeAnalysis.IArrayTypeSymbol CommonCreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol elementType, int rank) { throw null; }
        protected override Microsoft.CodeAnalysis.IPointerTypeSymbol CommonCreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol elementType) { throw null; }
        protected override Microsoft.CodeAnalysis.ISymbol CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference reference) { throw null; }
        protected override Microsoft.CodeAnalysis.INamespaceSymbol CommonGetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol namespaceSymbol) { throw null; }
        protected override Microsoft.CodeAnalysis.IMethodSymbol CommonGetEntryPoint(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override Microsoft.CodeAnalysis.SemanticModel CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility) { throw null; }
        protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonGetSpecialType(Microsoft.CodeAnalysis.SpecialType specialType) { throw null; }
        protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonGetTypeByMetadataName(string metadataName) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonRemoveAllSyntaxTrees() { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonRemoveSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonWithAssemblyName(string assemblyName) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonWithOptions(Microsoft.CodeAnalysis.CompilationOptions options) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonWithReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> newReferences) { throw null; }
        protected override Microsoft.CodeAnalysis.Compilation CommonWithScriptCompilationInfo(Microsoft.CodeAnalysis.ScriptCompilationInfo info) { throw null; }
        public override bool ContainsSymbolsWithName(System.Func<string, bool> predicate, Microsoft.CodeAnalysis.SymbolFilter filter=(Microsoft.CodeAnalysis.SymbolFilter)(6), System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public new bool ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree syntaxTree) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation Create(string assemblyName, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> syntaxTrees=null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> references=null, Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions options=null) { throw null; }
        public override Microsoft.CodeAnalysis.INamedTypeSymbol CreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name, int arity) { throw null; }
        public override System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> GetDeclarationDiagnostics(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> GetMethodBodyDiagnostics(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic> GetParseDiagnostics(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public new Microsoft.CodeAnalysis.SemanticModel GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility=false) { throw null; }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ISymbol> GetSymbolsWithName(System.Func<string, bool> predicate, Microsoft.CodeAnalysis.SymbolFilter filter=(Microsoft.CodeAnalysis.SymbolFilter)(6), System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveAllReferences() { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveAllSyntaxTrees() { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveReferences(params Microsoft.CodeAnalysis.MetadataReference[] references) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> references) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveSyntaxTrees(params Microsoft.CodeAnalysis.SyntaxTree[] trees) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveSyntaxTrees(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTree> trees) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation ReplaceReference(Microsoft.CodeAnalysis.MetadataReference oldReference, Microsoft.CodeAnalysis.MetadataReference newReference) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree) { throw null; }
        public override Microsoft.CodeAnalysis.CompilationReference ToMetadataReference(System.Collections.Immutable.ImmutableArray<string> aliases=default(System.Collections.Immutable.ImmutableArray<string>), bool embedInteropTypes=false) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithAssemblyName(string assemblyName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithOptions(Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions newOptions) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithReferences(params Microsoft.CodeAnalysis.MetadataReference[] newReferences) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithReferences(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.MetadataReference> newReferences) { throw null; }
    }
    public sealed partial class VisualBasicCompilationOptions : Microsoft.CodeAnalysis.CompilationOptions, System.IEquatable<Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions>
    {
        public VisualBasicCompilationOptions(Microsoft.CodeAnalysis.OutputKind outputKind, bool reportSuppressedDiagnostics, string moduleName=null, string mainTypeName=null, string scriptClassName="Script", System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> globalImports=null, string rootNamespace=null, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict=(Microsoft.CodeAnalysis.VisualBasic.OptionStrict)(0), bool optionInfer=true, bool optionExplicit=true, bool optionCompareText=false, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions=null, bool embedVbCoreRuntime=false, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel=(Microsoft.CodeAnalysis.OptimizationLevel)(0), bool checkOverflow=true, string cryptoKeyContainer=null, string cryptoKeyFile=null, System.Collections.Immutable.ImmutableArray<byte> cryptoPublicKey=default(System.Collections.Immutable.ImmutableArray<byte>), System.Nullable<bool> delaySign=default(System.Nullable<bool>), Microsoft.CodeAnalysis.Platform platform=(Microsoft.CodeAnalysis.Platform)(0), Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption=(Microsoft.CodeAnalysis.ReportDiagnostic)(0), System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> specificDiagnosticOptions=null, bool concurrentBuild=true, bool deterministic=false, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver=null, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver=null, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver=null, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer=null, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider=null) { }
        public VisualBasicCompilationOptions(Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> globalImports, string rootNamespace, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, System.Collections.Immutable.ImmutableArray<byte> cryptoPublicKey, System.Nullable<bool> delaySign, Microsoft.CodeAnalysis.Platform platform, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> specificDiagnosticOptions, bool concurrentBuild, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider) { }
        public VisualBasicCompilationOptions(Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> globalImports, string rootNamespace, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, System.Collections.Immutable.ImmutableArray<byte> cryptoPublicKey, System.Nullable<bool> delaySign, Microsoft.CodeAnalysis.Platform platform, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> specificDiagnosticOptions, bool concurrentBuild, bool deterministic, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider) { }
        public VisualBasicCompilationOptions(Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName=null, string mainTypeName=null, string scriptClassName="Script", System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> globalImports=null, string rootNamespace=null, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict=(Microsoft.CodeAnalysis.VisualBasic.OptionStrict)(0), bool optionInfer=true, bool optionExplicit=true, bool optionCompareText=false, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions=null, bool embedVbCoreRuntime=false, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel=(Microsoft.CodeAnalysis.OptimizationLevel)(0), bool checkOverflow=true, string cryptoKeyContainer=null, string cryptoKeyFile=null, System.Collections.Immutable.ImmutableArray<byte> cryptoPublicKey=default(System.Collections.Immutable.ImmutableArray<byte>), System.Nullable<bool> delaySign=default(System.Nullable<bool>), Microsoft.CodeAnalysis.Platform platform=(Microsoft.CodeAnalysis.Platform)(0), Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption=(Microsoft.CodeAnalysis.ReportDiagnostic)(0), System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> specificDiagnosticOptions=null, bool concurrentBuild=true, bool deterministic=false, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver=null, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver=null, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver=null, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer=null, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider=null, bool publicSign=false, bool reportSuppressedDiagnostics=false) { }
        public bool EmbedVbCoreRuntime { get { throw null; } }
        public System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> GlobalImports { get { throw null; } }
        public bool OptionCompareText { get { throw null; } }
        public bool OptionExplicit { get { throw null; } }
        public bool OptionInfer { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.OptionStrict OptionStrict { get { throw null; } }
        public string RootNamespace { get { throw null; } }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithDeterministic(bool deterministic) { throw null; }
        [System.ObsoleteAttribute]
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithFeatures(System.Collections.Immutable.ImmutableArray<string> features) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic value) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver resolver) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel value) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithOutputKind(Microsoft.CodeAnalysis.OutputKind kind) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithPlatform(Microsoft.CodeAnalysis.Platform platform) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithPublicSign(bool publicSign) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithReportSuppressedDiagnostics(bool reportSuppressedDiagnostics) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver resolver) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> specificDiagnosticOptions) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic> specificDiagnosticOptions) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider provider) { throw null; }
        protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver resolver) { throw null; }
        public bool Equals(Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions other) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithConcurrentBuild(bool concurrentBuild) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoKeyContainer(string name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoKeyFile(string path) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoPublicKey(System.Collections.Immutable.ImmutableArray<byte> value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithDelaySign(System.Nullable<bool> value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithDeterministic(bool deterministic) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithEmbedVbCoreRuntime(bool value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports(params Microsoft.CodeAnalysis.VisualBasic.GlobalImport[] globalImports) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> globalImports) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.VisualBasic.GlobalImport> globalImports) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMainTypeName(string name) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver resolver) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithModuleName(string moduleName) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionCompareText(bool value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionExplicit(bool value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionInfer(bool value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionStrict(Microsoft.CodeAnalysis.VisualBasic.OptionStrict value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOutputKind(Microsoft.CodeAnalysis.OutputKind kind) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOverflowChecks(bool enabled) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithParseOptions(Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithPlatform(Microsoft.CodeAnalysis.Platform value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithPublicSign(bool value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithReportSuppressedDiagnostics(bool value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithRootNamespace(string rootNamespace) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithScriptClassName(string name) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver resolver) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.CodeAnalysis.ReportDiagnostic>> value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary<string, Microsoft.CodeAnalysis.ReportDiagnostic> value) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider provider) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver resolver) { throw null; }
    }
    public partial class VisualBasicDiagnosticFormatter : Microsoft.CodeAnalysis.DiagnosticFormatter
    {
        protected VisualBasicDiagnosticFormatter() { }
        public static Microsoft.CodeAnalysis.VisualBasic.VisualBasicDiagnosticFormatter Instance { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
    }
    public static partial class VisualBasicExtensions
    {
        public static Microsoft.CodeAnalysis.SyntaxTokenList Add(this Microsoft.CodeAnalysis.SyntaxTokenList list, params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IAliasSymbol> AliasImports(this Microsoft.CodeAnalysis.Compilation compilation) { throw null; }
        public static Microsoft.CodeAnalysis.ControlFlowAnalysis AnalyzeControlFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax statement) { throw null; }
        public static Microsoft.CodeAnalysis.ControlFlowAnalysis AnalyzeControlFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax firstStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax lastStatement) { throw null; }
        public static Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax statement) { throw null; }
        public static Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax firstStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax lastStatement) { throw null; }
        public static Microsoft.CodeAnalysis.IFieldSymbol AssociatedField(this Microsoft.CodeAnalysis.IEventSymbol eventSymbol) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(this Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.ITypeSymbol source, Microsoft.CodeAnalysis.ITypeSymbol destination) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.ITypeSymbol destination) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.ITypeSymbol destination) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.AggregateClauseSymbolInfo GetAggregateClauseSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax aggregateSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IAliasSymbol GetAliasInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax nameSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.AwaitExpressionInfo GetAwaitExpressionInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax awaitExpression, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static System.Nullable<Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase> GetBase(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetCollectionInitializerSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.CollectionRangeVariableSymbolInfo GetCollectionRangeVariableSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax variableSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax GetCompilationUnitRoot(this Microsoft.CodeAnalysis.SyntaxTree tree) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetConversion(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode expression, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax rangeVariableSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax anonymousObjectCreationExpressionSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.ILocalSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax rangeVariableSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IFieldSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IEventSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IEventSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax rangeVariableSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax fieldInitializerSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.ILabelSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.ISymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifierSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamespaceSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamespaceSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IParameterSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax parameter, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IAliasSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.ITypeParameterSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax typeParameter, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static System.Collections.Generic.IList<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax> GetDirectives(this Microsoft.CodeAnalysis.SyntaxNode node, System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> filter=null) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.AttributeData> GetFieldAttributes(this Microsoft.CodeAnalysis.IEventSymbol eventSymbol) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetFirstDirective(this Microsoft.CodeAnalysis.SyntaxNode node, System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> predicate=null) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo GetForEachStatementInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo GetForEachStatementInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node) { throw null; }
        public static string GetIdentifierText(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetLastDirective(this Microsoft.CodeAnalysis.SyntaxNode node, System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> predicate=null) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol> GetMemberGroup(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol> GetMemberGroup(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> GetModuleMembers(this Microsoft.CodeAnalysis.INamespaceSymbol @namespace) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamedTypeSymbol> GetModuleMembers(this Microsoft.CodeAnalysis.INamespaceSymbol @namespace, string name) { throw null; }
        public static Microsoft.CodeAnalysis.PreprocessingSymbolInfo GetPreprocessingSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node) { throw null; }
        public static Microsoft.CodeAnalysis.INamedTypeSymbol GetSpecialType(this Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.SpecialType typeId) { throw null; }
        public static Microsoft.CodeAnalysis.IAliasSymbol GetSpeculativeAliasInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax nameSyntax, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetSpeculativeConversion(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.ISymbol> GetSpeculativeMemberGroup(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) { throw null; }
        public static Microsoft.CodeAnalysis.TypeInfo GetSpeculativeTypeInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax crefReference, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax variableSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax functionSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax orderingSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax clauseSyntax, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter GetTypeCharacter(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.TypeInfo GetTypeInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.TypeInfo GetTypeInfo(this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.VisualBasic.HandledEvent> HandledEvents(this Microsoft.CodeAnalysis.IMethodSymbol methodSymbol) { throw null; }
        public static bool HasAssociatedField(this Microsoft.CodeAnalysis.IEventSymbol eventSymbol) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTokenList Insert(this Microsoft.CodeAnalysis.SyntaxTokenList list, int index, params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public static bool IsBracketed(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static bool IsCatch(this Microsoft.CodeAnalysis.ILocalSymbol localSymbol) { throw null; }
        public static bool IsContextualKeyword(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static bool IsDefault(this Microsoft.CodeAnalysis.IPropertySymbol propertySymbol) { throw null; }
        public static bool IsFor(this Microsoft.CodeAnalysis.ILocalSymbol localSymbol) { throw null; }
        public static bool IsForEach(this Microsoft.CodeAnalysis.ILocalSymbol localSymbol) { throw null; }
        public static bool IsImplicitlyDeclared(this Microsoft.CodeAnalysis.IEventSymbol eventSymbol) { throw null; }
        public static bool IsKeyword(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static bool IsMe(this Microsoft.CodeAnalysis.IParameterSymbol parameterSymbol) { throw null; }
        public static bool IsMustOverride(this Microsoft.CodeAnalysis.ISymbol symbol) { throw null; }
        public static bool IsNotOverridable(this Microsoft.CodeAnalysis.ISymbol symbol) { throw null; }
        public static bool IsOverloads(this Microsoft.CodeAnalysis.IMethodSymbol methodSymbol) { throw null; }
        public static bool IsOverloads(this Microsoft.CodeAnalysis.IPropertySymbol propertySymbol) { throw null; }
        public static bool IsOverridable(this Microsoft.CodeAnalysis.ISymbol symbol) { throw null; }
        public static bool IsOverrides(this Microsoft.CodeAnalysis.ISymbol symbol) { throw null; }
        public static bool IsPreprocessorKeyword(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static bool IsReservedKeyword(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static bool IsShared(this Microsoft.CodeAnalysis.ISymbol symbol) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(this Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(this Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(this Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(this Microsoft.CodeAnalysis.SyntaxTrivia trivia) { throw null; }
        public static System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.INamespaceOrTypeSymbol> MemberImports(this Microsoft.CodeAnalysis.Compilation compilation) { throw null; }
        public static bool OptionCompareText(this Microsoft.CodeAnalysis.SemanticModel semanticModel) { throw null; }
        public static bool OptionExplicit(this Microsoft.CodeAnalysis.SemanticModel semanticModel) { throw null; }
        public static bool OptionInfer(this Microsoft.CodeAnalysis.SemanticModel semanticModel) { throw null; }
        public static Microsoft.CodeAnalysis.VisualBasic.OptionStrict OptionStrict(this Microsoft.CodeAnalysis.SemanticModel semanticModel) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken ReplaceTrivia(this Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.SyntaxTrivia oldTrivia, Microsoft.CodeAnalysis.SyntaxTrivia newTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxToken ReplaceTrivia(this Microsoft.CodeAnalysis.SyntaxToken token, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia> computeReplacementTrivia) { throw null; }
        public static Microsoft.CodeAnalysis.INamespaceSymbol RootNamespace(this Microsoft.CodeAnalysis.Compilation compilation) { throw null; }
        public static bool TryGetSpeculativeSemanticModel(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, out Microsoft.CodeAnalysis.SemanticModel speculativeModel) { speculativeModel = default(Microsoft.CodeAnalysis.SemanticModel); throw null; }
        public static bool TryGetSpeculativeSemanticModel(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, out Microsoft.CodeAnalysis.SemanticModel speculativeModel) { speculativeModel = default(Microsoft.CodeAnalysis.SemanticModel); throw null; }
        public static bool TryGetSpeculativeSemanticModel(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax statement, out Microsoft.CodeAnalysis.SemanticModel speculativeModel) { speculativeModel = default(Microsoft.CodeAnalysis.SemanticModel); throw null; }
        public static bool TryGetSpeculativeSemanticModel(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax rangeArgument, out Microsoft.CodeAnalysis.SemanticModel speculativeModel) { speculativeModel = default(Microsoft.CodeAnalysis.SemanticModel); throw null; }
        public static bool TryGetSpeculativeSemanticModel(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, out Microsoft.CodeAnalysis.SemanticModel speculativeModel, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption=(Microsoft.CodeAnalysis.SpeculativeBindingOption)(0)) { speculativeModel = default(Microsoft.CodeAnalysis.SemanticModel); throw null; }
        public static bool TryGetSpeculativeSemanticModelForMethodBody(this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax method, out Microsoft.CodeAnalysis.SemanticModel speculativeModel) { speculativeModel = default(Microsoft.CodeAnalysis.SemanticModel); throw null; }
    }
    public sealed partial class VisualBasicParseOptions : Microsoft.CodeAnalysis.ParseOptions, System.IEquatable<Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions>
    {
        public VisualBasicParseOptions(Microsoft.CodeAnalysis.VisualBasic.LanguageVersion languageVersion=(Microsoft.CodeAnalysis.VisualBasic.LanguageVersion)(14), Microsoft.CodeAnalysis.DocumentationMode documentationMode=(Microsoft.CodeAnalysis.DocumentationMode)(1), Microsoft.CodeAnalysis.SourceCodeKind kind=(Microsoft.CodeAnalysis.SourceCodeKind)(0), System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> preprocessorSymbols=null) { }
        public static Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions Default { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public override System.Collections.Generic.IReadOnlyDictionary<string, string> Features { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.LanguageVersion LanguageVersion { get { throw null; } }
        public override System.Collections.Generic.IEnumerable<string> PreprocessorSymbolNames { get { throw null; } }
        public System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, object>> PreprocessorSymbols { get { throw null; } }
        protected override Microsoft.CodeAnalysis.ParseOptions CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode documentationMode) { throw null; }
        protected override Microsoft.CodeAnalysis.ParseOptions CommonWithFeatures(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> features) { throw null; }
        public override Microsoft.CodeAnalysis.ParseOptions CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind kind) { throw null; }
        public bool Equals(Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions other) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode documentationMode) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithFeatures(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> features) { throw null; }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithKind(Microsoft.CodeAnalysis.SourceCodeKind kind) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithLanguageVersion(Microsoft.CodeAnalysis.VisualBasic.LanguageVersion version) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithPreprocessorSymbols(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> symbols) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithPreprocessorSymbols(params System.Collections.Generic.KeyValuePair<string, object>[] symbols) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions WithPreprocessorSymbols(System.Collections.Immutable.ImmutableArray<System.Collections.Generic.KeyValuePair<string, object>> symbols) { throw null; }
    }
    public abstract partial class VisualBasicSyntaxNode : Microsoft.CodeAnalysis.SyntaxNode
    {
        internal VisualBasicSyntaxNode() { }
        public bool IsDirective { get { throw null; } }
        protected override string KindText { get { throw null; } }
        public override string Language { get { throw null; } }
        public new int SpanStart { get { throw null; } }
        protected override Microsoft.CodeAnalysis.SyntaxTree SyntaxTreeCore { get { throw null; } }
        public abstract void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);
        public abstract TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor);
        public override Microsoft.CodeAnalysis.SyntaxNodeOrToken ChildThatContainsPosition(int position) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxNode DeserializeFrom(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        protected sealed override bool EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode other) { throw null; }
        public new Microsoft.CodeAnalysis.SyntaxToken FindToken(int position, bool findInsideTrivia=false) { throw null; }
        public new Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia(int textPosition, bool findInsideTrivia=false) { throw null; }
        public new System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics() { throw null; }
        public System.Collections.Generic.IList<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax> GetDirectives(System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> filter=null) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetFirstDirective(System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> predicate=null) { throw null; }
        public new Microsoft.CodeAnalysis.SyntaxToken GetFirstToken(bool includeZeroWidth=false, bool includeSkipped=false, bool includeDirectives=false, bool includeDocumentationComments=false) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetLastDirective(System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> predicate=null) { throw null; }
        public new Microsoft.CodeAnalysis.SyntaxToken GetLastToken(bool includeZeroWidth=false, bool includeSkipped=false, bool includeDirectives=false, bool includeDocumentationComments=false) { throw null; }
        public new Microsoft.CodeAnalysis.SyntaxTriviaList GetLeadingTrivia() { throw null; }
        public new Microsoft.CodeAnalysis.Location GetLocation() { throw null; }
        public new Microsoft.CodeAnalysis.SyntaxTriviaList GetTrailingTrivia() { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode InsertNodesInListCore(Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodesToInsert, bool insertBefore) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode InsertTokensInListCore(Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens, bool insertBefore) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode InsertTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia, bool insertBefore) { throw null; }
        protected override bool IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel=false) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind() { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode NormalizeWhitespaceCore(string indentation, string eol, bool elasticTrivia) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode RemoveNodesCore(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> nodes, Microsoft.CodeAnalysis.SyntaxRemoveOptions options) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceCore<TNode>(System.Collections.Generic.IEnumerable<TNode> nodes=null, System.Func<TNode, TNode, Microsoft.CodeAnalysis.SyntaxNode> computeReplacementNode=null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> tokens=null, System.Func<Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken> computeReplacementToken=null, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> trivia=null, System.Func<Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia> computeReplacementTrivia=null) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceNodeInListCore(Microsoft.CodeAnalysis.SyntaxNode originalNode, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> replacementNodes) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceTokenInListCore(Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxToken> newTokens) { throw null; }
        protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxTrivia> newTrivia) { throw null; }
        public override void SerializeTo(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { }
        public sealed override string ToFullString() { throw null; }
        public sealed override string ToString() { throw null; }
        public override void WriteTo(System.IO.TextWriter writer) { }
    }
    public abstract partial class VisualBasicSyntaxRewriter : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<Microsoft.CodeAnalysis.SyntaxNode>
    {
        public VisualBasicSyntaxRewriter(bool visitIntoStructuredTrivia=false) { }
        public virtual bool VisitIntoStructuredTrivia { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxNode Visit(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAggregateClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitArrayCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitArrayRankSpecifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAsNewClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAttributeList(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAttributesStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAttributeTarget(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitAwaitExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitBinaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitBinaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCallStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCatchFilterClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitClassStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCompilationUnit(Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitConstDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitContinueStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCrefSignature(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCrefSignaturePart(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitCTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDeclareStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDelegateStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDirectCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDistinctClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitElseCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitElseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEmptyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEndExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEnumStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEqualsValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEraseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitErrorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitExitStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitExpressionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitExternalChecksumDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitFieldDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitFinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitFinallyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitForEachStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitForStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitForStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitFromClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitFunctionAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGenericName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGetTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGetXmlNamespaceExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGlobalName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGroupAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGroupByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitGroupJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitHandlesClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitHandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitIdentifierName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitImplementsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitImportAliasClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitImportsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitIncompleteMember(Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInferredFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInheritsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterfaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterpolatedStringText(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInterpolationFormatClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitInvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitJoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitKeywordEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLambdaHeader(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLetClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax node) { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxTokenList VisitList(Microsoft.CodeAnalysis.SyntaxTokenList list) { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxTriviaList VisitList(Microsoft.CodeAnalysis.SyntaxTriviaList list) { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxToken VisitListElement(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxTrivia VisitListElement(Microsoft.CodeAnalysis.SyntaxTrivia element) { throw null; }
        public virtual TNode VisitListElement<TNode>(TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxToken VisitListSeparator(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public virtual Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> VisitList<TNode>(Microsoft.CodeAnalysis.SeparatedSyntaxList<TNode> list) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxList<TNode> VisitList<TNode>(Microsoft.CodeAnalysis.SyntaxList<TNode> list) where TNode : Microsoft.CodeAnalysis.SyntaxNode { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLiteralExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMethodBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMethodStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMidExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitModifiedIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMyBaseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitMyClassExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNamedFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNameOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitNullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitObjectCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitObjectMemberInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOmittedArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOnErrorResumeNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOperatorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOptionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOrderByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitParenthesizedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPartitionClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPredefinedCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPredefinedType(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPrintStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitPropertyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitQualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitQualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitQueryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitRaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitRangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitRangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitRedimClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitReDimStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitRelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitResumeStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitReturnStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSelectClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSimpleAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSimpleCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSimpleJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSingleLineElseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitStopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitStructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitStructureStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSubNewStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitSyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTernaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitThrowStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax node) { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxToken VisitToken(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public virtual Microsoft.CodeAnalysis.SyntaxTrivia VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia trivia) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTryBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTryCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitTypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitUnaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitUsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitUsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitVariableDeclarator(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitVariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWhereClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWithEventsEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitWithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlBracketedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlCDataSection(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlComment(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlDeclarationOption(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlElementEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlEmbeddedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlNamespaceImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlPrefix(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlPrefixName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlString(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitXmlText(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax node) { throw null; }
        public override Microsoft.CodeAnalysis.SyntaxNode VisitYieldStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax node) { throw null; }
    }
    public abstract partial class VisualBasicSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree
    {
        protected VisualBasicSyntaxTree() { }
        public abstract new Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions Options { get; }
        protected override Microsoft.CodeAnalysis.ParseOptions OptionsCore { get { throw null; } }
        protected T CloneNodeAsRoot<T>(T node) where T : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTree Create(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode root, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options=null, string path="", System.Text.Encoding encoding=null) { throw null; }
        public override System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextSpan> GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree oldTree) { throw null; }
        public override System.Collections.Generic.IList<Microsoft.CodeAnalysis.Text.TextChange> GetChanges(Microsoft.CodeAnalysis.SyntaxTree oldTree) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax GetCompilationUnitRoot(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) { throw null; }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia trivia) { throw null; }
        public override System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostic> GetDiagnostics(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override Microsoft.CodeAnalysis.FileLinePositionSpan GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override Microsoft.CodeAnalysis.LineVisibility GetLineVisibility(int position, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public override Microsoft.CodeAnalysis.Location GetLocation(Microsoft.CodeAnalysis.Text.TextSpan span) { throw null; }
        public override Microsoft.CodeAnalysis.FileLinePositionSpan GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public abstract new Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode GetRoot(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken));
        public virtual new System.Threading.Tasks.Task<Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode> GetRootAsync(System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        protected override System.Threading.Tasks.Task<Microsoft.CodeAnalysis.SyntaxNode> GetRootAsyncCore(System.Threading.CancellationToken cancellationToken) { throw null; }
        protected override Microsoft.CodeAnalysis.SyntaxNode GetRootCore(System.Threading.CancellationToken CancellationToken) { throw null; }
        public override bool HasHiddenRegions() { throw null; }
        public override bool IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree tree, bool topLevel=false) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTree ParseText(Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options=null, string path="", System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public static Microsoft.CodeAnalysis.SyntaxTree ParseText(string text, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options=null, string path="", System.Text.Encoding encoding=null, System.Threading.CancellationToken cancellationToken=default(System.Threading.CancellationToken)) { throw null; }
        public abstract bool TryGetRoot(ref Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode root);
        protected override bool TryGetRootCore(out Microsoft.CodeAnalysis.SyntaxNode root) { root = default(Microsoft.CodeAnalysis.SyntaxNode); throw null; }
        public override Microsoft.CodeAnalysis.SyntaxTree WithChangedText(Microsoft.CodeAnalysis.Text.SourceText newText) { throw null; }
    }
    public abstract partial class VisualBasicSyntaxVisitor
    {
        protected VisualBasicSyntaxVisitor() { }
        public virtual void DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode node) { }
        public virtual void Visit(Microsoft.CodeAnalysis.SyntaxNode node) { }
        public virtual void VisitAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax node) { }
        public virtual void VisitAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax node) { }
        public virtual void VisitAddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax node) { }
        public virtual void VisitAggregateClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax node) { }
        public virtual void VisitAggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax node) { }
        public virtual void VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax node) { }
        public virtual void VisitArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax node) { }
        public virtual void VisitArrayCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax node) { }
        public virtual void VisitArrayRankSpecifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax node) { }
        public virtual void VisitArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax node) { }
        public virtual void VisitAsNewClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax node) { }
        public virtual void VisitAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax node) { }
        public virtual void VisitAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax node) { }
        public virtual void VisitAttributeList(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax node) { }
        public virtual void VisitAttributesStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax node) { }
        public virtual void VisitAttributeTarget(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax node) { }
        public virtual void VisitAwaitExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax node) { }
        public virtual void VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax node) { }
        public virtual void VisitBinaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax node) { }
        public virtual void VisitBinaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax node) { }
        public virtual void VisitCallStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax node) { }
        public virtual void VisitCaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax node) { }
        public virtual void VisitCaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax node) { }
        public virtual void VisitCatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax node) { }
        public virtual void VisitCatchFilterClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax node) { }
        public virtual void VisitCatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax node) { }
        public virtual void VisitClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax node) { }
        public virtual void VisitClassStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax node) { }
        public virtual void VisitCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax node) { }
        public virtual void VisitCollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax node) { }
        public virtual void VisitCompilationUnit(Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax node) { }
        public virtual void VisitConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax node) { }
        public virtual void VisitConstDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax node) { }
        public virtual void VisitConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax node) { }
        public virtual void VisitContinueStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax node) { }
        public virtual void VisitCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax node) { }
        public virtual void VisitCrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax node) { }
        public virtual void VisitCrefSignature(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax node) { }
        public virtual void VisitCrefSignaturePart(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax node) { }
        public virtual void VisitCTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax node) { }
        public virtual void VisitDeclareStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax node) { }
        public virtual void VisitDelegateStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax node) { }
        public virtual void VisitDirectCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax node) { }
        public virtual void VisitDisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax node) { }
        public virtual void VisitDistinctClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax node) { }
        public virtual void VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax node) { }
        public virtual void VisitDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax node) { }
        public virtual void VisitDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax node) { }
        public virtual void VisitElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax node) { }
        public virtual void VisitElseCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax node) { }
        public virtual void VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax node) { }
        public virtual void VisitElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax node) { }
        public virtual void VisitElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax node) { }
        public virtual void VisitElseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax node) { }
        public virtual void VisitEmptyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax node) { }
        public virtual void VisitEnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax node) { }
        public virtual void VisitEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax node) { }
        public virtual void VisitEndExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax node) { }
        public virtual void VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax node) { }
        public virtual void VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax node) { }
        public virtual void VisitEnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax node) { }
        public virtual void VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax node) { }
        public virtual void VisitEnumStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax node) { }
        public virtual void VisitEqualsValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax node) { }
        public virtual void VisitEraseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax node) { }
        public virtual void VisitErrorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax node) { }
        public virtual void VisitEventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax node) { }
        public virtual void VisitEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax node) { }
        public virtual void VisitExitStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax node) { }
        public virtual void VisitExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax node) { }
        public virtual void VisitExpressionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax node) { }
        public virtual void VisitExternalChecksumDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax node) { }
        public virtual void VisitExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax node) { }
        public virtual void VisitFieldDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax node) { }
        public virtual void VisitFinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax node) { }
        public virtual void VisitFinallyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax node) { }
        public virtual void VisitForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax node) { }
        public virtual void VisitForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node) { }
        public virtual void VisitForEachStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node) { }
        public virtual void VisitForStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax node) { }
        public virtual void VisitForStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax node) { }
        public virtual void VisitFromClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax node) { }
        public virtual void VisitFunctionAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax node) { }
        public virtual void VisitGenericName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax node) { }
        public virtual void VisitGetTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax node) { }
        public virtual void VisitGetXmlNamespaceExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax node) { }
        public virtual void VisitGlobalName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax node) { }
        public virtual void VisitGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax node) { }
        public virtual void VisitGroupAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax node) { }
        public virtual void VisitGroupByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax node) { }
        public virtual void VisitGroupJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax node) { }
        public virtual void VisitHandlesClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax node) { }
        public virtual void VisitHandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax node) { }
        public virtual void VisitIdentifierName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node) { }
        public virtual void VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax node) { }
        public virtual void VisitIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax node) { }
        public virtual void VisitImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax node) { }
        public virtual void VisitImplementsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax node) { }
        public virtual void VisitImportAliasClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax node) { }
        public virtual void VisitImportsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax node) { }
        public virtual void VisitIncompleteMember(Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax node) { }
        public virtual void VisitInferredFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax node) { }
        public virtual void VisitInheritsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax node) { }
        public virtual void VisitInterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax node) { }
        public virtual void VisitInterfaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax node) { }
        public virtual void VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax node) { }
        public virtual void VisitInterpolatedStringText(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax node) { }
        public virtual void VisitInterpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax node) { }
        public virtual void VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax node) { }
        public virtual void VisitInterpolationFormatClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax node) { }
        public virtual void VisitInvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax node) { }
        public virtual void VisitJoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax node) { }
        public virtual void VisitKeywordEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax node) { }
        public virtual void VisitLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax node) { }
        public virtual void VisitLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax node) { }
        public virtual void VisitLambdaHeader(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax node) { }
        public virtual void VisitLetClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax node) { }
        public virtual void VisitLiteralExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax node) { }
        public virtual void VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax node) { }
        public virtual void VisitLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax node) { }
        public virtual void VisitMeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax node) { }
        public virtual void VisitMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax node) { }
        public virtual void VisitMethodBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax node) { }
        public virtual void VisitMethodStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax node) { }
        public virtual void VisitMidExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax node) { }
        public virtual void VisitModifiedIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax node) { }
        public virtual void VisitModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax node) { }
        public virtual void VisitModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax node) { }
        public virtual void VisitMultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax node) { }
        public virtual void VisitMultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax node) { }
        public virtual void VisitMyBaseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax node) { }
        public virtual void VisitMyClassExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax node) { }
        public virtual void VisitNameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax node) { }
        public virtual void VisitNamedFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax node) { }
        public virtual void VisitNameOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax node) { }
        public virtual void VisitNamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax node) { }
        public virtual void VisitNamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax node) { }
        public virtual void VisitNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax node) { }
        public virtual void VisitNullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax node) { }
        public virtual void VisitObjectCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax node) { }
        public virtual void VisitObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax node) { }
        public virtual void VisitObjectMemberInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax node) { }
        public virtual void VisitOmittedArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax node) { }
        public virtual void VisitOnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax node) { }
        public virtual void VisitOnErrorResumeNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax node) { }
        public virtual void VisitOperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax node) { }
        public virtual void VisitOperatorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax node) { }
        public virtual void VisitOptionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax node) { }
        public virtual void VisitOrderByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax node) { }
        public virtual void VisitOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax node) { }
        public virtual void VisitParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax node) { }
        public virtual void VisitParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax node) { }
        public virtual void VisitParenthesizedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax node) { }
        public virtual void VisitPartitionClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax node) { }
        public virtual void VisitPartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax node) { }
        public virtual void VisitPredefinedCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax node) { }
        public virtual void VisitPredefinedType(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax node) { }
        public virtual void VisitPrintStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax node) { }
        public virtual void VisitPropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax node) { }
        public virtual void VisitPropertyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax node) { }
        public virtual void VisitQualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax node) { }
        public virtual void VisitQualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax node) { }
        public virtual void VisitQueryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax node) { }
        public virtual void VisitRaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax node) { }
        public virtual void VisitRangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax node) { }
        public virtual void VisitRangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax node) { }
        public virtual void VisitRedimClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax node) { }
        public virtual void VisitReDimStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax node) { }
        public virtual void VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax node) { }
        public virtual void VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax node) { }
        public virtual void VisitRelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax node) { }
        public virtual void VisitResumeStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax node) { }
        public virtual void VisitReturnStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax node) { }
        public virtual void VisitSelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax node) { }
        public virtual void VisitSelectClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax node) { }
        public virtual void VisitSelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax node) { }
        public virtual void VisitSimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax node) { }
        public virtual void VisitSimpleAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax node) { }
        public virtual void VisitSimpleCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax node) { }
        public virtual void VisitSimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax node) { }
        public virtual void VisitSimpleJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax node) { }
        public virtual void VisitSingleLineElseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax node) { }
        public virtual void VisitSingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax node) { }
        public virtual void VisitSingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax node) { }
        public virtual void VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax node) { }
        public virtual void VisitSpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax node) { }
        public virtual void VisitStopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax node) { }
        public virtual void VisitStructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax node) { }
        public virtual void VisitStructureStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax node) { }
        public virtual void VisitSubNewStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax node) { }
        public virtual void VisitSyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax node) { }
        public virtual void VisitSyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax node) { }
        public virtual void VisitTernaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax node) { }
        public virtual void VisitThrowStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax node) { }
        public virtual void VisitTryBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax node) { }
        public virtual void VisitTryCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax node) { }
        public virtual void VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax node) { }
        public virtual void VisitTypeArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax node) { }
        public virtual void VisitTypeConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax node) { }
        public virtual void VisitTypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax node) { }
        public virtual void VisitTypeParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax node) { }
        public virtual void VisitTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax node) { }
        public virtual void VisitTypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax node) { }
        public virtual void VisitTypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax node) { }
        public virtual void VisitUnaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax node) { }
        public virtual void VisitUsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax node) { }
        public virtual void VisitUsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax node) { }
        public virtual void VisitVariableDeclarator(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax node) { }
        public virtual void VisitVariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax node) { }
        public virtual void VisitWhereClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax node) { }
        public virtual void VisitWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax node) { }
        public virtual void VisitWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax node) { }
        public virtual void VisitWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax node) { }
        public virtual void VisitWithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax node) { }
        public virtual void VisitWithEventsEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax node) { }
        public virtual void VisitWithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax node) { }
        public virtual void VisitWithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax node) { }
        public virtual void VisitXmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax node) { }
        public virtual void VisitXmlBracketedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax node) { }
        public virtual void VisitXmlCDataSection(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax node) { }
        public virtual void VisitXmlComment(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax node) { }
        public virtual void VisitXmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax node) { }
        public virtual void VisitXmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax node) { }
        public virtual void VisitXmlDeclarationOption(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax node) { }
        public virtual void VisitXmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax node) { }
        public virtual void VisitXmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax node) { }
        public virtual void VisitXmlElementEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax node) { }
        public virtual void VisitXmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax node) { }
        public virtual void VisitXmlEmbeddedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax node) { }
        public virtual void VisitXmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax node) { }
        public virtual void VisitXmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax node) { }
        public virtual void VisitXmlName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax node) { }
        public virtual void VisitXmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax node) { }
        public virtual void VisitXmlNamespaceImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax node) { }
        public virtual void VisitXmlPrefix(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax node) { }
        public virtual void VisitXmlPrefixName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax node) { }
        public virtual void VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax node) { }
        public virtual void VisitXmlString(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax node) { }
        public virtual void VisitXmlText(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax node) { }
        public virtual void VisitYieldStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax node) { }
    }
    public abstract partial class VisualBasicSyntaxVisitor<TResult>
    {
        protected VisualBasicSyntaxVisitor() { }
        public virtual TResult DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public virtual TResult Visit(Microsoft.CodeAnalysis.SyntaxNode node) { throw null; }
        public virtual TResult VisitAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax node) { throw null; }
        public virtual TResult VisitAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax node) { throw null; }
        public virtual TResult VisitAddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax node) { throw null; }
        public virtual TResult VisitAggregateClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax node) { throw null; }
        public virtual TResult VisitAggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax node) { throw null; }
        public virtual TResult VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax node) { throw null; }
        public virtual TResult VisitArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax node) { throw null; }
        public virtual TResult VisitArrayCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax node) { throw null; }
        public virtual TResult VisitArrayRankSpecifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax node) { throw null; }
        public virtual TResult VisitArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax node) { throw null; }
        public virtual TResult VisitAsNewClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax node) { throw null; }
        public virtual TResult VisitAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax node) { throw null; }
        public virtual TResult VisitAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax node) { throw null; }
        public virtual TResult VisitAttributeList(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax node) { throw null; }
        public virtual TResult VisitAttributesStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax node) { throw null; }
        public virtual TResult VisitAttributeTarget(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax node) { throw null; }
        public virtual TResult VisitAwaitExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax node) { throw null; }
        public virtual TResult VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitBinaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax node) { throw null; }
        public virtual TResult VisitBinaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax node) { throw null; }
        public virtual TResult VisitCallStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax node) { throw null; }
        public virtual TResult VisitCaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax node) { throw null; }
        public virtual TResult VisitCaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax node) { throw null; }
        public virtual TResult VisitCatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax node) { throw null; }
        public virtual TResult VisitCatchFilterClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax node) { throw null; }
        public virtual TResult VisitCatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax node) { throw null; }
        public virtual TResult VisitClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax node) { throw null; }
        public virtual TResult VisitClassStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax node) { throw null; }
        public virtual TResult VisitCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax node) { throw null; }
        public virtual TResult VisitCollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax node) { throw null; }
        public virtual TResult VisitCompilationUnit(Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax node) { throw null; }
        public virtual TResult VisitConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax node) { throw null; }
        public virtual TResult VisitConstDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax node) { throw null; }
        public virtual TResult VisitContinueStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax node) { throw null; }
        public virtual TResult VisitCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax node) { throw null; }
        public virtual TResult VisitCrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax node) { throw null; }
        public virtual TResult VisitCrefSignature(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax node) { throw null; }
        public virtual TResult VisitCrefSignaturePart(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax node) { throw null; }
        public virtual TResult VisitCTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax node) { throw null; }
        public virtual TResult VisitDeclareStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax node) { throw null; }
        public virtual TResult VisitDelegateStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax node) { throw null; }
        public virtual TResult VisitDirectCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax node) { throw null; }
        public virtual TResult VisitDisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitDistinctClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax node) { throw null; }
        public virtual TResult VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax node) { throw null; }
        public virtual TResult VisitDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax node) { throw null; }
        public virtual TResult VisitDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax node) { throw null; }
        public virtual TResult VisitElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax node) { throw null; }
        public virtual TResult VisitElseCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax node) { throw null; }
        public virtual TResult VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax node) { throw null; }
        public virtual TResult VisitElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax node) { throw null; }
        public virtual TResult VisitElseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax node) { throw null; }
        public virtual TResult VisitEmptyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax node) { throw null; }
        public virtual TResult VisitEnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax node) { throw null; }
        public virtual TResult VisitEndExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitEnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax node) { throw null; }
        public virtual TResult VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax node) { throw null; }
        public virtual TResult VisitEnumStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax node) { throw null; }
        public virtual TResult VisitEqualsValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax node) { throw null; }
        public virtual TResult VisitEraseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax node) { throw null; }
        public virtual TResult VisitErrorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax node) { throw null; }
        public virtual TResult VisitEventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax node) { throw null; }
        public virtual TResult VisitEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax node) { throw null; }
        public virtual TResult VisitExitStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax node) { throw null; }
        public virtual TResult VisitExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax node) { throw null; }
        public virtual TResult VisitExpressionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax node) { throw null; }
        public virtual TResult VisitExternalChecksumDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitFieldDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax node) { throw null; }
        public virtual TResult VisitFinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax node) { throw null; }
        public virtual TResult VisitFinallyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax node) { throw null; }
        public virtual TResult VisitForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax node) { throw null; }
        public virtual TResult VisitForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node) { throw null; }
        public virtual TResult VisitForEachStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node) { throw null; }
        public virtual TResult VisitForStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax node) { throw null; }
        public virtual TResult VisitForStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax node) { throw null; }
        public virtual TResult VisitFromClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax node) { throw null; }
        public virtual TResult VisitFunctionAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax node) { throw null; }
        public virtual TResult VisitGenericName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax node) { throw null; }
        public virtual TResult VisitGetTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax node) { throw null; }
        public virtual TResult VisitGetXmlNamespaceExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax node) { throw null; }
        public virtual TResult VisitGlobalName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax node) { throw null; }
        public virtual TResult VisitGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax node) { throw null; }
        public virtual TResult VisitGroupAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax node) { throw null; }
        public virtual TResult VisitGroupByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax node) { throw null; }
        public virtual TResult VisitGroupJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax node) { throw null; }
        public virtual TResult VisitHandlesClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax node) { throw null; }
        public virtual TResult VisitHandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax node) { throw null; }
        public virtual TResult VisitIdentifierName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node) { throw null; }
        public virtual TResult VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax node) { throw null; }
        public virtual TResult VisitImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax node) { throw null; }
        public virtual TResult VisitImplementsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax node) { throw null; }
        public virtual TResult VisitImportAliasClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax node) { throw null; }
        public virtual TResult VisitImportsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax node) { throw null; }
        public virtual TResult VisitIncompleteMember(Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax node) { throw null; }
        public virtual TResult VisitInferredFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax node) { throw null; }
        public virtual TResult VisitInheritsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax node) { throw null; }
        public virtual TResult VisitInterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax node) { throw null; }
        public virtual TResult VisitInterfaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax node) { throw null; }
        public virtual TResult VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax node) { throw null; }
        public virtual TResult VisitInterpolatedStringText(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax node) { throw null; }
        public virtual TResult VisitInterpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax node) { throw null; }
        public virtual TResult VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax node) { throw null; }
        public virtual TResult VisitInterpolationFormatClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax node) { throw null; }
        public virtual TResult VisitInvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax node) { throw null; }
        public virtual TResult VisitJoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax node) { throw null; }
        public virtual TResult VisitKeywordEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax node) { throw null; }
        public virtual TResult VisitLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax node) { throw null; }
        public virtual TResult VisitLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax node) { throw null; }
        public virtual TResult VisitLambdaHeader(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax node) { throw null; }
        public virtual TResult VisitLetClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax node) { throw null; }
        public virtual TResult VisitLiteralExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax node) { throw null; }
        public virtual TResult VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax node) { throw null; }
        public virtual TResult VisitLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax node) { throw null; }
        public virtual TResult VisitMeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax node) { throw null; }
        public virtual TResult VisitMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax node) { throw null; }
        public virtual TResult VisitMethodBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax node) { throw null; }
        public virtual TResult VisitMethodStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax node) { throw null; }
        public virtual TResult VisitMidExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax node) { throw null; }
        public virtual TResult VisitModifiedIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax node) { throw null; }
        public virtual TResult VisitModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax node) { throw null; }
        public virtual TResult VisitModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax node) { throw null; }
        public virtual TResult VisitMultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax node) { throw null; }
        public virtual TResult VisitMultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax node) { throw null; }
        public virtual TResult VisitMyBaseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax node) { throw null; }
        public virtual TResult VisitMyClassExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax node) { throw null; }
        public virtual TResult VisitNameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax node) { throw null; }
        public virtual TResult VisitNamedFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax node) { throw null; }
        public virtual TResult VisitNameOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax node) { throw null; }
        public virtual TResult VisitNamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax node) { throw null; }
        public virtual TResult VisitNamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax node) { throw null; }
        public virtual TResult VisitNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax node) { throw null; }
        public virtual TResult VisitNullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax node) { throw null; }
        public virtual TResult VisitObjectCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax node) { throw null; }
        public virtual TResult VisitObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax node) { throw null; }
        public virtual TResult VisitObjectMemberInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax node) { throw null; }
        public virtual TResult VisitOmittedArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax node) { throw null; }
        public virtual TResult VisitOnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax node) { throw null; }
        public virtual TResult VisitOnErrorResumeNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax node) { throw null; }
        public virtual TResult VisitOperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax node) { throw null; }
        public virtual TResult VisitOperatorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax node) { throw null; }
        public virtual TResult VisitOptionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax node) { throw null; }
        public virtual TResult VisitOrderByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax node) { throw null; }
        public virtual TResult VisitOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax node) { throw null; }
        public virtual TResult VisitParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax node) { throw null; }
        public virtual TResult VisitParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax node) { throw null; }
        public virtual TResult VisitParenthesizedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax node) { throw null; }
        public virtual TResult VisitPartitionClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax node) { throw null; }
        public virtual TResult VisitPartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax node) { throw null; }
        public virtual TResult VisitPredefinedCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax node) { throw null; }
        public virtual TResult VisitPredefinedType(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax node) { throw null; }
        public virtual TResult VisitPrintStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax node) { throw null; }
        public virtual TResult VisitPropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax node) { throw null; }
        public virtual TResult VisitPropertyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax node) { throw null; }
        public virtual TResult VisitQualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax node) { throw null; }
        public virtual TResult VisitQualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax node) { throw null; }
        public virtual TResult VisitQueryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax node) { throw null; }
        public virtual TResult VisitRaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax node) { throw null; }
        public virtual TResult VisitRangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax node) { throw null; }
        public virtual TResult VisitRangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax node) { throw null; }
        public virtual TResult VisitRedimClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax node) { throw null; }
        public virtual TResult VisitReDimStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax node) { throw null; }
        public virtual TResult VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax node) { throw null; }
        public virtual TResult VisitRelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax node) { throw null; }
        public virtual TResult VisitResumeStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax node) { throw null; }
        public virtual TResult VisitReturnStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax node) { throw null; }
        public virtual TResult VisitSelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax node) { throw null; }
        public virtual TResult VisitSelectClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax node) { throw null; }
        public virtual TResult VisitSelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax node) { throw null; }
        public virtual TResult VisitSimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax node) { throw null; }
        public virtual TResult VisitSimpleAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax node) { throw null; }
        public virtual TResult VisitSimpleCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax node) { throw null; }
        public virtual TResult VisitSimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax node) { throw null; }
        public virtual TResult VisitSimpleJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax node) { throw null; }
        public virtual TResult VisitSingleLineElseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax node) { throw null; }
        public virtual TResult VisitSingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax node) { throw null; }
        public virtual TResult VisitSingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax node) { throw null; }
        public virtual TResult VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax node) { throw null; }
        public virtual TResult VisitSpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax node) { throw null; }
        public virtual TResult VisitStopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax node) { throw null; }
        public virtual TResult VisitStructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax node) { throw null; }
        public virtual TResult VisitStructureStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax node) { throw null; }
        public virtual TResult VisitSubNewStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax node) { throw null; }
        public virtual TResult VisitSyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax node) { throw null; }
        public virtual TResult VisitSyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax node) { throw null; }
        public virtual TResult VisitTernaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax node) { throw null; }
        public virtual TResult VisitThrowStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax node) { throw null; }
        public virtual TResult VisitTryBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax node) { throw null; }
        public virtual TResult VisitTryCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax node) { throw null; }
        public virtual TResult VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax node) { throw null; }
        public virtual TResult VisitTypeArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax node) { throw null; }
        public virtual TResult VisitTypeConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax node) { throw null; }
        public virtual TResult VisitTypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax node) { throw null; }
        public virtual TResult VisitTypeParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax node) { throw null; }
        public virtual TResult VisitTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax node) { throw null; }
        public virtual TResult VisitTypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax node) { throw null; }
        public virtual TResult VisitTypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax node) { throw null; }
        public virtual TResult VisitUnaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax node) { throw null; }
        public virtual TResult VisitUsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax node) { throw null; }
        public virtual TResult VisitUsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax node) { throw null; }
        public virtual TResult VisitVariableDeclarator(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax node) { throw null; }
        public virtual TResult VisitVariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax node) { throw null; }
        public virtual TResult VisitWhereClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax node) { throw null; }
        public virtual TResult VisitWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax node) { throw null; }
        public virtual TResult VisitWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax node) { throw null; }
        public virtual TResult VisitWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax node) { throw null; }
        public virtual TResult VisitWithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax node) { throw null; }
        public virtual TResult VisitWithEventsEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax node) { throw null; }
        public virtual TResult VisitWithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax node) { throw null; }
        public virtual TResult VisitWithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax node) { throw null; }
        public virtual TResult VisitXmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax node) { throw null; }
        public virtual TResult VisitXmlBracketedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax node) { throw null; }
        public virtual TResult VisitXmlCDataSection(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax node) { throw null; }
        public virtual TResult VisitXmlComment(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax node) { throw null; }
        public virtual TResult VisitXmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax node) { throw null; }
        public virtual TResult VisitXmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax node) { throw null; }
        public virtual TResult VisitXmlDeclarationOption(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax node) { throw null; }
        public virtual TResult VisitXmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax node) { throw null; }
        public virtual TResult VisitXmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax node) { throw null; }
        public virtual TResult VisitXmlElementEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax node) { throw null; }
        public virtual TResult VisitXmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax node) { throw null; }
        public virtual TResult VisitXmlEmbeddedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax node) { throw null; }
        public virtual TResult VisitXmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax node) { throw null; }
        public virtual TResult VisitXmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax node) { throw null; }
        public virtual TResult VisitXmlName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax node) { throw null; }
        public virtual TResult VisitXmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax node) { throw null; }
        public virtual TResult VisitXmlNamespaceImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax node) { throw null; }
        public virtual TResult VisitXmlPrefix(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax node) { throw null; }
        public virtual TResult VisitXmlPrefixName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax node) { throw null; }
        public virtual TResult VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax node) { throw null; }
        public virtual TResult VisitXmlString(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax node) { throw null; }
        public virtual TResult VisitXmlText(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax node) { throw null; }
        public virtual TResult VisitYieldStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax node) { throw null; }
    }
    public abstract partial class VisualBasicSyntaxWalker : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor
    {
        protected VisualBasicSyntaxWalker(Microsoft.CodeAnalysis.SyntaxWalkerDepth depth=(Microsoft.CodeAnalysis.SyntaxWalkerDepth)(0)) { }
        protected Microsoft.CodeAnalysis.SyntaxWalkerDepth Depth { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
        public override void DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode node) { }
        public override void Visit(Microsoft.CodeAnalysis.SyntaxNode node) { }
        public virtual void VisitLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken token) { }
        public virtual void VisitToken(Microsoft.CodeAnalysis.SyntaxToken token) { }
        public virtual void VisitTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken token) { }
        public virtual void VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia trivia) { }
    }
}
namespace Microsoft.CodeAnalysis.VisualBasic.Syntax
{
    public sealed partial class AccessorBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax
    {
        internal AccessorBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use AccessorStatement instead.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use EndAccessorStatement instead.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAccessorStatement { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax WithAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithAccessorStatement instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithEndAccessorStatement instead.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax WithEndAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class AccessorStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal AccessorStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AccessorKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax WithAccessorKeyword(Microsoft.CodeAnalysis.SyntaxToken accessorKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
    }
    public sealed partial class AddRemoveHandlerStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal AddRemoveHandlerStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AddHandlerOrRemoveHandlerKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax DelegateExpression { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax EventExpression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax WithAddHandlerOrRemoveHandlerKeyword(Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax WithDelegateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax WithEventExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression) { throw null; }
    }
    public sealed partial class AggregateClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal AggregateClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> AdditionalQueryOperators { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken AggregateKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> AggregationVariables { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IntoKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> Variables { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AddAdditionalQueryOperators(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AddAggregationVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AddVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken aggregateKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> additionalQueryOperators, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax WithAdditionalQueryOperators(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> additionalQueryOperators) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax WithAggregateKeyword(Microsoft.CodeAnalysis.SyntaxToken aggregateKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax WithAggregationVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax WithIntoKeyword(Microsoft.CodeAnalysis.SyntaxToken intoKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables) { throw null; }
    }
    public sealed partial class AggregationRangeVariableSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal AggregationRangeVariableSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax Aggregation { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax NameEquals { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax WithAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax WithNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals) { throw null; }
    }
    public abstract partial class AggregationSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal AggregationSyntax() { }
    }
    public sealed partial class AnonymousObjectCreationExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax
    {
        internal AnonymousObjectCreationExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax Initializer { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken NewKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AddInitializerInitializers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken newKeyword) { throw null; }
    }
    public sealed partial class ArgumentListSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ArgumentListSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax> Arguments { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax AddArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax> arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax> arguments) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public abstract partial class ArgumentSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ArgumentSyntax() { }
        public abstract bool IsNamed { get; }
        public bool IsOmitted { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetExpression();
    }
    public sealed partial class ArrayCreationExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax
    {
        internal ArrayCreationExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArrayBounds { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax Initializer { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken NewKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> RankSpecifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax AddArrayBoundsArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax AddInitializerInitializers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax AddRankSpecifiers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> rankSpecifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax WithArrayBounds(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken newKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax WithRankSpecifiers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> rankSpecifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public sealed partial class ArrayRankSpecifierSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ArrayRankSpecifierSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList CommaTokens { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public int Rank { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax AddCommaTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxTokenList commaTokens, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax WithCommaTokens(Microsoft.CodeAnalysis.SyntaxTokenList commaTokens) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class ArrayTypeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax
    {
        internal ArrayTypeSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax ElementType { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> RankSpecifiers { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax AddRankSpecifiers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> rankSpecifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax WithElementType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax WithRankSpecifiers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> rankSpecifiers) { throw null; }
    }
    public abstract partial class AsClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal AsClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AsKeyword { get { throw null; } }
    }
    public sealed partial class AsNewClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax
    {
        internal AsNewClauseSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken AsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax NewExpression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax WithAsKeyword(Microsoft.CodeAnalysis.SyntaxToken asKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax WithNewExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression) { throw null; }
    }
    public sealed partial class AssignmentStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal AssignmentStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Left { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Right { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax WithLeft(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax WithRight(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
    }
    public sealed partial class AttributeListSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal AttributeListSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax> Attributes { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AddAttributes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax> attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax WithAttributes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax> attributes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken lessThanToken) { throw null; }
    }
    public sealed partial class AttributesStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal AttributesStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
    }
    public sealed partial class AttributeSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal AttributeSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax Target { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax AddArgumentListArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax target, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax WithArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax WithTarget(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax target) { throw null; }
    }
    public sealed partial class AttributeTargetSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal AttributeTargetSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AttributeModifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ColonToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax Update(Microsoft.CodeAnalysis.SyntaxToken attributeModifier, Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax WithAttributeModifier(Microsoft.CodeAnalysis.SyntaxToken attributeModifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax WithColonToken(Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
    }
    public sealed partial class AwaitExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal AwaitExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AwaitKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax WithAwaitKeyword(Microsoft.CodeAnalysis.SyntaxToken awaitKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
    }
    public sealed partial class BadDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal BadDirectiveTriviaSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
    }
    public abstract partial class BaseXmlAttributeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal BaseXmlAttributeSyntax() { }
    }
    public sealed partial class BinaryConditionalExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal BinaryConditionalExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax FirstExpression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax SecondExpression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax WithFirstExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax WithSecondExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression) { throw null; }
    }
    public sealed partial class BinaryExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal BinaryExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Left { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Right { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax WithLeft(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax WithRight(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
    }
    public sealed partial class CallStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal CallStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CallKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Invocation { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken callKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax WithCallKeyword(Microsoft.CodeAnalysis.SyntaxToken callKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax WithInvocation(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation) { throw null; }
    }
    public sealed partial class CaseBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CaseBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use CaseStatement instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax Begin { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use AddCaseStatementCases instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddBeginCases(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddCaseStatementCases(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithCaseStatement instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax begin) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithCaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public abstract partial class CaseClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CaseClauseSyntax() { }
    }
    public sealed partial class CaseStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal CaseStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CaseKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> Cases { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax AddCases(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax WithCaseKeyword(Microsoft.CodeAnalysis.SyntaxToken caseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax WithCases(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax> cases) { throw null; }
    }
    public abstract partial class CastExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal CastExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
    }
    public sealed partial class CatchBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CatchBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax WithCatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class CatchFilterClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CatchFilterClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Filter { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WhenKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken whenKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WithFilter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WithWhenKeyword(Microsoft.CodeAnalysis.SyntaxToken whenKeyword) { throw null; }
    }
    public sealed partial class CatchStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal CatchStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CatchKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WhenClause { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken catchKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithCatchKeyword(Microsoft.CodeAnalysis.SyntaxToken catchKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithIdentifierName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithWhenClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) { throw null; }
    }
    public sealed partial class ClassBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax
    {
        internal ClassBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> Implements { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> Inherits { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax AddImplements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax AddInherits(params Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endClassStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithClassStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithEndClassStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endClassStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithImplements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithInherits(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
    }
    public sealed partial class ClassStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax
    {
        internal ClassStatementSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ClassKeyword { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax AddTypeParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken classKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax WithClassKeyword(Microsoft.CodeAnalysis.SyntaxToken classKeyword) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax WithTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
    }
    public sealed partial class CollectionInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal CollectionInitializerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> Initializers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax AddInitializers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax WithInitializers(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> initializers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken openBraceToken) { throw null; }
    }
    public sealed partial class CollectionRangeVariableSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CollectionRangeVariableSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken InKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax WithIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax WithInKeyword(Microsoft.CodeAnalysis.SyntaxToken inKeyword) { throw null; }
    }
    public sealed partial class CompilationUnitSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode, Microsoft.CodeAnalysis.ICompilationUnitSyntax
    {
        internal CompilationUnitSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax> Attributes { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EndOfFileToken { get { throw null; } }
        Microsoft.CodeAnalysis.SyntaxToken ICompilationUnitSyntax_EndOfFileToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax> Imports { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax> Options { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax AddAttributes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax AddImports(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax AddOptions(params Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax[] items) { throw null; }
        public System.Collections.Generic.IList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax> GetReferenceDirectives() { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax> options, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax> imports, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax> attributes, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.SyntaxToken endOfFileToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax WithAttributes(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax> attributes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax WithEndOfFileToken(Microsoft.CodeAnalysis.SyntaxToken endOfFileToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax WithImports(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax> imports) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax WithOptions(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax> options) { throw null; }
    }
    public sealed partial class ConditionalAccessExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal ConditionalAccessExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken QuestionMarkToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax WhenNotNull { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken questionMarkToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax WithQuestionMarkToken(Microsoft.CodeAnalysis.SyntaxToken questionMarkToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax WithWhenNotNull(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) { throw null; }
    }
    public sealed partial class ConstDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal ConstDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ConstKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken constKeyword, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax WithConstKeyword(Microsoft.CodeAnalysis.SyntaxToken constKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax WithName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
    }
    public abstract partial class ConstraintSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ConstraintSyntax() { }
    }
    public sealed partial class ConstructorBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax
    {
        internal ConstructorBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax WithEndSubStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax WithSubNewStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement) { throw null; }
    }
    public sealed partial class ContinueStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ContinueStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken BlockKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ContinueKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax WithBlockKeyword(Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax WithContinueKeyword(Microsoft.CodeAnalysis.SyntaxToken continueKeyword) { throw null; }
    }
    public sealed partial class CrefOperatorReferenceSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax
    {
        internal CrefOperatorReferenceSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use OperatorKeyword or a more specific property (e.g. OperatorKeyword) instead.", true)]
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax Update(Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use OperatorKeyword or a more specific property (e.g. WithOperatorKeyword) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken operatorKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
    }
    public sealed partial class CrefReferenceSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CrefReferenceSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax Signature { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax AddSignatureArgumentTypes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax signature, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax WithSignature(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax signature) { throw null; }
    }
    public sealed partial class CrefSignaturePartSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CrefSignaturePartSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Modifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax Update(Microsoft.CodeAnalysis.SyntaxToken modifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax WithModifier(Microsoft.CodeAnalysis.SyntaxToken modifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public sealed partial class CrefSignatureSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal CrefSignatureSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax> ArgumentTypes { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax AddArgumentTypes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax> argumentTypes, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax WithArgumentTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax> argumentTypes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class CTypeExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CastExpressionSyntax
    {
        internal CTypeExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public abstract partial class DeclarationStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal DeclarationStatementSyntax() { }
    }
    public sealed partial class DeclareStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal DeclareStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AliasKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax AliasName { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CharsetKeyword { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken DeclareKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LibKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax LibraryName { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SubOrFunctionKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithAliasKeyword(Microsoft.CodeAnalysis.SyntaxToken aliasKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithAliasName(Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithCharsetKeyword(Microsoft.CodeAnalysis.SyntaxToken charsetKeyword) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithDeclareKeyword(Microsoft.CodeAnalysis.SyntaxToken declareKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithLibKeyword(Microsoft.CodeAnalysis.SyntaxToken libKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithLibraryName(Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax WithSubOrFunctionKeyword(Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword) { throw null; }
    }
    public sealed partial class DelegateStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal DelegateStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken DelegateKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SubOrFunctionKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax AddTypeParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithDelegateKeyword(Microsoft.CodeAnalysis.SyntaxToken delegateKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithSubOrFunctionKeyword(Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax WithTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
    }
    public sealed partial class DirectCastExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CastExpressionSyntax
    {
        internal DirectCastExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public abstract partial class DirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax
    {
        internal DirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetNextDirective(System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> predicate=null) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetPreviousDirective(System.Func<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool> predicate=null) { throw null; }
        public System.Collections.Generic.List<Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax> GetRelatedDirectives() { throw null; }
    }
    public sealed partial class DisableWarningDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal DisableWarningDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DisableKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> ErrorCodes { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WarningKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax AddErrorCodes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken disableKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax WithDisableKeyword(Microsoft.CodeAnalysis.SyntaxToken disableKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax WithErrorCodes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax WithWarningKeyword(Microsoft.CodeAnalysis.SyntaxToken warningKeyword) { throw null; }
    }
    public sealed partial class DistinctClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal DistinctClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DistinctKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken distinctKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax WithDistinctKeyword(Microsoft.CodeAnalysis.SyntaxToken distinctKeyword) { throw null; }
    }
    public sealed partial class DocumentationCommentTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax
    {
        internal DocumentationCommentTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> Content { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax AddContent(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax WithContent(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
    }
    public sealed partial class DoLoopBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal DoLoopBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax WithDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax WithLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class DoStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal DoStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DoKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileOrUntilClause { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax WithDoKeyword(Microsoft.CodeAnalysis.SyntaxToken doKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax WithWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
    }
    public sealed partial class ElseBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ElseBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax elseStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax WithElseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax elseStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class ElseCaseClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax
    {
        internal ElseCaseClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ElseKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
    }
    public sealed partial class ElseDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal ElseDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ElseKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
    }
    public sealed partial class ElseIfBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ElseIfBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax WithElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class ElseIfStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal ElseIfStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ElseIfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ThenKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken elseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax WithElseIfKeyword(Microsoft.CodeAnalysis.SyntaxToken elseIfKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax WithThenKeyword(Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
    }
    public sealed partial class ElseStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal ElseStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ElseKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
    }
    public sealed partial class EmptyStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal EmptyStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Empty { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken empty) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax WithEmpty(Microsoft.CodeAnalysis.SyntaxToken empty) { throw null; }
    }
    public sealed partial class EnableWarningDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal EnableWarningDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EnableKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> ErrorCodes { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WarningKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax AddErrorCodes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken enableKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax WithEnableKeyword(Microsoft.CodeAnalysis.SyntaxToken enableKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax WithErrorCodes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax> errorCodes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax WithWarningKeyword(Microsoft.CodeAnalysis.SyntaxToken warningKeyword) { throw null; }
    }
    public sealed partial class EndBlockStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal EndBlockStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken BlockKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EndKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax WithBlockKeyword(Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax WithEndKeyword(Microsoft.CodeAnalysis.SyntaxToken endKeyword) { throw null; }
    }
    public sealed partial class EndExternalSourceDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal EndExternalSourceDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EndKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ExternalSourceKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax WithEndKeyword(Microsoft.CodeAnalysis.SyntaxToken endKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax WithExternalSourceKeyword(Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
    }
    public sealed partial class EndIfDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal EndIfDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EndKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IfKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax WithEndKeyword(Microsoft.CodeAnalysis.SyntaxToken endKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
    }
    public sealed partial class EndRegionDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal EndRegionDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EndKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken RegionKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken regionKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax WithEndKeyword(Microsoft.CodeAnalysis.SyntaxToken endKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax WithRegionKeyword(Microsoft.CodeAnalysis.SyntaxToken regionKeyword) { throw null; }
    }
    public sealed partial class EnumBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal EnumBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEnumStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax WithEndEnumStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEnumStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax WithEnumStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
    }
    public sealed partial class EnumMemberDeclarationSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal EnumMemberDeclarationSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax Initializer { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
    }
    public sealed partial class EnumStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal EnumStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EnumKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax UnderlyingType { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken enumKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax WithEnumKeyword(Microsoft.CodeAnalysis.SyntaxToken enumKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax WithUnderlyingType(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType) { throw null; }
    }
    public sealed partial class EqualsValueSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal EqualsValueSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax Update(Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
    }
    public sealed partial class EraseStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal EraseStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EraseKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> Expressions { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax AddExpressions(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken eraseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> expressions) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax WithEraseKeyword(Microsoft.CodeAnalysis.SyntaxToken eraseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax WithExpressions(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> expressions) { throw null; }
    }
    public sealed partial class ErrorStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ErrorStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ErrorKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax ErrorNumber { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax WithErrorKeyword(Microsoft.CodeAnalysis.SyntaxToken errorKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax WithErrorNumber(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber) { throw null; }
    }
    public sealed partial class EventBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal EventBlockSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> Accessors { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax AddAccessors(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithAccessors(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithEndEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement) { throw null; }
    }
    public abstract partial class EventContainerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal EventContainerSyntax() { }
    }
    public sealed partial class EventStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal EventStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CustomKeyword { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EventKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax AddImplementsClauseInterfaceMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken customKeyword, Microsoft.CodeAnalysis.SyntaxToken eventKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithCustomKeyword(Microsoft.CodeAnalysis.SyntaxToken customKeyword) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithEventKeyword(Microsoft.CodeAnalysis.SyntaxToken eventKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
    }
    public abstract partial class ExecutableStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal ExecutableStatementSyntax() { }
    }
    public sealed partial class ExitStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ExitStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken BlockKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ExitKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax WithBlockKeyword(Microsoft.CodeAnalysis.SyntaxToken blockKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax WithExitKeyword(Microsoft.CodeAnalysis.SyntaxToken exitKeyword) { throw null; }
    }
    public sealed partial class ExpressionRangeVariableSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ExpressionRangeVariableSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax NameEquals { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax WithNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals) { throw null; }
    }
    public sealed partial class ExpressionStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ExpressionStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
    }
    public abstract partial class ExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ExpressionSyntax() { }
    }
    public sealed partial class ExternalChecksumDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal ExternalChecksumDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Checksum { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ExternalChecksumKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ExternalSource { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken FirstCommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Guid { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SecondCommaToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken externalChecksumKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken externalSource, Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, Microsoft.CodeAnalysis.SyntaxToken guid, Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, Microsoft.CodeAnalysis.SyntaxToken checksum, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithChecksum(Microsoft.CodeAnalysis.SyntaxToken checksum) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithExternalChecksumKeyword(Microsoft.CodeAnalysis.SyntaxToken externalChecksumKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithExternalSource(Microsoft.CodeAnalysis.SyntaxToken externalSource) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithFirstCommaToken(Microsoft.CodeAnalysis.SyntaxToken firstCommaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithGuid(Microsoft.CodeAnalysis.SyntaxToken guid) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax WithSecondCommaToken(Microsoft.CodeAnalysis.SyntaxToken secondCommaToken) { throw null; }
    }
    public sealed partial class ExternalSourceDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal ExternalSourceDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ExternalSource { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ExternalSourceKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LineStart { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken externalSource, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.SyntaxToken lineStart, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithExternalSource(Microsoft.CodeAnalysis.SyntaxToken externalSource) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithExternalSourceKeyword(Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithLineStart(Microsoft.CodeAnalysis.SyntaxToken lineStart) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class FieldDeclarationSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal FieldDeclarationSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> Declarators { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax AddDeclarators(params Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax WithDeclarators(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
    }
    public abstract partial class FieldInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal FieldInitializerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken KeyKeyword { get { throw null; } }
    }
    public sealed partial class FinallyBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal FinallyBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax finallyStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax WithFinallyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax finallyStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class FinallyStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal FinallyStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken FinallyKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken finallyKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax WithFinallyKeyword(Microsoft.CodeAnalysis.SyntaxToken finallyKeyword) { throw null; }
    }
    public sealed partial class ForBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax
    {
        internal ForBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax AddNextStatementControlVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithForStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class ForEachBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax
    {
        internal ForEachBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax AddNextStatementControlVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax WithForEachStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax WithNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class ForEachStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax
    {
        internal ForEachStatementSyntax() { }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode ControlVariable { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EachKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken ForKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken InKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.SyntaxToken eachKeyword, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax WithControlVariable(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax WithEachKeyword(Microsoft.CodeAnalysis.SyntaxToken eachKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax WithForKeyword(Microsoft.CodeAnalysis.SyntaxToken forKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax WithInKeyword(Microsoft.CodeAnalysis.SyntaxToken inKeyword) { throw null; }
    }
    public abstract partial class ForOrForEachBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ForOrForEachBlockSyntax() { }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement { get; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
    }
    public abstract partial class ForOrForEachStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal ForOrForEachStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode ControlVariable { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ForKeyword { get { throw null; } }
    }
    public sealed partial class ForStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax
    {
        internal ForStatementSyntax() { }
        public new Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode ControlVariable { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken ForKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax FromValue { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax StepClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ToKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax ToValue { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithControlVariable(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithForKeyword(Microsoft.CodeAnalysis.SyntaxToken forKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithFromValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithToKeyword(Microsoft.CodeAnalysis.SyntaxToken toKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax WithToValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue) { throw null; }
    }
    public sealed partial class ForStepClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ForStepClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken StepKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax StepValue { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken stepKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax WithStepKeyword(Microsoft.CodeAnalysis.SyntaxToken stepKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax WithStepValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue) { throw null; }
    }
    public sealed partial class FromClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal FromClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken FromKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> Variables { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax AddVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax WithFromKeyword(Microsoft.CodeAnalysis.SyntaxToken fromKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> variables) { throw null; }
    }
    public sealed partial class FunctionAggregationSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax
    {
        internal FunctionAggregationSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Argument { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken FunctionName { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax Update(Microsoft.CodeAnalysis.SyntaxToken functionName, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax WithArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax WithFunctionName(Microsoft.CodeAnalysis.SyntaxToken functionName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class GenericNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax
    {
        internal GenericNameSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax AddTypeArgumentListArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax Update(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax WithTypeArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList) { throw null; }
    }
    public sealed partial class GetTypeExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal GetTypeExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GetTypeKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken getTypeKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax WithGetTypeKeyword(Microsoft.CodeAnalysis.SyntaxToken getTypeKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public sealed partial class GetXmlNamespaceExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal GetXmlNamespaceExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GetXmlNamespaceKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken getXmlNamespaceKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax WithGetXmlNamespaceKeyword(Microsoft.CodeAnalysis.SyntaxToken getXmlNamespaceKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class GlobalNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax
    {
        internal GlobalNameSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken GlobalKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax Update(Microsoft.CodeAnalysis.SyntaxToken globalKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax WithGlobalKeyword(Microsoft.CodeAnalysis.SyntaxToken globalKeyword) { throw null; }
    }
    public sealed partial class GoToStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal GoToStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken GoToKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax WithGoToKeyword(Microsoft.CodeAnalysis.SyntaxToken goToKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax WithLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
    }
    public sealed partial class GroupAggregationSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax
    {
        internal GroupAggregationSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken GroupKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax Update(Microsoft.CodeAnalysis.SyntaxToken groupKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax WithGroupKeyword(Microsoft.CodeAnalysis.SyntaxToken groupKeyword) { throw null; }
    }
    public sealed partial class GroupByClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal GroupByClauseSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> AggregationVariables { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ByKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GroupKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IntoKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> Items { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> Keys { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax AddAggregationVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax AddItems(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax AddKeys(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> items, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> keys, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax WithAggregationVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax WithByKeyword(Microsoft.CodeAnalysis.SyntaxToken byKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax WithGroupKeyword(Microsoft.CodeAnalysis.SyntaxToken groupKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax WithIntoKeyword(Microsoft.CodeAnalysis.SyntaxToken intoKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax WithItems(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax WithKeys(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> keys) { throw null; }
    }
    public sealed partial class GroupJoinClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax
    {
        internal GroupJoinClauseSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> AdditionalJoins { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> AggregationVariables { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GroupKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IntoKeyword { get { throw null; } }
        public override Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> JoinConditions { get { throw null; } }
        public override Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> JoinedVariables { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken JoinKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken OnKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax AddAdditionalJoins(params Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax AddAggregationVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax AddJoinConditions(params Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax AddJoinedVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithAdditionalJoins(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithAggregationVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax> aggregationVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithGroupKeyword(Microsoft.CodeAnalysis.SyntaxToken groupKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithIntoKeyword(Microsoft.CodeAnalysis.SyntaxToken intoKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithJoinConditions(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithJoinedVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithJoinKeyword(Microsoft.CodeAnalysis.SyntaxToken joinKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax WithOnKeyword(Microsoft.CodeAnalysis.SyntaxToken onKeyword) { throw null; }
    }
    public sealed partial class HandlesClauseItemSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal HandlesClauseItemSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DotToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax EventContainer { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax EventMember { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax WithDotToken(Microsoft.CodeAnalysis.SyntaxToken dotToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax WithEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax WithEventMember(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember) { throw null; }
    }
    public sealed partial class HandlesClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal HandlesClauseSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax> Events { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken HandlesKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax AddEvents(params Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken handlesKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax> events) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax WithEvents(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax> events) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax WithHandlesKeyword(Microsoft.CodeAnalysis.SyntaxToken handlesKeyword) { throw null; }
    }
    public sealed partial class IdentifierNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax
    {
        internal IdentifierNameSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax Update(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
    }
    public sealed partial class IfDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal IfDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ElseKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IfOrElseIfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ThenKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax WithIfOrElseIfKeyword(Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax WithThenKeyword(Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
    }
    public sealed partial class IfStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal IfStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ThenKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax WithThenKeyword(Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
    }
    public sealed partial class ImplementsClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ImplementsClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ImplementsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax> InterfaceMembers { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax AddInterfaceMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax> interfaceMembers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax WithImplementsKeyword(Microsoft.CodeAnalysis.SyntaxToken implementsKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax WithInterfaceMembers(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax> interfaceMembers) { throw null; }
    }
    public sealed partial class ImplementsStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsOrImplementsStatementSyntax
    {
        internal ImplementsStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ImplementsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> Types { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax AddTypes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax WithImplementsKeyword(Microsoft.CodeAnalysis.SyntaxToken implementsKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
    }
    public sealed partial class ImportAliasClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ImportAliasClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
    }
    public abstract partial class ImportsClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ImportsClauseSyntax() { }
    }
    public sealed partial class ImportsStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal ImportsStatementSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax> ImportsClauses { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ImportsKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax AddImportsClauses(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken importsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax> importsClauses) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax WithImportsClauses(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax> importsClauses) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax WithImportsKeyword(Microsoft.CodeAnalysis.SyntaxToken importsKeyword) { throw null; }
    }
    public sealed partial class IncompleteMemberSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal IncompleteMemberSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken MissingIdentifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken missingIdentifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax WithMissingIdentifier(Microsoft.CodeAnalysis.SyntaxToken missingIdentifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
    }
    public sealed partial class InferredFieldInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax
    {
        internal InferredFieldInitializerSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken KeyKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax WithKeyKeyword(Microsoft.CodeAnalysis.SyntaxToken keyKeyword) { throw null; }
    }
    public abstract partial class InheritsOrImplementsStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal InheritsOrImplementsStatementSyntax() { }
    }
    public sealed partial class InheritsStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsOrImplementsStatementSyntax
    {
        internal InheritsStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken InheritsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> Types { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax AddTypes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken inheritsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax WithInheritsKeyword(Microsoft.CodeAnalysis.SyntaxToken inheritsKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax WithTypes(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> types) { throw null; }
    }
    public abstract partial class InstanceExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal InstanceExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
    }
    public sealed partial class InterfaceBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax
    {
        internal InterfaceBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> Implements { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> Inherits { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax AddImplements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax AddInherits(params Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endInterfaceStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithEndInterfaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endInterfaceStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithImplements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithInherits(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithInterfaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
    }
    public sealed partial class InterfaceStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax
    {
        internal InterfaceStatementSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken InterfaceKeyword { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax AddTypeParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken interfaceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax WithInterfaceKeyword(Microsoft.CodeAnalysis.SyntaxToken interfaceKeyword) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax WithTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
    }
    public abstract partial class InterpolatedStringContentSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal InterpolatedStringContentSyntax() { }
    }
    public sealed partial class InterpolatedStringExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal InterpolatedStringExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax> Contents { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken DollarSignDoubleQuoteToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken DoubleQuoteToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax AddContents(params Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken dollarSignDoubleQuoteToken, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax> contents, Microsoft.CodeAnalysis.SyntaxToken doubleQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax WithContents(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax> contents) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax WithDollarSignDoubleQuoteToken(Microsoft.CodeAnalysis.SyntaxToken dollarSignDoubleQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax WithDoubleQuoteToken(Microsoft.CodeAnalysis.SyntaxToken doubleQuoteToken) { throw null; }
    }
    public sealed partial class InterpolatedStringTextSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax
    {
        internal InterpolatedStringTextSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken TextToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax Update(Microsoft.CodeAnalysis.SyntaxToken textToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax WithTextToken(Microsoft.CodeAnalysis.SyntaxToken textToken) { throw null; }
    }
    public sealed partial class InterpolationAlignmentClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal InterpolationAlignmentClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
    }
    public sealed partial class InterpolationFormatClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal InterpolationFormatClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ColonToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken FormatStringToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SyntaxToken formatStringToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax WithColonToken(Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax WithFormatStringToken(Microsoft.CodeAnalysis.SyntaxToken formatStringToken) { throw null; }
    }
    public sealed partial class InterpolationSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax
    {
        internal InterpolationSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax AlignmentClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax FormatClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax formatClause, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax WithAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax WithFormatClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax formatClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken openBraceToken) { throw null; }
    }
    public sealed partial class InvocationExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal InvocationExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax AddArgumentListArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax WithArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
    }
    public abstract partial class JoinClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal JoinClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> AdditionalJoins { get { throw null; } }
        public virtual Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> JoinConditions { get { throw null; } }
        public virtual Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> JoinedVariables { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken JoinKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OnKeyword { get { throw null; } }
    }
    public sealed partial class JoinConditionSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal JoinConditionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Left { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Right { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken equalsKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax WithEqualsKeyword(Microsoft.CodeAnalysis.SyntaxToken equalsKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax WithLeft(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax WithRight(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) { throw null; }
    }
    public sealed partial class KeywordEventContainerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax
    {
        internal KeywordEventContainerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public sealed partial class LabelStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal LabelStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ColonToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LabelToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken labelToken, Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax WithColonToken(Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax WithLabelToken(Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
    }
    public sealed partial class LabelSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal LabelSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken LabelToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax WithLabelToken(Microsoft.CodeAnalysis.SyntaxToken labelToken) { throw null; }
    }
    public abstract partial class LambdaExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal LambdaExpressionSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use SubOrFunctionHeader instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax Begin { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubOrFunctionHeader { get { throw null; } }
    }
    public sealed partial class LambdaHeaderSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal LambdaHeaderSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SubOrFunctionKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax WithSubOrFunctionKeyword(Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword) { throw null; }
    }
    public sealed partial class LetClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal LetClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken LetKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> Variables { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax AddVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken letKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax WithLetKeyword(Microsoft.CodeAnalysis.SyntaxToken letKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
    }
    public enum LiteralBase
    {
        Decimal = 0,
        Hexadecimal = 1,
        Octal = 2,
    }
    public sealed partial class LiteralExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal LiteralExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Token { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax WithToken(Microsoft.CodeAnalysis.SyntaxToken token) { throw null; }
    }
    public sealed partial class LocalDeclarationStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal LocalDeclarationStatementSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> Declarators { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax AddDeclarators(params Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax WithDeclarators(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> declarators) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
    }
    public sealed partial class LoopStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal LoopStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken LoopKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileOrUntilClause { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax WithLoopKeyword(Microsoft.CodeAnalysis.SyntaxToken loopKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax WithWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) { throw null; }
    }
    public sealed partial class MeExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InstanceExpressionSyntax
    {
        internal MeExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public sealed partial class MemberAccessExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal MemberAccessExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
    }
    public abstract partial class MethodBaseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal MethodBaseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use DeclarationKeyword or a more specific property (e.g. SubOrFunctionKeyword) instead.", true)]
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword);
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use DeclarationKeyword or a more specific property (e.g. WithSubOrFunctionKeyword) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public abstract partial class MethodBlockBaseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal MethodBlockBaseSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use BlockStatement or a more specific property (e.g. SubOrFunctionStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax Begin { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax BlockStatement { get; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use EndBlockStatement or a more specific property (e.g. EndSubOrFunctionStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get; }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithBlockStatement or a more specific property (e.g. WithSubOrFunctionStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax begin) { throw null; }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax blockStatement);
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithEndBlockStatement or a more specific property (e.g. WithEndSubOrFunctionStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement);
    }
    public sealed partial class MethodBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax
    {
        internal MethodBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubOrFunctionStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubOrFunctionStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax WithEndSubOrFunctionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax WithSubOrFunctionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement) { throw null; }
    }
    public sealed partial class MethodStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal MethodStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SubOrFunctionKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax AddHandlesClauseEvents(params Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax AddImplementsClauseInterfaceMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax AddTypeParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithHandlesClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithSubOrFunctionKeyword(Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax WithTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
    }
    public sealed partial class MidExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal MidExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Mid { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax AddArgumentListArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken mid, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax WithArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax WithMid(Microsoft.CodeAnalysis.SyntaxToken mid) { throw null; }
    }
    public sealed partial class ModifiedIdentifierSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ModifiedIdentifierSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArrayBounds { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> ArrayRankSpecifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Nullable { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax AddArrayBoundsArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax AddArrayRankSpecifiers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax Update(Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken nullable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> arrayRankSpecifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax WithArrayBounds(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax WithArrayRankSpecifiers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax> arrayRankSpecifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax WithNullable(Microsoft.CodeAnalysis.SyntaxToken nullable) { throw null; }
    }
    public sealed partial class ModuleBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax
    {
        internal ModuleBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> Implements { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> Inherits { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddImplements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddInherits(params Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithEndModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithImplements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithInherits(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement) { throw null; }
    }
    public sealed partial class ModuleStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax
    {
        internal ModuleStatementSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ModuleKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax AddTypeParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken moduleKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax WithModuleKeyword(Microsoft.CodeAnalysis.SyntaxToken moduleKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax WithTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
    }
    public sealed partial class MultiLineIfBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal MultiLineIfBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax> ElseIfBlocks { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax AddElseBlockStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax AddElseIfBlocks(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax> elseIfBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endIfStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax WithElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax WithElseIfBlocks(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax> elseIfBlocks) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax WithEndIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endIfStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax WithIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class MultiLineLambdaExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaExpressionSyntax
    {
        internal MultiLineLambdaExpressionSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use SubOrFunctionHeader instead.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax Begin { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use EndBlockStatement or a more specific property (e.g. EndClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubOrFunctionStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubOrFunctionHeader { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithBlockStatement or a more specific property (e.g. WithClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax begin) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithEndBlockStatement or a more specific property (e.g. WithEndClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax WithEndSubOrFunctionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax WithSubOrFunctionHeader(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader) { throw null; }
    }
    public sealed partial class MyBaseExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InstanceExpressionSyntax
    {
        internal MyBaseExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public sealed partial class MyClassExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.InstanceExpressionSyntax
    {
        internal MyClassExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public sealed partial class NameColonEqualsSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal NameColonEqualsSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ColonEqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken colonEqualsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax WithColonEqualsToken(Microsoft.CodeAnalysis.SyntaxToken colonEqualsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) { throw null; }
    }
    public sealed partial class NamedFieldInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax
    {
        internal NamedFieldInitializerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DotToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken KeyKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyKeyword, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax WithDotToken(Microsoft.CodeAnalysis.SyntaxToken dotToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax WithKeyKeyword(Microsoft.CodeAnalysis.SyntaxToken keyKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) { throw null; }
    }
    public sealed partial class NameOfExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal NameOfExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Argument { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken NameOfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken nameOfKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax WithArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax WithNameOfKeyword(Microsoft.CodeAnalysis.SyntaxToken nameOfKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class NamespaceBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal NamespaceBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endNamespaceStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax WithEndNamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endNamespaceStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax WithNamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement) { throw null; }
    }
    public sealed partial class NamespaceStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal NamespaceStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken NamespaceKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax WithNamespaceKeyword(Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword) { throw null; }
    }
    public abstract partial class NameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax
    {
        internal NameSyntax() { }
        public int Arity { get { throw null; } }
    }
    public abstract partial class NewExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal NewExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken NewKeyword { get { throw null; } }
    }
    public sealed partial class NextStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal NextStatementSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> ControlVariables { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken NextKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax AddControlVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken nextKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> controlVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax WithControlVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax> controlVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax WithNextKeyword(Microsoft.CodeAnalysis.SyntaxToken nextKeyword) { throw null; }
    }
    public sealed partial class NullableTypeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax
    {
        internal NullableTypeSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax ElementType { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken QuestionMarkToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxToken questionMarkToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax WithElementType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax WithQuestionMarkToken(Microsoft.CodeAnalysis.SyntaxToken questionMarkToken) { throw null; }
    }
    public sealed partial class ObjectCollectionInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax
    {
        internal ObjectCollectionInitializerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken FromKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax Initializer { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax AddInitializerInitializers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax WithFromKeyword(Microsoft.CodeAnalysis.SyntaxToken fromKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) { throw null; }
    }
    public sealed partial class ObjectCreationExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax
    {
        internal ObjectCreationExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax Initializer { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken NewKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax AddArgumentListArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax WithArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken newKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public abstract partial class ObjectCreationInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ObjectCreationInitializerSyntax() { }
    }
    public sealed partial class ObjectMemberInitializerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax
    {
        internal ObjectMemberInitializerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax> Initializers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WithKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax AddInitializers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken withKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax> initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax WithInitializers(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax> initializers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken openBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax WithWithKeyword(Microsoft.CodeAnalysis.SyntaxToken withKeyword) { throw null; }
    }
    public sealed partial class OmittedArgumentSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax
    {
        internal OmittedArgumentSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Empty { get { throw null; } }
        public sealed override bool IsNamed { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        public sealed override Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetExpression() { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax Update(Microsoft.CodeAnalysis.SyntaxToken empty) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax WithEmpty(Microsoft.CodeAnalysis.SyntaxToken empty) { throw null; }
    }
    public sealed partial class OnErrorGoToStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal OnErrorGoToStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ErrorKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GoToKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Minus { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OnKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax WithErrorKeyword(Microsoft.CodeAnalysis.SyntaxToken errorKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax WithGoToKeyword(Microsoft.CodeAnalysis.SyntaxToken goToKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax WithLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax WithMinus(Microsoft.CodeAnalysis.SyntaxToken minus) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax WithOnKeyword(Microsoft.CodeAnalysis.SyntaxToken onKeyword) { throw null; }
    }
    public sealed partial class OnErrorResumeNextStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal OnErrorResumeNextStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ErrorKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken NextKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OnKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ResumeKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.SyntaxToken nextKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax WithErrorKeyword(Microsoft.CodeAnalysis.SyntaxToken errorKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax WithNextKeyword(Microsoft.CodeAnalysis.SyntaxToken nextKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax WithOnKeyword(Microsoft.CodeAnalysis.SyntaxToken onKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax WithResumeKeyword(Microsoft.CodeAnalysis.SyntaxToken resumeKeyword) { throw null; }
    }
    public sealed partial class OperatorBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax
    {
        internal OperatorBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endOperatorStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax WithEndOperatorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endOperatorStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax WithOperatorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class OperatorStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal OperatorStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithOperatorKeyword(Microsoft.CodeAnalysis.SyntaxToken operatorKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
    }
    public sealed partial class OptionStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal OptionStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken NameKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OptionKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ValueKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken optionKeyword, Microsoft.CodeAnalysis.SyntaxToken nameKeyword, Microsoft.CodeAnalysis.SyntaxToken valueKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax WithNameKeyword(Microsoft.CodeAnalysis.SyntaxToken nameKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax WithOptionKeyword(Microsoft.CodeAnalysis.SyntaxToken optionKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax WithValueKeyword(Microsoft.CodeAnalysis.SyntaxToken valueKeyword) { throw null; }
    }
    public sealed partial class OrderByClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal OrderByClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ByKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax> Orderings { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OrderKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax AddOrderings(params Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken orderKeyword, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax> orderings) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax WithByKeyword(Microsoft.CodeAnalysis.SyntaxToken byKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax WithOrderings(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax> orderings) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax WithOrderKeyword(Microsoft.CodeAnalysis.SyntaxToken orderKeyword) { throw null; }
    }
    public sealed partial class OrderingSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal OrderingSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AscendingOrDescendingKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax WithAscendingOrDescendingKeyword(Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
    }
    public sealed partial class ParameterListSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ParameterListSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax> Parameters { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax AddParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax> parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax> parameters) { throw null; }
    }
    public sealed partial class ParameterSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal ParameterSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax Default { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax @default) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax WithDefault(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax @default) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax WithIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
    }
    public sealed partial class ParenthesizedExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal ParenthesizedExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class PartitionClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal PartitionClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Count { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SkipOrTakeKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax WithCount(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax WithSkipOrTakeKeyword(Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword) { throw null; }
    }
    public sealed partial class PartitionWhileClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal PartitionWhileClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SkipOrTakeKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WhileKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax WithSkipOrTakeKeyword(Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax WithWhileKeyword(Microsoft.CodeAnalysis.SyntaxToken whileKeyword) { throw null; }
    }
    public sealed partial class PredefinedCastExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal PredefinedCastExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public sealed partial class PredefinedTypeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax
    {
        internal PredefinedTypeSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public sealed partial class PrintStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal PrintStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken QuestionToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken questionToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax WithQuestionToken(Microsoft.CodeAnalysis.SyntaxToken questionToken) { throw null; }
    }
    public sealed partial class PropertyBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal PropertyBlockSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> Accessors { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax AddAccessors(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endPropertyStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax WithAccessors(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax> accessors) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax WithEndPropertyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endPropertyStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax WithPropertyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement) { throw null; }
    }
    public sealed partial class PropertyStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal PropertyStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax AsClause { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax Initializer { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken PropertyKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax AddImplementsClauseInterfaceMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken propertyKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax WithPropertyKeyword(Microsoft.CodeAnalysis.SyntaxToken propertyKeyword) { throw null; }
    }
    public sealed partial class QualifiedCrefOperatorReferenceSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax
    {
        internal QualifiedCrefOperatorReferenceSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DotToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax Left { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax Right { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax WithDotToken(Microsoft.CodeAnalysis.SyntaxToken dotToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax WithLeft(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax WithRight(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right) { throw null; }
    }
    public sealed partial class QualifiedNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax
    {
        internal QualifiedNameSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DotToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax Left { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax Right { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax WithDotToken(Microsoft.CodeAnalysis.SyntaxToken dotToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax WithLeft(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax WithRight(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right) { throw null; }
    }
    public abstract partial class QueryClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal QueryClauseSyntax() { }
    }
    public sealed partial class QueryExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal QueryExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> Clauses { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax AddClauses(params Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> clauses) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax WithClauses(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax> clauses) { throw null; }
    }
    public sealed partial class RaiseEventStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal RaiseEventStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken RaiseEventKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax AddArgumentListArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken raiseEventKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax WithArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax WithRaiseEventKeyword(Microsoft.CodeAnalysis.SyntaxToken raiseEventKeyword) { throw null; }
    }
    public sealed partial class RangeArgumentSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax
    {
        internal RangeArgumentSyntax() { }
        public sealed override bool IsNamed { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax LowerBound { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ToKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax UpperBound { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        public sealed override Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetExpression() { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax WithLowerBound(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax WithToKeyword(Microsoft.CodeAnalysis.SyntaxToken toKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax WithUpperBound(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
    }
    public sealed partial class RangeCaseClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax
    {
        internal RangeCaseClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax LowerBound { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ToKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax UpperBound { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax WithLowerBound(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax WithToKeyword(Microsoft.CodeAnalysis.SyntaxToken toKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax WithUpperBound(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) { throw null; }
    }
    public sealed partial class RedimClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal RedimClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArrayBounds { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax AddArrayBoundsArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax WithArrayBounds(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
    }
    public sealed partial class ReDimStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ReDimStatementSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> Clauses { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken PreserveKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ReDimKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax AddClauses(params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax WithClauses(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax> clauses) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax WithPreserveKeyword(Microsoft.CodeAnalysis.SyntaxToken preserveKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax WithReDimKeyword(Microsoft.CodeAnalysis.SyntaxToken reDimKeyword) { throw null; }
    }
    public sealed partial class ReferenceDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal ReferenceDirectiveTriviaSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken File { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ReferenceKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken referenceKeyword, Microsoft.CodeAnalysis.SyntaxToken file) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax WithFile(Microsoft.CodeAnalysis.SyntaxToken file) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax WithReferenceKeyword(Microsoft.CodeAnalysis.SyntaxToken referenceKeyword) { throw null; }
    }
    public sealed partial class RegionDirectiveTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax
    {
        internal RegionDirectiveTriviaSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken HashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken RegionKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken regionKeyword, Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax WithHashToken(Microsoft.CodeAnalysis.SyntaxToken hashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax WithName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax WithRegionKeyword(Microsoft.CodeAnalysis.SyntaxToken regionKeyword) { throw null; }
    }
    public sealed partial class RelationalCaseClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax
    {
        internal RelationalCaseClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken IsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax WithIsKeyword(Microsoft.CodeAnalysis.SyntaxToken isKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
    }
    public sealed partial class ResumeStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ResumeStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ResumeKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax WithLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax WithResumeKeyword(Microsoft.CodeAnalysis.SyntaxToken resumeKeyword) { throw null; }
    }
    public sealed partial class ReturnStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ReturnStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ReturnKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken returnKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax WithReturnKeyword(Microsoft.CodeAnalysis.SyntaxToken returnKeyword) { throw null; }
    }
    public sealed partial class SelectBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal SelectBlockSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax> CaseBlocks { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax AddCaseBlocks(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax> caseBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSelectStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax WithCaseBlocks(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax> caseBlocks) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax WithEndSelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSelectStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax WithSelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement) { throw null; }
    }
    public sealed partial class SelectClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal SelectClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken SelectKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> Variables { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax AddVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax WithSelectKeyword(Microsoft.CodeAnalysis.SyntaxToken selectKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax> variables) { throw null; }
    }
    public sealed partial class SelectStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal SelectStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CaseKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SelectKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax WithCaseKeyword(Microsoft.CodeAnalysis.SyntaxToken caseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax WithSelectKeyword(Microsoft.CodeAnalysis.SyntaxToken selectKeyword) { throw null; }
    }
    public sealed partial class SimpleArgumentSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax
    {
        internal SimpleArgumentSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public sealed override bool IsNamed { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        public sealed override Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetExpression() { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax nameColonEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax WithNameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax nameColonEquals) { throw null; }
    }
    public sealed partial class SimpleAsClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax
    {
        internal SimpleAsClauseSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken AsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax WithAsKeyword(Microsoft.CodeAnalysis.SyntaxToken asKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public sealed partial class SimpleCaseClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax
    {
        internal SimpleCaseClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) { throw null; }
    }
    public sealed partial class SimpleImportsClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax
    {
        internal SimpleImportsClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax Alias { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax alias, Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax WithAlias(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax alias) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) { throw null; }
    }
    public sealed partial class SimpleJoinClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax
    {
        internal SimpleJoinClauseSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> AdditionalJoins { get { throw null; } }
        public override Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> JoinConditions { get { throw null; } }
        public override Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> JoinedVariables { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken JoinKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken OnKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax AddAdditionalJoins(params Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax AddJoinConditions(params Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax AddJoinedVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax WithAdditionalJoins(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax> additionalJoins) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax WithJoinConditions(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax> joinConditions) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax WithJoinedVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax> joinedVariables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax WithJoinKeyword(Microsoft.CodeAnalysis.SyntaxToken joinKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax WithOnKeyword(Microsoft.CodeAnalysis.SyntaxToken onKeyword) { throw null; }
    }
    public abstract partial class SimpleNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax
    {
        internal SimpleNameSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
    }
    public sealed partial class SingleLineElseClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal SingleLineElseClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ElseKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax WithElseKeyword(Microsoft.CodeAnalysis.SyntaxToken elseKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
    }
    public sealed partial class SingleLineIfStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal SingleLineIfStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax ElseClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ThenKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax AddElseClauseStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax WithElseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax WithThenKeyword(Microsoft.CodeAnalysis.SyntaxToken thenKeyword) { throw null; }
    }
    public sealed partial class SingleLineLambdaExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaExpressionSyntax
    {
        internal SingleLineLambdaExpressionSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use SubOrFunctionHeader instead.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax Begin { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode Body { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubOrFunctionHeader { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithSubOrFunctionHeader instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax begin) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax WithBody(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax WithSubOrFunctionHeader(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader) { throw null; }
    }
    public sealed partial class SkippedTokensTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax, Microsoft.CodeAnalysis.ISkippedTokensTriviaSyntax
    {
        internal SkippedTokensTriviaSyntax() { }
        Microsoft.CodeAnalysis.SyntaxTokenList ISkippedTokensTriviaSyntax_Tokens { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Tokens { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax AddTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax Update(Microsoft.CodeAnalysis.SyntaxTokenList tokens) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax WithTokens(Microsoft.CodeAnalysis.SyntaxTokenList tokens) { throw null; }
    }
    public sealed partial class SpecialConstraintSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax
    {
        internal SpecialConstraintSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ConstraintKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax WithConstraintKeyword(Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) { throw null; }
    }
    public abstract partial class StatementSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal StatementSyntax() { }
    }
    public sealed partial class StopOrEndStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal StopOrEndStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken StopOrEndKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax WithStopOrEndKeyword(Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) { throw null; }
    }
    public sealed partial class StructureBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax
    {
        internal StructureBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax Begin { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> Implements { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> Inherits { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax AddImplements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax AddInherits(params Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax AddMembers(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endStructureStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax begin) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithEndStructureStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endStructureStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithImplements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> implements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithInherits(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> inherits) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithMembers(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> members) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax WithStructureStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement) { throw null; }
    }
    public abstract partial class StructuredTriviaSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode, Microsoft.CodeAnalysis.IStructuredTriviaSyntax
    {
        internal StructuredTriviaSyntax() { }
        public override Microsoft.CodeAnalysis.SyntaxTrivia ParentTrivia { get { throw null; } }
    }
    public sealed partial class StructureStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax
    {
        internal StructureStatementSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken StructureKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax AddTypeParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken structureKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax WithStructureKeyword(Microsoft.CodeAnalysis.SyntaxToken structureKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax WithTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) { throw null; }
    }
    public sealed partial class SubNewStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax
    {
        internal SubNewStatementSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public override Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken NewKeyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SubKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax AddAttributeLists(params Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax AddModifiers(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax AddParameterListParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subKeyword, Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> attributeLists) { throw null; }
        public override Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBaseSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete.", true)]
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList modifiers) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax WithNewKeyword(Microsoft.CodeAnalysis.SyntaxToken newKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax WithParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax WithSubKeyword(Microsoft.CodeAnalysis.SyntaxToken subKeyword) { throw null; }
    }
    public sealed partial class SyncLockBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal SyncLockBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSyncLockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax WithEndSyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSyncLockStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax WithSyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement) { throw null; }
    }
    public sealed partial class SyncLockStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal SyncLockStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SyncLockKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken syncLockKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax WithSyncLockKeyword(Microsoft.CodeAnalysis.SyntaxToken syncLockKeyword) { throw null; }
    }
    public partial class SyntaxNodeRemover
    {
        public SyntaxNodeRemover() { }
    }
    public sealed partial class TernaryConditionalExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal TernaryConditionalExpressionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken FirstCommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken IfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SecondCommaToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax WhenFalse { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax WhenTrue { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithFirstCommaToken(Microsoft.CodeAnalysis.SyntaxToken firstCommaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithIfKeyword(Microsoft.CodeAnalysis.SyntaxToken ifKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithSecondCommaToken(Microsoft.CodeAnalysis.SyntaxToken secondCommaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithWhenFalse(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax WithWhenTrue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue) { throw null; }
    }
    public sealed partial class ThrowStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal ThrowStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken ThrowKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax WithThrowKeyword(Microsoft.CodeAnalysis.SyntaxToken throwKeyword) { throw null; }
    }
    public sealed partial class TryBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal TryBlockSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax> CatchBlocks { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax AddCatchBlocks(params Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax AddFinallyBlockStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax tryStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax> catchBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endTryStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax WithCatchBlocks(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax> catchBlocks) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax WithEndTryStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endTryStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax WithFinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax WithTryStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax tryStatement) { throw null; }
    }
    public sealed partial class TryCastExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.CastExpressionSyntax
    {
        internal TryCastExpressionSyntax() { }
        public new Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken CommaToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public new Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public new Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax WithCommaToken(Microsoft.CodeAnalysis.SyntaxToken commaToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public sealed partial class TryStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal TryStatementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken TryKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken tryKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax WithTryKeyword(Microsoft.CodeAnalysis.SyntaxToken tryKeyword) { throw null; }
    }
    public sealed partial class TypeArgumentListSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal TypeArgumentListSyntax() { }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> Arguments { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax AddArguments(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken ofKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax WithArguments(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax> arguments) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax WithOfKeyword(Microsoft.CodeAnalysis.SyntaxToken ofKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
    }
    public abstract partial class TypeBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal TypeBlockSyntax() { }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use BlockStatement or a more specific property (e.g. ClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax Begin { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get; }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use EndBlockStatement or a more specific property (e.g. EndClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get; }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax> Implements { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax> Inherits { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Members { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithBlockStatement or a more specific property (e.g. WithClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax begin) { throw null; }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement);
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use WithEndBlockStatement or a more specific property (e.g. WithEndClassStatement) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) { throw null; }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement);
    }
    public enum TypeCharacter
    {
        Decimal = 3,
        DecimalLiteral = 15,
        Double = 5,
        DoubleLiteral = 14,
        Integer = 1,
        IntegerLiteral = 9,
        Long = 2,
        LongLiteral = 11,
        None = 0,
        ShortLiteral = 7,
        Single = 4,
        SingleLiteral = 13,
        String = 6,
        UIntegerLiteral = 10,
        ULongLiteral = 12,
        UShortLiteral = 8,
    }
    public sealed partial class TypeConstraintSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax
    {
        internal TypeConstraintSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
    }
    public sealed partial class TypeOfExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal TypeOfExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken TypeOfKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax WithType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax WithTypeOfKeyword(Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword) { throw null; }
    }
    public abstract partial class TypeParameterConstraintClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal TypeParameterConstraintClauseSyntax() { }
    }
    public sealed partial class TypeParameterListSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal TypeParameterListSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken CloseParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OfKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenParenToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax> Parameters { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax AddParameters(params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax Update(Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken ofKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax> parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax WithCloseParenToken(Microsoft.CodeAnalysis.SyntaxToken closeParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax WithOfKeyword(Microsoft.CodeAnalysis.SyntaxToken ofKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax WithOpenParenToken(Microsoft.CodeAnalysis.SyntaxToken openParenToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax WithParameters(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax> parameters) { throw null; }
    }
    public sealed partial class TypeParameterMultipleConstraintClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax
    {
        internal TypeParameterMultipleConstraintClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax> Constraints { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax AddConstraints(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax> constraints, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax WithAsKeyword(Microsoft.CodeAnalysis.SyntaxToken asKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax WithConstraints(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax> constraints) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken openBraceToken) { throw null; }
    }
    public sealed partial class TypeParameterSingleConstraintClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax
    {
        internal TypeParameterSingleConstraintClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken AsKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax Constraint { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax WithAsKeyword(Microsoft.CodeAnalysis.SyntaxToken asKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax WithConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint) { throw null; }
    }
    public sealed partial class TypeParameterSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal TypeParameterSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken VarianceKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax Update(Microsoft.CodeAnalysis.SyntaxToken varianceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax typeParameterConstraintClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax WithTypeParameterConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax typeParameterConstraintClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax WithVarianceKeyword(Microsoft.CodeAnalysis.SyntaxToken varianceKeyword) { throw null; }
    }
    public abstract partial class TypeStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax
    {
        internal TypeStatementSyntax() { }
        public int Arity { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax> AttributeLists { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.SyntaxToken DeclarationKeyword { get; }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use DeclarationKeyword or a more specific property (e.g. ClassKeyword) instead.", true)]
        public Microsoft.CodeAnalysis.SyntaxToken Keyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList { get { throw null; } }
        public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax WithDeclarationKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword);
        [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
        [System.ObsoleteAttribute("This member is obsolete. Use DeclarationKeyword or a more specific property (e.g. WithClassKeyword) instead.", true)]
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax WithKeyword(Microsoft.CodeAnalysis.SyntaxToken keyword) { throw null; }
    }
    public abstract partial class TypeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal TypeSyntax() { }
    }
    public sealed partial class UnaryExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal UnaryExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Operand { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken OperatorToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax WithOperand(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax WithOperatorToken(Microsoft.CodeAnalysis.SyntaxToken operatorToken) { throw null; }
    }
    public sealed partial class UsingBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal UsingBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endUsingStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax WithEndUsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endUsingStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax WithUsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement) { throw null; }
    }
    public sealed partial class UsingStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal UsingStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken UsingKeyword { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> Variables { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax AddVariables(params Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> variables) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax WithUsingKeyword(Microsoft.CodeAnalysis.SyntaxToken usingKeyword) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax> variables) { throw null; }
    }
    public sealed partial class VariableDeclaratorSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal VariableDeclaratorSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax AsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax Initializer { get { throw null; } }
        public Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax> Names { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax AddNames(params Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax Update(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax> names, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax WithInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax WithNames(Microsoft.CodeAnalysis.SeparatedSyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax> names) { throw null; }
    }
    public sealed partial class VariableNameEqualsSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal VariableNameEqualsSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax Identifier { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax WithIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) { throw null; }
    }
    public sealed partial class WhereClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax
    {
        internal WhereClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WhereKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken whereKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WithWhereKeyword(Microsoft.CodeAnalysis.SyntaxToken whereKeyword) { throw null; }
    }
    public sealed partial class WhileBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal WhileBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWhileStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WithEndWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWhileStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WithWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement) { throw null; }
    }
    public sealed partial class WhileOrUntilClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal WhileOrUntilClauseSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WhileOrUntilKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WithWhileOrUntilKeyword(Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword) { throw null; }
    }
    public sealed partial class WhileStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal WhileStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Condition { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WhileKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WithCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WithWhileKeyword(Microsoft.CodeAnalysis.SyntaxToken whileKeyword) { throw null; }
    }
    public sealed partial class WithBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal WithBlockSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> Statements { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax AddStatements(params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWithStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithEndWithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWithStatement) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithStatements(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax> statements) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithWithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement) { throw null; }
    }
    public sealed partial class WithEventsEventContainerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax
    {
        internal WithEventsEventContainerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Identifier { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax Update(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken identifier) { throw null; }
    }
    public sealed partial class WithEventsPropertyEventContainerSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax
    {
        internal WithEventsPropertyEventContainerSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken DotToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax Property { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsContainer { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithDotToken(Microsoft.CodeAnalysis.SyntaxToken dotToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithProperty(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithWithEventsContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer) { throw null; }
    }
    public sealed partial class WithStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax
    {
        internal WithStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken WithKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken withKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithWithKeyword(Microsoft.CodeAnalysis.SyntaxToken withKeyword) { throw null; }
    }
    public sealed partial class XmlAttributeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.BaseXmlAttributeSyntax
    {
        internal XmlAttributeSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value) { throw null; }
    }
    public sealed partial class XmlBracketedNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlBracketedNameSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken GreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken lessThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) { throw null; }
    }
    public sealed partial class XmlCDataSectionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlCDataSectionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken BeginCDataToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EndCDataToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList TextTokens { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax AddTextTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken beginCDataToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endCDataToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax WithBeginCDataToken(Microsoft.CodeAnalysis.SyntaxToken beginCDataToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax WithEndCDataToken(Microsoft.CodeAnalysis.SyntaxToken endCDataToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
    }
    public sealed partial class XmlCommentSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlCommentSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanExclamationMinusMinusToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken MinusMinusGreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList TextTokens { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax AddTextTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax WithLessThanExclamationMinusMinusToken(Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax WithMinusMinusGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
    }
    public sealed partial class XmlCrefAttributeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.BaseXmlAttributeSyntax
    {
        internal XmlCrefAttributeSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EndQuoteToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax Reference { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken StartQuoteToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax WithEndQuoteToken(Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax WithReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax WithStartQuoteToken(Microsoft.CodeAnalysis.SyntaxToken startQuoteToken) { throw null; }
    }
    public sealed partial class XmlDeclarationOptionSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal XmlDeclarationOptionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Equals { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax Value { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken equals, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax WithEquals(Microsoft.CodeAnalysis.SyntaxToken equals) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax WithName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax WithValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value) { throw null; }
    }
    public sealed partial class XmlDeclarationSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal XmlDeclarationSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax Encoding { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanQuestionToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken QuestionGreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax Standalone { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax Version { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken XmlKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, Microsoft.CodeAnalysis.SyntaxToken xmlKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone, Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax WithEncoding(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax WithLessThanQuestionToken(Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax WithQuestionGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax WithStandalone(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax WithVersion(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax WithXmlKeyword(Microsoft.CodeAnalysis.SyntaxToken xmlKeyword) { throw null; }
    }
    public sealed partial class XmlDocumentSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlDocumentSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax Declaration { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> FollowingMisc { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> PrecedingMisc { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Root { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax AddFollowingMisc(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax AddPrecedingMisc(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> precedingMisc, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> followingMisc) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithFollowingMisc(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> followingMisc) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithPrecedingMisc(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> precedingMisc) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithRoot(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root) { throw null; }
    }
    public sealed partial class XmlElementEndTagSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlElementEndTagSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken GreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanSlashToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax WithLessThanSlashToken(Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) { throw null; }
    }
    public sealed partial class XmlElementStartTagSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlElementStartTagSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> Attributes { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken GreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax AddAttributes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax WithAttributes(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken lessThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
    }
    public sealed partial class XmlElementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlElementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> Content { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax EndTag { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax StartTag { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax AddContent(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax WithContent(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> content) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax WithEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax WithStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag) { throw null; }
    }
    public sealed partial class XmlEmbeddedExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlEmbeddedExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanPercentEqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken PercentGreaterThanToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanPercentEqualsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken percentGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax WithLessThanPercentEqualsToken(Microsoft.CodeAnalysis.SyntaxToken lessThanPercentEqualsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax WithPercentGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken percentGreaterThanToken) { throw null; }
    }
    public sealed partial class XmlEmptyElementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlEmptyElementSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> Attributes { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken SlashGreaterThanToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax AddAttributes(params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes, Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax WithAttributes(Microsoft.CodeAnalysis.SyntaxList<Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax> attributes) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken lessThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax WithSlashGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken) { throw null; }
    }
    public sealed partial class XmlMemberAccessExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal XmlMemberAccessExpressionSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Base { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Token1 { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Token2 { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Token3 { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax WithBase(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax @base) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax WithToken1(Microsoft.CodeAnalysis.SyntaxToken token1) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax WithToken2(Microsoft.CodeAnalysis.SyntaxToken token2) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax WithToken3(Microsoft.CodeAnalysis.SyntaxToken token3) { throw null; }
    }
    public sealed partial class XmlNameAttributeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.BaseXmlAttributeSyntax
    {
        internal XmlNameAttributeSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EndQuoteToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken EqualsToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax Name { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax Reference { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken StartQuoteToken { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax WithEndQuoteToken(Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax WithEqualsToken(Microsoft.CodeAnalysis.SyntaxToken equalsToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax WithName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax WithReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax WithStartQuoteToken(Microsoft.CodeAnalysis.SyntaxToken startQuoteToken) { throw null; }
    }
    public sealed partial class XmlNamespaceImportsClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax
    {
        internal XmlNamespaceImportsClauseSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken GreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlNamespace { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax WithGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax WithLessThanToken(Microsoft.CodeAnalysis.SyntaxToken lessThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax WithXmlNamespace(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace) { throw null; }
    }
    public sealed partial class XmlNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlNameSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken LocalName { get { throw null; } }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax Prefix { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax prefix, Microsoft.CodeAnalysis.SyntaxToken localName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax WithLocalName(Microsoft.CodeAnalysis.SyntaxToken localName) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax WithPrefix(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax prefix) { throw null; }
    }
    public abstract partial class XmlNodeSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax
    {
        internal XmlNodeSyntax() { }
    }
    public sealed partial class XmlPrefixNameSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlPrefixNameSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax Update(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax WithName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
    }
    public sealed partial class XmlPrefixSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode
    {
        internal XmlPrefixSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken ColonToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Name { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax Update(Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax WithColonToken(Microsoft.CodeAnalysis.SyntaxToken colonToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax WithName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
    }
    public sealed partial class XmlProcessingInstructionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlProcessingInstructionSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken LessThanQuestionToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken Name { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken QuestionGreaterThanToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList TextTokens { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax AddTextTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax Update(Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax WithLessThanQuestionToken(Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax WithName(Microsoft.CodeAnalysis.SyntaxToken name) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax WithQuestionGreaterThanToken(Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
    }
    public sealed partial class XmlStringSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlStringSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxToken EndQuoteToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken StartQuoteToken { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxTokenList TextTokens { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax AddTextTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax Update(Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax WithEndQuoteToken(Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax WithStartQuoteToken(Microsoft.CodeAnalysis.SyntaxToken startQuoteToken) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
    }
    public sealed partial class XmlTextSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax
    {
        internal XmlTextSyntax() { }
        public Microsoft.CodeAnalysis.SyntaxTokenList TextTokens { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax AddTextTokens(params Microsoft.CodeAnalysis.SyntaxToken[] items) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax Update(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax WithTextTokens(Microsoft.CodeAnalysis.SyntaxTokenList textTokens) { throw null; }
    }
    public sealed partial class YieldStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax
    {
        internal YieldStatementSyntax() { }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get { throw null; } }
        public Microsoft.CodeAnalysis.SyntaxToken YieldKeyword { get { throw null; } }
        public override void Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) { }
        public override TResult Accept<TResult>(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor<TResult> visitor) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax Update(Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) { throw null; }
        public Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax WithYieldKeyword(Microsoft.CodeAnalysis.SyntaxToken yieldKeyword) { throw null; }
    }
}
