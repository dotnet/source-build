<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(TaskDirectory)Microsoft.DotNet.SourceBuild.Tasks/bin/Debug/netstandard1.4/Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteVersionsFile" />

  <!--
    =======================================================================================================
                                         F# + .NET Core SDK Targets
    =======================================================================================================
    - These call in to the Core targets listed below.

  -->

  <Target Name="_InitializeNetCoreCLIFSC" >
    <FindInList CaseSensitive="false" List="@(Repository)" ItemSpecToFind="NetCoreCLIFSC">
      <Output TaskParameter="ItemFound" ItemName="NetCoreCLIFSC" />
    </FindInList>

    <Error Condition="'%(NetCoreCLIFSC.ProjectDirectory)' == ''" Text="You are missing NetCoreCLI FSC metadata, or you need to specify a NetCoreCLI FSC git directory, either with the /p:PathToNetCoreCLIFSC switch, or in the 'targets/targets.props'" />

    <PropertyGroup>
      <CoreProjectName>%(NetCoreCLIFSC.Identity)</CoreProjectName>
      <CoreProjectDirectory>%(NetCoreCLIFSC.ProjectDirectory)</CoreProjectDirectory>
      <CorePackageOutputDirectory>$(CoreProjectDirectory)/artifacts/nupkgs/</CorePackageOutputDirectory>
      <CoreBuildCommand>$(CoreProjectDirectory)build$(ShellExtension)</CoreBuildCommand>
      <CoreArguments>/t:Package</CoreArguments>
      <CoreVersionFile>%(NetCoreCLIFSC.VersionFile)</CoreVersionFile>      
    </PropertyGroup>
  </Target>

  <Target Name="BuildNetCoreCLIFSC" DependsOnTargets="_InitializeNetCoreCLIFSC">
    
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="BuildCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>

	<Target Name="CleanNetCoreCLIFSC" DependsOnTargets="_InitializeNetCoreCLIFSC">
		<MSBuild 
		  Projects="$(MSBuildThisFileDirectory)../build.proj"
		  Targets="CleanCoreRepo" 
		  Properties="
		   CoreProjectName=$(CoreProjectName);
		   CoreProjectDirectory=$(CoreProjectDirectory);
		   CorePackageOutputDirectory=$(CorePackageOutputDirectory);
		   CoreBuildCommand=$(CoreBuildCommand);
		   CoreArguments=$(CoreArguments);
		   CoreVersionFile=$(CoreVersionFile);"
		/>
	</Target>


  <!--
    =======================================================================================================
                                         CoreCLR Targets
    =======================================================================================================
    - These call in to the Core targets listed below.

  -->

  <Target Name="_InitializeCoreClr" >
    <FindInList CaseSensitive="false" List="@(Repository)" ItemSpecToFind="coreclr">
      <Output TaskParameter="ItemFound" ItemName="CoreClr" />
    </FindInList>

    <Error Condition="'%(CoreClr.ProjectDirectory)' == ''" Text="You are missing CoreClr metadata, or you need to specify a CoreCLR git directory, either with the /p:PathToCoreClr switch, or in the 'targets/targets.props'" />

    <PropertyGroup>
      <CoreProjectName>%(CoreClr.Identity)</CoreProjectName>
      <CoreProjectDirectory>%(CoreClr.ProjectDirectory)</CoreProjectDirectory>
      <CorePackageOutputDirectory>$(CoreProjectDirectory)/bin/Product/$(TargetOS).$(Platform).$(Configuration)/.nuget/pkg/</CorePackageOutputDirectory>
      <CoreBuildCommand>$(CoreProjectDirectory)build$(ShellExtension)</CoreBuildCommand>
      <CoreArguments>$(Platform) $(Configuration) skiptests</CoreArguments>
      <CoreVersionFile>%(CoreClr.VersionFile)</CoreVersionFile>      
    </PropertyGroup>
  </Target>

  <Target Name="BuildCoreClr" DependsOnTargets="_InitializeCoreClr">
    
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="BuildCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>

  <Target Name="CleanCoreClr" DependsOnTargets="_InitializeCoreClr">
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="CleanCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>

 <!--
    =======================================================================================================
                                         CoreFX Targets
    =======================================================================================================
    - These call in to the Core targets listed below.
  -->  
  
  
  <Target Name="_InitializeCoreFx">
    <FindInList CaseSensitive="false" List="@(Repository)" ItemSpecToFind="corefx">
      <Output TaskParameter="ItemFound" ItemName="CoreFx" />
    </FindInList>

    <Error Condition="'%(CoreFx.ProjectDirectory)' == ''" Text="Specify a CoreFX git directory, either with the /p:PathToCoreFx switch, or in the 'targets/targets.props'" />

    <PropertyGroup>
      <CoreProjectName>%(CoreFx.Identity)</CoreProjectName>
      <CoreProjectDirectory>%(CoreFx.ProjectDirectory)</CoreProjectDirectory>
      <CorePackageOutputDirectory>$(CoreProjectDirectory)bin/packages/$(Configuration)/</CorePackageOutputDirectory>
      <CoreBuildCommand>$(CoreProjectDirectory)build$(ShellExtension)</CoreBuildCommand>
      <CoreArguments>-$(Configuration) -buildArch=$(Platform)</CoreArguments>
      <CoreVersionFile>%(CoreFx.VersionFile)</CoreVersionFile>
    </PropertyGroup>
  </Target>

  <Target Name="BuildCoreFx" DependsOnTargets="_InitializeCoreFx">
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="BuildCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>


  <Target Name="CleanCoreFx" DependsOnTargets="_InitializeCoreFx">
    <MSBuild 
      Projects="$(MSBuildThisFileDirectory)../build.proj"
      Targets="CleanCoreRepo" 
      Properties="
       CoreProjectName=$(CoreProjectName);
       CoreProjectDirectory=$(CoreProjectDirectory);
       CorePackageOutputDirectory=$(CorePackageOutputDirectory);
       CoreBuildCommand=$(CoreBuildCommand);
       CoreArguments=$(CoreArguments);
       CoreVersionFile=$(CoreVersionFile);"
    />
  </Target>

  <!--
    =======================================================================================================
                                         For all Core repositories
    =======================================================================================================
  --> 

  <Target Name="BuildCoreRepo">
    <Exec Command="$(CoreBuildCommand) $(CoreArguments)"
          WorkingDirectory="$(CoreProjectDirectory)" />

    <ItemGroup>
      <CorePackages Include="$(CorePackageOutputDirectory)*.nupkg" />
    </ItemGroup>

    <Copy SourceFiles="@(CorePackages)"
          DestinationFolder="$(SourceBuiltPackagesPath)" />

    <WriteVersionsFile NugetPackages="@(CorePackages)"
                       OutputPath="$(CoreVersionFile)" />
  </Target>

  <Target Name="CleanCoreRepo">
    <Exec Command="$(CoreProjectDirectory)clean$(ShellExtension) --all"
          WorkingDirectory="$(CoreProjectDirectory)" />
  </Target>
</Project>
