<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" InitialTargets="SetNuGetPackagesEnvironment" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />

  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="WriteVersionsFile" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="AddSourceToNuGetConfig" />
  <UsingTask AssemblyFile="$(TasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.dll" TaskName="RemoveInternetSourcesFromNuGetConfig" />

  <!--Repo specific properties -->
  <Import Project="$(RepositoryName).props" />

  <PropertyGroup>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)NuGet.config')">$(ProjectDirectory)NuGet.config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)NuGet.Config')">$(ProjectDirectory)NuGet.Config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)src\NuGet.config')">$(ProjectDirectory)src\NuGet.config</NuGetConfigFile>
    <NuGetConfigFile Condition="'$(NuGetConfigFile)' == '' and Exists('$(ProjectDirectory)src\NuGet.Config')">$(ProjectDirectory)src\NuGet.Config</NuGetConfigFile>
  </PropertyGroup>

  <Import Project="$(ProjectDirectory)dependencies.props"
          Condition="Exists('$(ProjectDirectory)dependencies.props')" />

  <Target Name="BuildRepositoryAndDependencies" DependsOnTargets="BuildRepositoryReferences;Build" />

  <Target Name="BuildRepositoryReferences" Condition="'@(RepositoryReference)' != '' and '$(BuildDependentRepositories)' != 'false'">
    <ItemGroup>
      <_UnreferencedRepository Include="@(Repository)" Exclude="@(RepositoryReference)" />
      <_DependentRepository Include="@(Repository)" Exclude="@(_UnreferencedRepository)" />
      <_DependentRepository Remove="$(RepositoryName)" />

      <_DependentProject Include="$(MSBuildThisFile)">
        <AdditionalProperties>RepositoryName=%(_DependentRepository.Identity);PathToRepo=%(_DependentRepository.PathToRepo);RepositoryOrganization=%(_DependentRepository.Organization);RepositoryBranch=%(_DependentRepository.Branch)</AdditionalProperties>
      </_DependentProject>
    </ItemGroup>

    <MSBuild Projects="@(_DependentProject)" Targets="BuildRepositoryAndDependencies" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="ApplyPatches" Condition="Exists('$(PatchesDir)$(RepositoryName)') and '$(SkipPatches)' != 'true'"
          BeforeTargets="Build">
    <ItemGroup>
      <PatchesToApply Include="$(PatchesDir)$(RepositoryName)/*.patch" />
    </ItemGroup>

    <PropertyGroup>
      <PatchCommand>git apply --ignore-whitespace --whitespace=nowarn</PatchCommand>
    </PropertyGroup>

    <Exec Command="$(PatchCommand) %(PatchesToApply.Identity)"
          WorkingDirectory="$(ProjectDirectory)"
          EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="UpdateNuGetConfig"
          BeforeTargets="Build"
          Condition="'$(NuGetConfigFile)' != ''">
    <RemoveInternetSourcesFromNuGetConfig NuGetConfigFile="$(NuGetConfigFile)"
                                          Condition="'$(OfflineBuild)' != ''" />

    <AddSourceToNuGetConfig NuGetConfigFile="$(NuGetConfigFile)"
                            SourceName="prebuilt"
                            SourcePath="$(PrebuiltPackagesPath)"
                            Condition="'$(OfflineBuild)' == 'true'" />

    <AddSourceToNuGetConfig NuGetConfigFile="$(NuGetConfigFile)"
                            SourceName="source-built"
                            SourcePath="$(SourceBuiltPackagesPath)" />
  </Target>

  <Target Name="Build">
    <Message Importance="High" Text="Building '$(RepositoryName)'" />
    <ItemGroup>
      <EnvironmentVariables Condition="'$(NUGET_PACKAGES)'!=''" Include="NUGET_PACKAGES=$(NUGET_PACKAGES)" />
    </ItemGroup>
    <Exec Command="$(BuildCommand)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="Package" AfterTargets="Build" Condition="'$(BuildPackagesCommand)' != ''">
    <Exec Command="$(BuildPackagesCommand)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="CopyPackage" AfterTargets="Package" >
    <ItemGroup>
      <!-- Filter out packages for WriteVersions -->
      <_BuiltPackages Include="$(PackagesOutput)/*.nupkg" Exclude="$(PackagesOutput)/*.symbols.nupkg"/>
    </ItemGroup>
    <Copy SourceFiles="@(_BuiltPackages)"
          DestinationFolder="$(SourceBuiltPackagesPath)"
          Condition="'@(_BuiltPackages)'!=''" />
  </Target>

  <Target Name="WriteVersions" AfterTargets="CopyPackage" >
    <WriteVersionsFile NugetPackages="@(_BuiltPackages)"
                       OutputPath="$(VersionFileLocation)"
                       Condition="'@(_BuiltPackages)'!=''" />
  </Target>

  <Target Name="Clean" Condition="'$(CleanCommand)' != ''" >
    <Exec Command="$(CleanCommand)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="Update" BeforeTargets="Build" Condition="'$(UpdateCommand)' != ''" >
    <Exec Command="$(UpdateCommand)" WorkingDirectory="$(ProjectDirectory)" EnvironmentVariables="@(EnvironmentVariables)" />
  </Target>

  <Target Name="SetNuGetPackagesEnvironment" Condition="'$(ArchiveDownloadedPackages)' == 'true'">
    <PropertyGroup>
      <LocalNuGetPackagesRootForRepository>$(LocalNuGetPackagesRoot)$(RepositoryName)/</LocalNuGetPackagesRootForRepository>
    </PropertyGroup>

    <MakeDir Directories="$(LocalNuGetPackagesRootForRepository)" />

    <ItemGroup>
      <EnvironmentVariables Include="NUGET_PACKAGES=$(LocalNuGetPackagesRootForRepository)" />
    </ItemGroup>
  </Target>

  <!--
    Update a repository that uses the BuildTools auto-update flow.
  -->
  <Target Name="UpdateUsingBuildTools"
          DependsOnTargets="UpdateDependencies"
          BeforeTargets="Build;Update"
          Condition="'@(DependencyBuildInfo)' != ''" />

  <!--
    Mutate the UpdateDependencies items to use only local build-infos.
  -->
  <Target Name="AdjustUpdateDependencyItems"
          BeforeTargets="UpdateDependencies">
    <ItemGroup>
      <LocalDependencyBuildInfo Include="@(DependencyBuildInfo)"
                                KeepMetadata="BuildInfoPath"
                                Condition="Exists('$(IntermediatePath)%(DependencyBuildInfo.BuildInfoPath)\Latest_Packages.txt')">
        <VersionsRepoDir>$(IntermediatePath)</VersionsRepoDir>
      </LocalDependencyBuildInfo>

      <!--
        TODO: Strengthen association between DependencyBuildInfo and UpdateStep.
        As of writing, it is only an unenforced convention for the ItemSpec of
        an UpdateStep to be the name of the build-info that it uses.
      -->
      <UpdateStepWithoutLocalBuildInfo Include="@(UpdateStep)" Exclude="@(LocalDependencyBuildInfo)" />
      <UpdateStep Remove="@(UpdateStepWithoutLocalBuildInfo)" />

      <DependencyBuildInfo Remove="@(DependencyBuildInfo)" />
      <DependencyBuildInfo Include="@(LocalDependencyBuildInfo)" />
    </ItemGroup>
  </Target>

  <Target Name="BootstrapBuildTools" BeforeTargets="Build"
         Condition="'$(SkipBootstrapBuildTools)' != 'true' and '$(_IsBootstrapping)' == 'true'">
   <PropertyGroup>
     <ProjectToolsDir>$(ProjectDirectory)Tools/</ProjectToolsDir>
   </PropertyGroup>
   <RemoveDir Directories="$(ProjectToolsDir)" />
   <MakeDir Directories="$(ProjectToolsDir)" />
   <ItemGroup>
     <BuildToolsFile Include="$(BootstrapBuildToolsDir)/**" />
     <BuildToolsFile Include="$(ProjectDirectory)Tools-Override/**" />
   </ItemGroup>

   <Copy SourceFiles="@(BuildToolsFile)"
         DestinationFiles="@(BuildToolsFile->'$(ProjectToolsDir)%(RecursiveDir)%(Filename)%(Extension)')" />

   <Copy SourceFiles="$(BootstrapBuildToolsDir)/BuildToolsVersion.txt"
         DestinationFolder="$(ProjectDirectory)" />
  </Target>

  <Import Project="$(ToolsDir)VersionTools.targets" />

  <!--Repo targets -->
  <Import Project="$(RepositoryName).targets" Condition="Exists('$(RepositoryName).targets')"/>
</Project>
