<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" InitialTargets="PrepareOutput" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="dir.props" />

  <Target Name="Build" DependsOnTargets="PrepareOutput;InitBuild">
    <Message Text="Build Environment: $(Platform) $(Configuration) $(TargetOS) $(TargetRid)" />

    <MSBuild Projects="repos\$(RootRepo).proj" Targets="Build" BuildInParallel="$(BuildInParallel)" StopOnFirstFailure="true" />
  </Target>

  <Target Name="PrepareOutput">
    <MakeDir Directories="$(OutputPath)" />
    <MakeDir Directories="$(LoggingDir)" />
    <MakeDir Directories="$(GitInfoOutputDir)" />
    <MakeDir Directories="$(IntermediatePath)" />
    <MakeDir Directories="$(SourceBuiltBlobFeedDir)" />
    <MakeDir Directories="$(SourceBuiltPackagesPath)" />
    <MakeDir Directories="$(SourceBuiltAssetsDir)" />
    <MakeDir Directories="$(LocalBlobStorageRoot)" />
    <MakeDir Directories="$(MSBuildDebugPathTargetDir)" />
  </Target>

  <Target Name="InitBuild">
    <MSBuild Projects="tools-local/init-build.proj" />
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories="$(BaseOutputPath)" />
  </Target>

  <!-- After building, generate a prebuilt usage report. -->
  <Target Name="ReportPrebuiltUsage"
          AfterTargets="Build"
          Condition="'$(SkipReportPrebuiltUsage)' != 'true'">
    <MSBuild Projects="repos\$(RootRepo).proj" Targets="WritePrebuiltUsageData;ReportPrebuiltUsage" />
  </Target>

  <!--
    Dev scenario: rewrite a prebuilt-report. This makes it easy to add data to an existing
    prebuilt report without performing another full build. This doesn't reevalutate which packages
    are prebuilts or search the projects: it uses the existing usage.xml file to generate report
    XMLs based on the info put in bin/.
  -->
  <Target Name="RewritePrebuiltUsageReport">
    <MSBuild Projects="repos\$(RootRepo).proj" Targets="ReportPrebuiltUsage" />
  </Target>

  <Target Name="RunSmokeTest" DependsOnTargets="GetProdConBlobFeedUrl">
    <!--
      Pass prodConBlobFeedUrl via EnvironmentVariables because it has '//' in it, which is
      translated into '/' if it's passed in the Command arg.
      This is also a problem when passing CLI feeds: https://github.com/dotnet/source-build/issues/561
    -->
    <Exec Command="./smoke-test.sh --minimal --projectOutput --configuration $(Configuration) --archiveRestoredPackages"
          EnvironmentVariables="prodConBlobFeedUrl=$(ProdConBlobFeedUrl)" />
  </Target>

  <Import Project="$(ProjectDir)dependencies.targets" />

  <Import Project="$(ToolsDir)VersionTools.targets" />
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />

</Project>
